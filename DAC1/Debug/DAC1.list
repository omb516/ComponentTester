
DAC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af3c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  0800b0c8  0800b0c8  0001b0c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2f0  0800b2f0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2f0  0800b2f0  0001b2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2f8  0800b2f8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2f8  0800b2f8  0001b2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2fc  0800b2fc  0001b2fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800b300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000bec  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c7c  20000c7c  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a6a0  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e0b  00000000  00000000  0003a760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001608  00000000  00000000  0003e570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001468  00000000  00000000  0003fb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000267e3  00000000  00000000  00040fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c271  00000000  00000000  000677c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000defe8  00000000  00000000  00083a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00162a1c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063c8  00000000  00000000  00162a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b0ac 	.word	0x0800b0ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800b0ac 	.word	0x0800b0ac

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295
 8000b28:	f000 b974 	b.w	8000e14 <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f806 	bl	8000b44 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__udivmoddi4>:
 8000b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	9d08      	ldr	r5, [sp, #32]
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	468e      	mov	lr, r1
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d14d      	bne.n	8000bee <__udivmoddi4+0xaa>
 8000b52:	428a      	cmp	r2, r1
 8000b54:	4694      	mov	ip, r2
 8000b56:	d969      	bls.n	8000c2c <__udivmoddi4+0xe8>
 8000b58:	fab2 f282 	clz	r2, r2
 8000b5c:	b152      	cbz	r2, 8000b74 <__udivmoddi4+0x30>
 8000b5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b62:	f1c2 0120 	rsb	r1, r2, #32
 8000b66:	fa20 f101 	lsr.w	r1, r0, r1
 8000b6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b72:	4094      	lsls	r4, r2
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	0c21      	lsrs	r1, r4, #16
 8000b7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b7e:	fa1f f78c 	uxth.w	r7, ip
 8000b82:	fb08 e316 	mls	r3, r8, r6, lr
 8000b86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b8a:	fb06 f107 	mul.w	r1, r6, r7
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	d90a      	bls.n	8000ba8 <__udivmoddi4+0x64>
 8000b92:	eb1c 0303 	adds.w	r3, ip, r3
 8000b96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b9a:	f080 811f 	bcs.w	8000ddc <__udivmoddi4+0x298>
 8000b9e:	4299      	cmp	r1, r3
 8000ba0:	f240 811c 	bls.w	8000ddc <__udivmoddi4+0x298>
 8000ba4:	3e02      	subs	r6, #2
 8000ba6:	4463      	add	r3, ip
 8000ba8:	1a5b      	subs	r3, r3, r1
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000bb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb8:	fb00 f707 	mul.w	r7, r0, r7
 8000bbc:	42a7      	cmp	r7, r4
 8000bbe:	d90a      	bls.n	8000bd6 <__udivmoddi4+0x92>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc8:	f080 810a 	bcs.w	8000de0 <__udivmoddi4+0x29c>
 8000bcc:	42a7      	cmp	r7, r4
 8000bce:	f240 8107 	bls.w	8000de0 <__udivmoddi4+0x29c>
 8000bd2:	4464      	add	r4, ip
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	1be4      	subs	r4, r4, r7
 8000bdc:	2600      	movs	r6, #0
 8000bde:	b11d      	cbz	r5, 8000be8 <__udivmoddi4+0xa4>
 8000be0:	40d4      	lsrs	r4, r2
 8000be2:	2300      	movs	r3, #0
 8000be4:	e9c5 4300 	strd	r4, r3, [r5]
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	428b      	cmp	r3, r1
 8000bf0:	d909      	bls.n	8000c06 <__udivmoddi4+0xc2>
 8000bf2:	2d00      	cmp	r5, #0
 8000bf4:	f000 80ef 	beq.w	8000dd6 <__udivmoddi4+0x292>
 8000bf8:	2600      	movs	r6, #0
 8000bfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000bfe:	4630      	mov	r0, r6
 8000c00:	4631      	mov	r1, r6
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	fab3 f683 	clz	r6, r3
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d14a      	bne.n	8000ca4 <__udivmoddi4+0x160>
 8000c0e:	428b      	cmp	r3, r1
 8000c10:	d302      	bcc.n	8000c18 <__udivmoddi4+0xd4>
 8000c12:	4282      	cmp	r2, r0
 8000c14:	f200 80f9 	bhi.w	8000e0a <__udivmoddi4+0x2c6>
 8000c18:	1a84      	subs	r4, r0, r2
 8000c1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c1e:	2001      	movs	r0, #1
 8000c20:	469e      	mov	lr, r3
 8000c22:	2d00      	cmp	r5, #0
 8000c24:	d0e0      	beq.n	8000be8 <__udivmoddi4+0xa4>
 8000c26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c2a:	e7dd      	b.n	8000be8 <__udivmoddi4+0xa4>
 8000c2c:	b902      	cbnz	r2, 8000c30 <__udivmoddi4+0xec>
 8000c2e:	deff      	udf	#255	; 0xff
 8000c30:	fab2 f282 	clz	r2, r2
 8000c34:	2a00      	cmp	r2, #0
 8000c36:	f040 8092 	bne.w	8000d5e <__udivmoddi4+0x21a>
 8000c3a:	eba1 010c 	sub.w	r1, r1, ip
 8000c3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c42:	fa1f fe8c 	uxth.w	lr, ip
 8000c46:	2601      	movs	r6, #1
 8000c48:	0c20      	lsrs	r0, r4, #16
 8000c4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000c52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c56:	fb0e f003 	mul.w	r0, lr, r3
 8000c5a:	4288      	cmp	r0, r1
 8000c5c:	d908      	bls.n	8000c70 <__udivmoddi4+0x12c>
 8000c5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x12a>
 8000c68:	4288      	cmp	r0, r1
 8000c6a:	f200 80cb 	bhi.w	8000e04 <__udivmoddi4+0x2c0>
 8000c6e:	4643      	mov	r3, r8
 8000c70:	1a09      	subs	r1, r1, r0
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c78:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c80:	fb0e fe00 	mul.w	lr, lr, r0
 8000c84:	45a6      	cmp	lr, r4
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0x156>
 8000c88:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c90:	d202      	bcs.n	8000c98 <__udivmoddi4+0x154>
 8000c92:	45a6      	cmp	lr, r4
 8000c94:	f200 80bb 	bhi.w	8000e0e <__udivmoddi4+0x2ca>
 8000c98:	4608      	mov	r0, r1
 8000c9a:	eba4 040e 	sub.w	r4, r4, lr
 8000c9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ca2:	e79c      	b.n	8000bde <__udivmoddi4+0x9a>
 8000ca4:	f1c6 0720 	rsb	r7, r6, #32
 8000ca8:	40b3      	lsls	r3, r6
 8000caa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000cb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000cba:	431c      	orrs	r4, r3
 8000cbc:	40f9      	lsrs	r1, r7
 8000cbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000cc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cca:	0c20      	lsrs	r0, r4, #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000cd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000cdc:	4288      	cmp	r0, r1
 8000cde:	fa02 f206 	lsl.w	r2, r2, r6
 8000ce2:	d90b      	bls.n	8000cfc <__udivmoddi4+0x1b8>
 8000ce4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cec:	f080 8088 	bcs.w	8000e00 <__udivmoddi4+0x2bc>
 8000cf0:	4288      	cmp	r0, r1
 8000cf2:	f240 8085 	bls.w	8000e00 <__udivmoddi4+0x2bc>
 8000cf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cfa:	4461      	add	r1, ip
 8000cfc:	1a09      	subs	r1, r1, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d04:	fb09 1110 	mls	r1, r9, r0, r1
 8000d08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d10:	458e      	cmp	lr, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x1e2>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d1c:	d26c      	bcs.n	8000df8 <__udivmoddi4+0x2b4>
 8000d1e:	458e      	cmp	lr, r1
 8000d20:	d96a      	bls.n	8000df8 <__udivmoddi4+0x2b4>
 8000d22:	3802      	subs	r0, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d2e:	eba1 010e 	sub.w	r1, r1, lr
 8000d32:	42a1      	cmp	r1, r4
 8000d34:	46c8      	mov	r8, r9
 8000d36:	46a6      	mov	lr, r4
 8000d38:	d356      	bcc.n	8000de8 <__udivmoddi4+0x2a4>
 8000d3a:	d053      	beq.n	8000de4 <__udivmoddi4+0x2a0>
 8000d3c:	b15d      	cbz	r5, 8000d56 <__udivmoddi4+0x212>
 8000d3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d42:	eb61 010e 	sbc.w	r1, r1, lr
 8000d46:	fa01 f707 	lsl.w	r7, r1, r7
 8000d4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d4e:	40f1      	lsrs	r1, r6
 8000d50:	431f      	orrs	r7, r3
 8000d52:	e9c5 7100 	strd	r7, r1, [r5]
 8000d56:	2600      	movs	r6, #0
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	40d8      	lsrs	r0, r3
 8000d64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d68:	fa21 f303 	lsr.w	r3, r1, r3
 8000d6c:	4091      	lsls	r1, r2
 8000d6e:	4301      	orrs	r1, r0
 8000d70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d74:	fa1f fe8c 	uxth.w	lr, ip
 8000d78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d80:	0c0b      	lsrs	r3, r1, #16
 8000d82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d86:	fb00 f60e 	mul.w	r6, r0, lr
 8000d8a:	429e      	cmp	r6, r3
 8000d8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x260>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d9a:	d22f      	bcs.n	8000dfc <__udivmoddi4+0x2b8>
 8000d9c:	429e      	cmp	r6, r3
 8000d9e:	d92d      	bls.n	8000dfc <__udivmoddi4+0x2b8>
 8000da0:	3802      	subs	r0, #2
 8000da2:	4463      	add	r3, ip
 8000da4:	1b9b      	subs	r3, r3, r6
 8000da6:	b289      	uxth	r1, r1
 8000da8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dac:	fb07 3316 	mls	r3, r7, r6, r3
 8000db0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db4:	fb06 f30e 	mul.w	r3, r6, lr
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x28a>
 8000dbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dc4:	d216      	bcs.n	8000df4 <__udivmoddi4+0x2b0>
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	d914      	bls.n	8000df4 <__udivmoddi4+0x2b0>
 8000dca:	3e02      	subs	r6, #2
 8000dcc:	4461      	add	r1, ip
 8000dce:	1ac9      	subs	r1, r1, r3
 8000dd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dd4:	e738      	b.n	8000c48 <__udivmoddi4+0x104>
 8000dd6:	462e      	mov	r6, r5
 8000dd8:	4628      	mov	r0, r5
 8000dda:	e705      	b.n	8000be8 <__udivmoddi4+0xa4>
 8000ddc:	4606      	mov	r6, r0
 8000dde:	e6e3      	b.n	8000ba8 <__udivmoddi4+0x64>
 8000de0:	4618      	mov	r0, r3
 8000de2:	e6f8      	b.n	8000bd6 <__udivmoddi4+0x92>
 8000de4:	454b      	cmp	r3, r9
 8000de6:	d2a9      	bcs.n	8000d3c <__udivmoddi4+0x1f8>
 8000de8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000df0:	3801      	subs	r0, #1
 8000df2:	e7a3      	b.n	8000d3c <__udivmoddi4+0x1f8>
 8000df4:	4646      	mov	r6, r8
 8000df6:	e7ea      	b.n	8000dce <__udivmoddi4+0x28a>
 8000df8:	4620      	mov	r0, r4
 8000dfa:	e794      	b.n	8000d26 <__udivmoddi4+0x1e2>
 8000dfc:	4640      	mov	r0, r8
 8000dfe:	e7d1      	b.n	8000da4 <__udivmoddi4+0x260>
 8000e00:	46d0      	mov	r8, sl
 8000e02:	e77b      	b.n	8000cfc <__udivmoddi4+0x1b8>
 8000e04:	3b02      	subs	r3, #2
 8000e06:	4461      	add	r1, ip
 8000e08:	e732      	b.n	8000c70 <__udivmoddi4+0x12c>
 8000e0a:	4630      	mov	r0, r6
 8000e0c:	e709      	b.n	8000c22 <__udivmoddi4+0xde>
 8000e0e:	4464      	add	r4, ip
 8000e10:	3802      	subs	r0, #2
 8000e12:	e742      	b.n	8000c9a <__udivmoddi4+0x156>

08000e14 <__aeabi_idiv0>:
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop

08000e18 <PB_LCD_Set_As_Output>:
#include "STM32F4xx.h"

////////////////////////////////////////
// Some general purpose helper routines:

void PB_LCD_Set_As_Output(int bit, GPIO_TypeDef* port) {
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  // any general purpose output. This involves setting the appropriate bits in:
  // MODER set to "01" (general purpose output)
  // OTYPER set to "0" (push-pull output)
  // OSPEEDR set to "10" (high-speed - perhaps not required)
  // PUPDR set to "00" (no pull-up or pull-down required)
  unsigned long bitMask = ~(3UL << 2*bit);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	2203      	movs	r2, #3
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	60fb      	str	r3, [r7, #12]
  port->MODER = (port->MODER & bitMask) | (1UL << 2*bit);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	401a      	ands	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	431a      	orrs	r2, r3
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	601a      	str	r2, [r3, #0]
  port->OTYPER &= ~(1UL << bit);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	fa01 f303 	lsl.w	r3, r1, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	401a      	ands	r2, r3
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
  port->OSPEEDR = (port->OSPEEDR & bitMask) | (2UL << 2*bit);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	401a      	ands	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	2102      	movs	r1, #2
 8000e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	609a      	str	r2, [r3, #8]
  port->PUPDR = (port->PUPDR & bitMask) | (0UL << 2*bit);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	60da      	str	r2, [r3, #12]
}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <PB_LCD_Set_As_Input>:

enum eTermType { PULLUP = 1, PULLDOWN = 2, PULLBOTH = 3, NOPULL = 0 };
void PB_LCD_Set_As_Input(int bit, GPIO_TypeDef* port, enum eTermType eTT) {
 8000e8c:	b480      	push	{r7}
 8000e8e:	b087      	sub	sp, #28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	4613      	mov	r3, r2
 8000e98:	71fb      	strb	r3, [r7, #7]
  // Configures one bit in the GPIO port as an input suitable for reading from.  
  // Note, this includes a pull-up resistor for compatibility with open-drain 
  // outputs.  This involves setting the corresponding bits in:
  // MODER set to "00" (general purpose input)
  // PUPDR should be set to NOPULL ("00") by default
  unsigned long bitMask = ~(3UL << 2*bit);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	617b      	str	r3, [r7, #20]
  port->MODER &= bitMask;
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	401a      	ands	r2, r3
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	601a      	str	r2, [r3, #0]
  port->PUPDR = (port->PUPDR & bitMask) | ((unsigned int)eTT << 2*bit);
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	68da      	ldr	r2, [r3, #12]
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	401a      	ands	r2, r3
 8000ebc:	79f9      	ldrb	r1, [r7, #7]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	60da      	str	r2, [r3, #12]
}
 8000ecc:	bf00      	nop
 8000ece:	371c      	adds	r7, #28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <PB_LCD_Microdelay>:

// PB_LCD_Microdelay attempts to delay by the requested number of microseconds
// (The factors were determined experimentally for the STM32F discovery
// board running at 16 MHz with no compiler optimisations.)
void PB_LCD_Microdelay (unsigned int delayInMicroSeconds) {
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  float compensation = (float)SystemCoreClock / (float)16e6;
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <PB_LCD_Microdelay+0x60>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	ee07 3a90 	vmov	s15, r3
 8000ee8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000eec:	eddf 6a13 	vldr	s13, [pc, #76]	; 8000f3c <PB_LCD_Microdelay+0x64>
 8000ef0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ef4:	edc7 7a03 	vstr	s15, [r7, #12]
  volatile unsigned long x = (unsigned long)(compensation * (36 * delayInMicroSeconds >> 4));
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	4613      	mov	r3, r2
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	4413      	add	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	091b      	lsrs	r3, r3, #4
 8000f04:	ee07 3a90 	vmov	s15, r3
 8000f08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f18:	ee17 3a90 	vmov	r3, s15
 8000f1c:	60bb      	str	r3, [r7, #8]
  while (x-- > 0);
 8000f1e:	bf00      	nop
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	1e5a      	subs	r2, r3, #1
 8000f24:	60ba      	str	r2, [r7, #8]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1fa      	bne.n	8000f20 <PB_LCD_Microdelay+0x48>
}
 8000f2a:	bf00      	nop
 8000f2c:	bf00      	nop
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	4b742400 	.word	0x4b742400

08000f40 <PB_LCD_IsBusy>:
// how to kick it out of whatever random state it gets into at these times).
#define LCD_DELAY_CONST 50

enum eLCD_OP { READ_INSTRUCTION, WRITE_INSTRUCTION, READ_DATA, WRITE_DATA };

uint8_t PB_LCD_IsBusy () {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
  // to go low.  At this point I don't know whether the LCD is in 8-bit mode or 
  // 4-bit mode, so I'll read it twice and take the MSB of the first reading only.
  uint8_t busy;

  // Set the ports to read mode:
  for (int loop = 4; loop < 8; loop++) {
 8000f46:	2304      	movs	r3, #4
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	e007      	b.n	8000f5c <PB_LCD_IsBusy+0x1c>
    PB_LCD_Set_As_Input(loop, GPIOD, NOPULL);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	4928      	ldr	r1, [pc, #160]	; (8000ff0 <PB_LCD_IsBusy+0xb0>)
 8000f50:	68f8      	ldr	r0, [r7, #12]
 8000f52:	f7ff ff9b 	bl	8000e8c <PB_LCD_Set_As_Input>
  for (int loop = 4; loop < 8; loop++) {
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2b07      	cmp	r3, #7
 8000f60:	ddf4      	ble.n	8000f4c <PB_LCD_IsBusy+0xc>
  }
  PB_LCD_Microdelay(LCD_DELAY_CONST);   
 8000f62:	2032      	movs	r0, #50	; 0x32
 8000f64:	f7ff ffb8 	bl	8000ed8 <PB_LCD_Microdelay>
  GPIOB->BSRR = 1UL << 16;  // Set to instruction register
 8000f68:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <PB_LCD_IsBusy+0xb4>)
 8000f6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f6e:	619a      	str	r2, [r3, #24]
  GPIOB->BSRR = 1UL << 1;    // Set to read access
 8000f70:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <PB_LCD_IsBusy+0xb4>)
 8000f72:	2202      	movs	r2, #2
 8000f74:	619a      	str	r2, [r3, #24]
  PB_LCD_Microdelay(LCD_DELAY_CONST); GPIOB->BSRR = 1UL << 2;
 8000f76:	2032      	movs	r0, #50	; 0x32
 8000f78:	f7ff ffae 	bl	8000ed8 <PB_LCD_Microdelay>
 8000f7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <PB_LCD_IsBusy+0xb4>)
 8000f7e:	2204      	movs	r2, #4
 8000f80:	619a      	str	r2, [r3, #24]
  PB_LCD_Microdelay(LCD_DELAY_CONST); busy = GPIOD->IDR; 
 8000f82:	2032      	movs	r0, #50	; 0x32
 8000f84:	f7ff ffa8 	bl	8000ed8 <PB_LCD_Microdelay>
 8000f88:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <PB_LCD_IsBusy+0xb0>)
 8000f8a:	691b      	ldr	r3, [r3, #16]
 8000f8c:	71fb      	strb	r3, [r7, #7]
  PB_LCD_Microdelay(LCD_DELAY_CONST); GPIOB->BSRR = 1UL << 18;
 8000f8e:	2032      	movs	r0, #50	; 0x32
 8000f90:	f7ff ffa2 	bl	8000ed8 <PB_LCD_Microdelay>
 8000f94:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <PB_LCD_IsBusy+0xb4>)
 8000f96:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f9a:	619a      	str	r2, [r3, #24]
  PB_LCD_Microdelay(LCD_DELAY_CONST); GPIOB->BSRR = 1UL << 2;
 8000f9c:	2032      	movs	r0, #50	; 0x32
 8000f9e:	f7ff ff9b 	bl	8000ed8 <PB_LCD_Microdelay>
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <PB_LCD_IsBusy+0xb4>)
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	619a      	str	r2, [r3, #24]
  PB_LCD_Microdelay(LCD_DELAY_CONST); GPIOB->BSRR = 1UL << 18;
 8000fa8:	2032      	movs	r0, #50	; 0x32
 8000faa:	f7ff ff95 	bl	8000ed8 <PB_LCD_Microdelay>
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <PB_LCD_IsBusy+0xb4>)
 8000fb0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000fb4:	619a      	str	r2, [r3, #24]
  
  // Then set the ports back to write mode:
  for (int loop = 4; loop < 8; loop++) {
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	e006      	b.n	8000fca <PB_LCD_IsBusy+0x8a>
    PB_LCD_Set_As_Output(loop, GPIOD);
 8000fbc:	490c      	ldr	r1, [pc, #48]	; (8000ff0 <PB_LCD_IsBusy+0xb0>)
 8000fbe:	68b8      	ldr	r0, [r7, #8]
 8000fc0:	f7ff ff2a 	bl	8000e18 <PB_LCD_Set_As_Output>
  for (int loop = 4; loop < 8; loop++) {
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	2b07      	cmp	r3, #7
 8000fce:	ddf5      	ble.n	8000fbc <PB_LCD_IsBusy+0x7c>
  }
  GPIOB->BSRR = 1UL << 17;    // Set to write access
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <PB_LCD_IsBusy+0xb4>)
 8000fd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fd6:	619a      	str	r2, [r3, #24]
  PB_LCD_Microdelay(LCD_DELAY_CONST);
 8000fd8:	2032      	movs	r0, #50	; 0x32
 8000fda:	f7ff ff7d 	bl	8000ed8 <PB_LCD_Microdelay>

  return busy & 0x80;  
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000fe4:	b2db      	uxtb	r3, r3
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40020c00 	.word	0x40020c00
 8000ff4:	40020400 	.word	0x40020400

08000ff8 <PB_LCD_Write>:

void PB_LCD_Write (enum eLCD_OP op, uint8_t data) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	460a      	mov	r2, r1
 8001002:	71fb      	strb	r3, [r7, #7]
 8001004:	4613      	mov	r3, r2
 8001006:	71bb      	strb	r3, [r7, #6]
  // Writes a byte to the LCD.  This assumes four-bit mode, and that
  // the GPIO outputs are already configured for writing (set to outputs):
  if (op == WRITE_DATA) {
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	2b03      	cmp	r3, #3
 800100c:	d103      	bne.n	8001016 <PB_LCD_Write+0x1e>
    GPIOB->BSRR = 1UL << 0;
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <PB_LCD_Write+0x9c>)
 8001010:	2201      	movs	r2, #1
 8001012:	619a      	str	r2, [r3, #24]
 8001014:	e006      	b.n	8001024 <PB_LCD_Write+0x2c>
  }
  else if (op == WRITE_INSTRUCTION) {
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d136      	bne.n	800108a <PB_LCD_Write+0x92>
    GPIOB->BSRR = 1UL << 16;
 800101c:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <PB_LCD_Write+0x9c>)
 800101e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001022:	619a      	str	r2, [r3, #24]
  }
  else {
    return;
  }

  unsigned int toWrite_High = (GPIOD->ODR & 0xFFFFFF0F) | (data & 0xF0);
 8001024:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <PB_LCD_Write+0xa0>)
 8001026:	695b      	ldr	r3, [r3, #20]
 8001028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800102c:	79bb      	ldrb	r3, [r7, #6]
 800102e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001032:	4313      	orrs	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
  unsigned int toWrite_Low = (GPIOD->ODR & 0xFFFFFF0F) | ((data << 4) & 0xF0);
 8001036:	4b18      	ldr	r3, [pc, #96]	; (8001098 <PB_LCD_Write+0xa0>)
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800103e:	79bb      	ldrb	r3, [r7, #6]
 8001040:	011b      	lsls	r3, r3, #4
 8001042:	b2db      	uxtb	r3, r3
 8001044:	4313      	orrs	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
  GPIOD->ODR = toWrite_High;  
 8001048:	4a13      	ldr	r2, [pc, #76]	; (8001098 <PB_LCD_Write+0xa0>)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	6153      	str	r3, [r2, #20]
  PB_LCD_Microdelay(LCD_DELAY_CONST); GPIOB->BSRR = 1UL << 2;
 800104e:	2032      	movs	r0, #50	; 0x32
 8001050:	f7ff ff42 	bl	8000ed8 <PB_LCD_Microdelay>
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <PB_LCD_Write+0x9c>)
 8001056:	2204      	movs	r2, #4
 8001058:	619a      	str	r2, [r3, #24]
  PB_LCD_Microdelay(LCD_DELAY_CONST); GPIOB->BSRR = 1UL << 18;
 800105a:	2032      	movs	r0, #50	; 0x32
 800105c:	f7ff ff3c 	bl	8000ed8 <PB_LCD_Microdelay>
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <PB_LCD_Write+0x9c>)
 8001062:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001066:	619a      	str	r2, [r3, #24]
  GPIOD->ODR = toWrite_Low;
 8001068:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <PB_LCD_Write+0xa0>)
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	6153      	str	r3, [r2, #20]
  PB_LCD_Microdelay(LCD_DELAY_CONST); GPIOB->BSRR = 1UL << 2;
 800106e:	2032      	movs	r0, #50	; 0x32
 8001070:	f7ff ff32 	bl	8000ed8 <PB_LCD_Microdelay>
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <PB_LCD_Write+0x9c>)
 8001076:	2204      	movs	r2, #4
 8001078:	619a      	str	r2, [r3, #24]
  PB_LCD_Microdelay(LCD_DELAY_CONST); GPIOB->BSRR = 1UL << 18;
 800107a:	2032      	movs	r0, #50	; 0x32
 800107c:	f7ff ff2c 	bl	8000ed8 <PB_LCD_Microdelay>
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <PB_LCD_Write+0x9c>)
 8001082:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001086:	619a      	str	r2, [r3, #24]
 8001088:	e000      	b.n	800108c <PB_LCD_Write+0x94>
    return;
 800108a:	bf00      	nop
}
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40020400 	.word	0x40020400
 8001098:	40020c00 	.word	0x40020c00

0800109c <PB_LCD_Init>:
  
void PB_LCD_Init (void) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
  // The LCD uses GPIOs A, B and D, so all these clocks are required:
  RCC->AHB1ENR  |= RCC_AHB1ENR_GPIOAEN;
 80010a2:	4b45      	ldr	r3, [pc, #276]	; (80011b8 <PB_LCD_Init+0x11c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a44      	ldr	r2, [pc, #272]	; (80011b8 <PB_LCD_Init+0x11c>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
  RCC->AHB1ENR  |= RCC_AHB1ENR_GPIOBEN;
 80010ae:	4b42      	ldr	r3, [pc, #264]	; (80011b8 <PB_LCD_Init+0x11c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a41      	ldr	r2, [pc, #260]	; (80011b8 <PB_LCD_Init+0x11c>)
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
  RCC->AHB1ENR  |= RCC_AHB1ENR_GPIODEN;
 80010ba:	4b3f      	ldr	r3, [pc, #252]	; (80011b8 <PB_LCD_Init+0x11c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a3e      	ldr	r2, [pc, #248]	; (80011b8 <PB_LCD_Init+0x11c>)
 80010c0:	f043 0308 	orr.w	r3, r3, #8
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
  
  // The control lines are PA15 and PB0, PB1 and PB2, so these are outputs,
  // and the default state is a logic low on RS, RW and E.
  PB_LCD_Set_As_Output(15, GPIOA);
 80010c6:	493d      	ldr	r1, [pc, #244]	; (80011bc <PB_LCD_Init+0x120>)
 80010c8:	200f      	movs	r0, #15
 80010ca:	f7ff fea5 	bl	8000e18 <PB_LCD_Set_As_Output>
  PB_LCD_Set_As_Output(0, GPIOB);
 80010ce:	493c      	ldr	r1, [pc, #240]	; (80011c0 <PB_LCD_Init+0x124>)
 80010d0:	2000      	movs	r0, #0
 80010d2:	f7ff fea1 	bl	8000e18 <PB_LCD_Set_As_Output>
  PB_LCD_Set_As_Output(1, GPIOB);
 80010d6:	493a      	ldr	r1, [pc, #232]	; (80011c0 <PB_LCD_Init+0x124>)
 80010d8:	2001      	movs	r0, #1
 80010da:	f7ff fe9d 	bl	8000e18 <PB_LCD_Set_As_Output>
  PB_LCD_Set_As_Output(2, GPIOB);
 80010de:	4938      	ldr	r1, [pc, #224]	; (80011c0 <PB_LCD_Init+0x124>)
 80010e0:	2002      	movs	r0, #2
 80010e2:	f7ff fe99 	bl	8000e18 <PB_LCD_Set_As_Output>
  GPIOA->BSRR = 1UL << 15;    // Enable the buffers on the board
 80010e6:	4b35      	ldr	r3, [pc, #212]	; (80011bc <PB_LCD_Init+0x120>)
 80010e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010ec:	619a      	str	r2, [r3, #24]
  GPIOB->BSRR = 7UL << 16;    // Set other control lines to low
 80010ee:	4b34      	ldr	r3, [pc, #208]	; (80011c0 <PB_LCD_Init+0x124>)
 80010f0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80010f4:	619a      	str	r2, [r3, #24]
  
  // The four data lines on GPIOD(7:4) are set as outputs by default (using
  // the LCD in four-bit mode, so these are all that's required:
  for (int loop = 4; loop < 8; loop++) {
 80010f6:	2304      	movs	r3, #4
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	e006      	b.n	800110a <PB_LCD_Init+0x6e>
    PB_LCD_Set_As_Output(loop, GPIOD);
 80010fc:	4931      	ldr	r1, [pc, #196]	; (80011c4 <PB_LCD_Init+0x128>)
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff fe8a 	bl	8000e18 <PB_LCD_Set_As_Output>
  for (int loop = 4; loop < 8; loop++) {
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3301      	adds	r3, #1
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b07      	cmp	r3, #7
 800110e:	ddf5      	ble.n	80010fc <PB_LCD_Init+0x60>
  }
  
  while (PB_LCD_IsBusy());  // Wait until it's ready to talk to me
 8001110:	bf00      	nop
 8001112:	f7ff ff15 	bl	8000f40 <PB_LCD_IsBusy>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1fa      	bne.n	8001112 <PB_LCD_Init+0x76>
  // will be interpreted as the second half of a write instruction to set the DDRAM 
  // address to zero, which doesn't do any harm at this stage.  If, however, the chip 
  // really was in eight-bit mode (for example it's the first time it's been powered on), 
  // then this toggle of E will be treated as an instruction to clear the display (and 
  // that's fine).)
  GPIOD->ODR = (GPIOD->ODR & 0xFFFFFF00) + 0x01;
 800111c:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <PB_LCD_Init+0x128>)
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001124:	4a27      	ldr	r2, [pc, #156]	; (80011c4 <PB_LCD_Init+0x128>)
 8001126:	3301      	adds	r3, #1
 8001128:	6153      	str	r3, [r2, #20]
  PB_LCD_Microdelay(10000); GPIOB->BSRR = 1UL << 2;
 800112a:	f242 7010 	movw	r0, #10000	; 0x2710
 800112e:	f7ff fed3 	bl	8000ed8 <PB_LCD_Microdelay>
 8001132:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <PB_LCD_Init+0x124>)
 8001134:	2204      	movs	r2, #4
 8001136:	619a      	str	r2, [r3, #24]
  PB_LCD_Microdelay(10000); GPIOB->BSRR = 1UL << 18;
 8001138:	f242 7010 	movw	r0, #10000	; 0x2710
 800113c:	f7ff fecc 	bl	8000ed8 <PB_LCD_Microdelay>
 8001140:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <PB_LCD_Init+0x124>)
 8001142:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001146:	619a      	str	r2, [r3, #24]
  GPIOD->ODR = (GPIOD->ODR & 0xFFFFFF00) + 0x28;
 8001148:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <PB_LCD_Init+0x128>)
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001150:	4a1c      	ldr	r2, [pc, #112]	; (80011c4 <PB_LCD_Init+0x128>)
 8001152:	3328      	adds	r3, #40	; 0x28
 8001154:	6153      	str	r3, [r2, #20]
  PB_LCD_Microdelay(10000); GPIOB->BSRR = 1UL << 2;
 8001156:	f242 7010 	movw	r0, #10000	; 0x2710
 800115a:	f7ff febd 	bl	8000ed8 <PB_LCD_Microdelay>
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <PB_LCD_Init+0x124>)
 8001160:	2204      	movs	r2, #4
 8001162:	619a      	str	r2, [r3, #24]
  PB_LCD_Microdelay(10000); GPIOB->BSRR = 1UL << 18;
 8001164:	f242 7010 	movw	r0, #10000	; 0x2710
 8001168:	f7ff feb6 	bl	8000ed8 <PB_LCD_Microdelay>
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <PB_LCD_Init+0x124>)
 800116e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001172:	619a      	str	r2, [r3, #24]
  
  // Function Set: 4 bit mode, 1/16 duty, 5x8 font, 2 lines
  while (PB_LCD_IsBusy());
 8001174:	bf00      	nop
 8001176:	f7ff fee3 	bl	8000f40 <PB_LCD_IsBusy>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1fa      	bne.n	8001176 <PB_LCD_Init+0xda>
  PB_LCD_Write(WRITE_INSTRUCTION, 0x28);
 8001180:	2128      	movs	r1, #40	; 0x28
 8001182:	2001      	movs	r0, #1
 8001184:	f7ff ff38 	bl	8000ff8 <PB_LCD_Write>
  
  // Display ON/OFF Control: ON
  while (PB_LCD_IsBusy());
 8001188:	bf00      	nop
 800118a:	f7ff fed9 	bl	8000f40 <PB_LCD_IsBusy>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1fa      	bne.n	800118a <PB_LCD_Init+0xee>
  PB_LCD_Write(WRITE_INSTRUCTION, 0x0c);
 8001194:	210c      	movs	r1, #12
 8001196:	2001      	movs	r0, #1
 8001198:	f7ff ff2e 	bl	8000ff8 <PB_LCD_Write>
  
  // Entry Mode Set: Increment
  while (PB_LCD_IsBusy());
 800119c:	bf00      	nop
 800119e:	f7ff fecf 	bl	8000f40 <PB_LCD_IsBusy>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1fa      	bne.n	800119e <PB_LCD_Init+0x102>
  PB_LCD_Write(WRITE_INSTRUCTION, 0x06);
 80011a8:	2106      	movs	r1, #6
 80011aa:	2001      	movs	r0, #1
 80011ac:	f7ff ff24 	bl	8000ff8 <PB_LCD_Write>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40020000 	.word	0x40020000
 80011c0:	40020400 	.word	0x40020400
 80011c4:	40020c00 	.word	0x40020c00

080011c8 <PB_LCD_Clear>:
void PB_LCD_Clear (void) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  while (PB_LCD_IsBusy());
 80011cc:	bf00      	nop
 80011ce:	f7ff feb7 	bl	8000f40 <PB_LCD_IsBusy>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1fa      	bne.n	80011ce <PB_LCD_Clear+0x6>
  PB_LCD_Write(WRITE_INSTRUCTION, 0x01);
 80011d8:	2101      	movs	r1, #1
 80011da:	2001      	movs	r0, #1
 80011dc:	f7ff ff0c 	bl	8000ff8 <PB_LCD_Write>
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <PB_LCD_WriteString>:
void PB_LCD_WriteChar (char ch) {
  // Write a character to the data register on the LCD:
  while (PB_LCD_IsBusy());
  PB_LCD_Write(WRITE_DATA, ch);
}
void PB_LCD_WriteString (char *s, int maxLength) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  while(*s && maxLength-- > 0) {
 80011ee:	e00d      	b.n	800120c <PB_LCD_WriteString+0x28>
    while (PB_LCD_IsBusy()){}
 80011f0:	bf00      	nop
 80011f2:	f7ff fea5 	bl	8000f40 <PB_LCD_IsBusy>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1fa      	bne.n	80011f2 <PB_LCD_WriteString+0xe>
    PB_LCD_Write(WRITE_DATA, *s++);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	607a      	str	r2, [r7, #4]
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	2003      	movs	r0, #3
 8001208:	f7ff fef6 	bl	8000ff8 <PB_LCD_Write>
  while(*s && maxLength-- > 0) {
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d004      	beq.n	800121e <PB_LCD_WriteString+0x3a>
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	1e5a      	subs	r2, r3, #1
 8001218:	603a      	str	r2, [r7, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	dce8      	bgt.n	80011f0 <PB_LCD_WriteString+0xc>
  }
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <calcsin>:

uint32_t sine_val[SAMPLE];
uint32_t data1[SAMPLE];
//uint32_t data2[SAMPLE];

void calcsin() {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
	for (int i=0; i<SAMPLE; i++) {
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	e03a      	b.n	80012aa <calcsin+0x82>
		sine_val[i] = (sin(i*2*PI/SAMPLE)+1) *(4096/2);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f91f 	bl	800047c <__aeabi_i2d>
 800123e:	a324      	add	r3, pc, #144	; (adr r3, 80012d0 <calcsin+0xa8>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff f984 	bl	8000550 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <calcsin+0x98>)
 8001256:	f7ff faa5 	bl	80007a4 <__aeabi_ddiv>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	ec43 2b17 	vmov	d7, r2, r3
 8001262:	eeb0 0a47 	vmov.f32	s0, s14
 8001266:	eef0 0a67 	vmov.f32	s1, s15
 800126a:	f008 fed5 	bl	800a018 <sin>
 800126e:	ec51 0b10 	vmov	r0, r1, d0
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <calcsin+0x9c>)
 8001278:	f7fe ffb4 	bl	80001e4 <__adddf3>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <calcsin+0xa0>)
 800128a:	f7ff f961 	bl	8000550 <__aeabi_dmul>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	f7ff fc1d 	bl	8000ad4 <__aeabi_d2uiz>
 800129a:	4602      	mov	r2, r0
 800129c:	490b      	ldr	r1, [pc, #44]	; (80012cc <calcsin+0xa4>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0; i<SAMPLE; i++) {
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3301      	adds	r3, #1
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b63      	cmp	r3, #99	; 0x63
 80012ae:	ddc1      	ble.n	8001234 <calcsin+0xc>
	}
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	f3af 8000 	nop.w
 80012c0:	40590000 	.word	0x40590000
 80012c4:	3ff00000 	.word	0x3ff00000
 80012c8:	40a00000 	.word	0x40a00000
 80012cc:	20000264 	.word	0x20000264
 80012d0:	f01b866e 	.word	0xf01b866e
 80012d4:	400921f9 	.word	0x400921f9

080012d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012de:	f000 fd5b 	bl	8001d98 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e2:	f000 f855 	bl	8001390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e6:	f000 f9e9 	bl	80016bc <MX_GPIO_Init>
  MX_DMA_Init();
 80012ea:	f000 f9b1 	bl	8001650 <MX_DMA_Init>
  MX_I2C1_Init();
 80012ee:	f000 f935 	bl	800155c <MX_I2C1_Init>
  MX_USB_HOST_Init();
 80012f2:	f008 f9ed 	bl	80096d0 <MX_USB_HOST_Init>
  MX_DAC_Init();
 80012f6:	f000 f907 	bl	8001508 <MX_DAC_Init>
  MX_TIM2_Init();
 80012fa:	f000 f95d 	bl	80015b8 <MX_TIM2_Init>
  MX_ADC1_Init();
 80012fe:	f000 f8b1 	bl	8001464 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8001302:	481e      	ldr	r0, [pc, #120]	; (800137c <main+0xa4>)
 8001304:	f004 fddc 	bl	8005ec0 <HAL_TIM_Base_Start>
  calcsin();
 8001308:	f7ff ff8e 	bl	8001228 <calcsin>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, sine_val, SAMPLE, DAC_ALIGN_12B_R);
 800130c:	2300      	movs	r3, #0
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2364      	movs	r3, #100	; 0x64
 8001312:	4a1b      	ldr	r2, [pc, #108]	; (8001380 <main+0xa8>)
 8001314:	2100      	movs	r1, #0
 8001316:	481b      	ldr	r0, [pc, #108]	; (8001384 <main+0xac>)
 8001318:	f001 fc54 	bl	8002bc4 <HAL_DAC_Start_DMA>
  //NVIC_EnableIRQ(ADC_IRQn);

  //HAL_ADC_Start(&hadc1);
  HAL_ADC_Start_DMA(&hadc1, data1, SAMPLE);
 800131c:	2264      	movs	r2, #100	; 0x64
 800131e:	491a      	ldr	r1, [pc, #104]	; (8001388 <main+0xb0>)
 8001320:	481a      	ldr	r0, [pc, #104]	; (800138c <main+0xb4>)
 8001322:	f000 fee5 	bl	80020f0 <HAL_ADC_Start_DMA>

  PB_LCD_Init();
 8001326:	f7ff feb9 	bl	800109c <PB_LCD_Init>
  PB_LCD_Clear();
 800132a:	f7ff ff4d 	bl	80011c8 <PB_LCD_Clear>
  //PB_LCD_WriteString("msg", 34);


  HAL_Delay(100);
 800132e:	2064      	movs	r0, #100	; 0x64
 8001330:	f000 fda4 	bl	8001e7c <HAL_Delay>
  HAL_ADC_Stop_DMA(&hadc1);
 8001334:	4815      	ldr	r0, [pc, #84]	; (800138c <main+0xb4>)
 8001336:	f000 ffeb 	bl	8002310 <HAL_ADC_Stop_DMA>


  HAL_ADC_Start(&hadc1);
 800133a:	4814      	ldr	r0, [pc, #80]	; (800138c <main+0xb4>)
 800133c:	f000 fe06 	bl	8001f4c <HAL_ADC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001340:	f008 f9ec 	bl	800971c <MX_USB_HOST_Process>
    	itoa(raw, msg, 10);
    	PB_LCD_WriteString(msg, strlen(msg));
    	HAL_Delay(100);
    }*/

    raw = HAL_ADC_GetValue(&hadc1);
 8001344:	4811      	ldr	r0, [pc, #68]	; (800138c <main+0xb4>)
 8001346:	f001 f83d 	bl	80023c4 <HAL_ADC_GetValue>
 800134a:	4603      	mov	r3, r0
 800134c:	81fb      	strh	r3, [r7, #14]
    PB_LCD_Clear();
 800134e:	f7ff ff3b 	bl	80011c8 <PB_LCD_Clear>
    itoa(raw, msg, 10);
 8001352:	89fb      	ldrh	r3, [r7, #14]
 8001354:	1d39      	adds	r1, r7, #4
 8001356:	220a      	movs	r2, #10
 8001358:	4618      	mov	r0, r3
 800135a:	f008 fd03 	bl	8009d64 <itoa>
    PB_LCD_WriteString(msg, strlen(msg));
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	4618      	mov	r0, r3
 8001362:	f7fe ff31 	bl	80001c8 <strlen>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	4611      	mov	r1, r2
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff38 	bl	80011e4 <PB_LCD_WriteString>
    HAL_Delay(100);
 8001374:	2064      	movs	r0, #100	; 0x64
 8001376:	f000 fd81 	bl	8001e7c <HAL_Delay>
    MX_USB_HOST_Process();
 800137a:	e7e1      	b.n	8001340 <main+0x68>
 800137c:	2000021c 	.word	0x2000021c
 8001380:	20000264 	.word	0x20000264
 8001384:	20000154 	.word	0x20000154
 8001388:	200003f4 	.word	0x200003f4
 800138c:	200000ac 	.word	0x200000ac

08001390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b094      	sub	sp, #80	; 0x50
 8001394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001396:	f107 0320 	add.w	r3, r7, #32
 800139a:	2230      	movs	r2, #48	; 0x30
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f008 fcf2 	bl	8009d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b4:	2300      	movs	r3, #0
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	4b28      	ldr	r3, [pc, #160]	; (800145c <SystemClock_Config+0xcc>)
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	4a27      	ldr	r2, [pc, #156]	; (800145c <SystemClock_Config+0xcc>)
 80013be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c2:	6413      	str	r3, [r2, #64]	; 0x40
 80013c4:	4b25      	ldr	r3, [pc, #148]	; (800145c <SystemClock_Config+0xcc>)
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013d0:	2300      	movs	r3, #0
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	4b22      	ldr	r3, [pc, #136]	; (8001460 <SystemClock_Config+0xd0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a21      	ldr	r2, [pc, #132]	; (8001460 <SystemClock_Config+0xd0>)
 80013da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <SystemClock_Config+0xd0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ec:	2301      	movs	r3, #1
 80013ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f6:	2302      	movs	r3, #2
 80013f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001400:	2308      	movs	r3, #8
 8001402:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001404:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001408:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800140a:	2302      	movs	r3, #2
 800140c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800140e:	2307      	movs	r3, #7
 8001410:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001412:	f107 0320 	add.w	r3, r7, #32
 8001416:	4618      	mov	r0, r3
 8001418:	f004 f87e 	bl	8005518 <HAL_RCC_OscConfig>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001422:	f000 fa69 	bl	80018f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001426:	230f      	movs	r3, #15
 8001428:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800142a:	2302      	movs	r3, #2
 800142c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001432:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001436:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800143e:	f107 030c 	add.w	r3, r7, #12
 8001442:	2105      	movs	r1, #5
 8001444:	4618      	mov	r0, r3
 8001446:	f004 fadf 	bl	8005a08 <HAL_RCC_ClockConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001450:	f000 fa52 	bl	80018f8 <Error_Handler>
  }
}
 8001454:	bf00      	nop
 8001456:	3750      	adds	r7, #80	; 0x50
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40023800 	.word	0x40023800
 8001460:	40007000 	.word	0x40007000

08001464 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800146a:	463b      	mov	r3, r7
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001476:	4b21      	ldr	r3, [pc, #132]	; (80014fc <MX_ADC1_Init+0x98>)
 8001478:	4a21      	ldr	r2, [pc, #132]	; (8001500 <MX_ADC1_Init+0x9c>)
 800147a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800147c:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <MX_ADC1_Init+0x98>)
 800147e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001482:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001484:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <MX_ADC1_Init+0x98>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <MX_ADC1_Init+0x98>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001490:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <MX_ADC1_Init+0x98>)
 8001492:	2201      	movs	r2, #1
 8001494:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001496:	4b19      	ldr	r3, [pc, #100]	; (80014fc <MX_ADC1_Init+0x98>)
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800149e:	4b17      	ldr	r3, [pc, #92]	; (80014fc <MX_ADC1_Init+0x98>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014a4:	4b15      	ldr	r3, [pc, #84]	; (80014fc <MX_ADC1_Init+0x98>)
 80014a6:	4a17      	ldr	r2, [pc, #92]	; (8001504 <MX_ADC1_Init+0xa0>)
 80014a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014aa:	4b14      	ldr	r3, [pc, #80]	; (80014fc <MX_ADC1_Init+0x98>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <MX_ADC1_Init+0x98>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_ADC1_Init+0x98>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <MX_ADC1_Init+0x98>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014c4:	480d      	ldr	r0, [pc, #52]	; (80014fc <MX_ADC1_Init+0x98>)
 80014c6:	f000 fcfd 	bl	8001ec4 <HAL_ADC_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014d0:	f000 fa12 	bl	80018f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80014d4:	230e      	movs	r3, #14
 80014d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014d8:	2301      	movs	r3, #1
 80014da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014dc:	2300      	movs	r3, #0
 80014de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e0:	463b      	mov	r3, r7
 80014e2:	4619      	mov	r1, r3
 80014e4:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_ADC1_Init+0x98>)
 80014e6:	f000 ff99 	bl	800241c <HAL_ADC_ConfigChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014f0:	f000 fa02 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200000ac 	.word	0x200000ac
 8001500:	40012000 	.word	0x40012000
 8001504:	0f000001 	.word	0x0f000001

08001508 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800150e:	463b      	mov	r3, r7
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <MX_DAC_Init+0x4c>)
 8001518:	4a0f      	ldr	r2, [pc, #60]	; (8001558 <MX_DAC_Init+0x50>)
 800151a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800151c:	480d      	ldr	r0, [pc, #52]	; (8001554 <MX_DAC_Init+0x4c>)
 800151e:	f001 fb2e 	bl	8002b7e <HAL_DAC_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001528:	f000 f9e6 	bl	80018f8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800152c:	2324      	movs	r3, #36	; 0x24
 800152e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001534:	463b      	mov	r3, r7
 8001536:	2200      	movs	r2, #0
 8001538:	4619      	mov	r1, r3
 800153a:	4806      	ldr	r0, [pc, #24]	; (8001554 <MX_DAC_Init+0x4c>)
 800153c:	f001 fc2e 	bl	8002d9c <HAL_DAC_ConfigChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001546:	f000 f9d7 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000154 	.word	0x20000154
 8001558:	40007400 	.word	0x40007400

0800155c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <MX_I2C1_Init+0x50>)
 8001562:	4a13      	ldr	r2, [pc, #76]	; (80015b0 <MX_I2C1_Init+0x54>)
 8001564:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <MX_I2C1_Init+0x50>)
 8001568:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <MX_I2C1_Init+0x58>)
 800156a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <MX_I2C1_Init+0x50>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_I2C1_Init+0x50>)
 8001574:	2200      	movs	r2, #0
 8001576:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_I2C1_Init+0x50>)
 800157a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800157e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <MX_I2C1_Init+0x50>)
 8001582:	2200      	movs	r2, #0
 8001584:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_I2C1_Init+0x50>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800158c:	4b07      	ldr	r3, [pc, #28]	; (80015ac <MX_I2C1_Init+0x50>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_I2C1_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001598:	4804      	ldr	r0, [pc, #16]	; (80015ac <MX_I2C1_Init+0x50>)
 800159a:	f003 fe79 	bl	8005290 <HAL_I2C_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015a4:	f000 f9a8 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200001c8 	.word	0x200001c8
 80015b0:	40005400 	.word	0x40005400
 80015b4:	000186a0 	.word	0x000186a0

080015b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015cc:	463b      	mov	r3, r7
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015d4:	4b1d      	ldr	r3, [pc, #116]	; (800164c <MX_TIM2_Init+0x94>)
 80015d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <MX_TIM2_Init+0x94>)
 80015de:	2200      	movs	r2, #0
 80015e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e2:	4b1a      	ldr	r3, [pc, #104]	; (800164c <MX_TIM2_Init+0x94>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 80015e8:	4b18      	ldr	r3, [pc, #96]	; (800164c <MX_TIM2_Init+0x94>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ee:	4b17      	ldr	r3, [pc, #92]	; (800164c <MX_TIM2_Init+0x94>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f4:	4b15      	ldr	r3, [pc, #84]	; (800164c <MX_TIM2_Init+0x94>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015fa:	4814      	ldr	r0, [pc, #80]	; (800164c <MX_TIM2_Init+0x94>)
 80015fc:	f004 fc10 	bl	8005e20 <HAL_TIM_Base_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001606:	f000 f977 	bl	80018f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800160a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001610:	f107 0308 	add.w	r3, r7, #8
 8001614:	4619      	mov	r1, r3
 8001616:	480d      	ldr	r0, [pc, #52]	; (800164c <MX_TIM2_Init+0x94>)
 8001618:	f004 fdc2 	bl	80061a0 <HAL_TIM_ConfigClockSource>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001622:	f000 f969 	bl	80018f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001626:	2320      	movs	r3, #32
 8001628:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800162e:	463b      	mov	r3, r7
 8001630:	4619      	mov	r1, r3
 8001632:	4806      	ldr	r0, [pc, #24]	; (800164c <MX_TIM2_Init+0x94>)
 8001634:	f004 ffe8 	bl	8006608 <HAL_TIMEx_MasterConfigSynchronization>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800163e:	f000 f95b 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	2000021c 	.word	0x2000021c

08001650 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <MX_DMA_Init+0x68>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a16      	ldr	r2, [pc, #88]	; (80016b8 <MX_DMA_Init+0x68>)
 8001660:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <MX_DMA_Init+0x68>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	603b      	str	r3, [r7, #0]
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <MX_DMA_Init+0x68>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a0f      	ldr	r2, [pc, #60]	; (80016b8 <MX_DMA_Init+0x68>)
 800167c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <MX_DMA_Init+0x68>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	2010      	movs	r0, #16
 8001694:	f001 fa3d 	bl	8002b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001698:	2010      	movs	r0, #16
 800169a:	f001 fa56 	bl	8002b4a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	2038      	movs	r0, #56	; 0x38
 80016a4:	f001 fa35 	bl	8002b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016a8:	2038      	movs	r0, #56	; 0x38
 80016aa:	f001 fa4e 	bl	8002b4a <HAL_NVIC_EnableIRQ>

}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800

080016bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08c      	sub	sp, #48	; 0x30
 80016c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c2:	f107 031c 	add.w	r3, r7, #28
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
 80016d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
 80016d6:	4b82      	ldr	r3, [pc, #520]	; (80018e0 <MX_GPIO_Init+0x224>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a81      	ldr	r2, [pc, #516]	; (80018e0 <MX_GPIO_Init+0x224>)
 80016dc:	f043 0310 	orr.w	r3, r3, #16
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b7f      	ldr	r3, [pc, #508]	; (80018e0 <MX_GPIO_Init+0x224>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0310 	and.w	r3, r3, #16
 80016ea:	61bb      	str	r3, [r7, #24]
 80016ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	4b7b      	ldr	r3, [pc, #492]	; (80018e0 <MX_GPIO_Init+0x224>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a7a      	ldr	r2, [pc, #488]	; (80018e0 <MX_GPIO_Init+0x224>)
 80016f8:	f043 0304 	orr.w	r3, r3, #4
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b78      	ldr	r3, [pc, #480]	; (80018e0 <MX_GPIO_Init+0x224>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	4b74      	ldr	r3, [pc, #464]	; (80018e0 <MX_GPIO_Init+0x224>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a73      	ldr	r2, [pc, #460]	; (80018e0 <MX_GPIO_Init+0x224>)
 8001714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b71      	ldr	r3, [pc, #452]	; (80018e0 <MX_GPIO_Init+0x224>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	4b6d      	ldr	r3, [pc, #436]	; (80018e0 <MX_GPIO_Init+0x224>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a6c      	ldr	r2, [pc, #432]	; (80018e0 <MX_GPIO_Init+0x224>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b6a      	ldr	r3, [pc, #424]	; (80018e0 <MX_GPIO_Init+0x224>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	4b66      	ldr	r3, [pc, #408]	; (80018e0 <MX_GPIO_Init+0x224>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a65      	ldr	r2, [pc, #404]	; (80018e0 <MX_GPIO_Init+0x224>)
 800174c:	f043 0302 	orr.w	r3, r3, #2
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b63      	ldr	r3, [pc, #396]	; (80018e0 <MX_GPIO_Init+0x224>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	4b5f      	ldr	r3, [pc, #380]	; (80018e0 <MX_GPIO_Init+0x224>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a5e      	ldr	r2, [pc, #376]	; (80018e0 <MX_GPIO_Init+0x224>)
 8001768:	f043 0308 	orr.w	r3, r3, #8
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b5c      	ldr	r3, [pc, #368]	; (80018e0 <MX_GPIO_Init+0x224>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800177a:	2200      	movs	r2, #0
 800177c:	2108      	movs	r1, #8
 800177e:	4859      	ldr	r0, [pc, #356]	; (80018e4 <MX_GPIO_Init+0x228>)
 8001780:	f002 f962 	bl	8003a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001784:	2201      	movs	r2, #1
 8001786:	2101      	movs	r1, #1
 8001788:	4857      	ldr	r0, [pc, #348]	; (80018e8 <MX_GPIO_Init+0x22c>)
 800178a:	f002 f95d 	bl	8003a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800178e:	2200      	movs	r2, #0
 8001790:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001794:	4855      	ldr	r0, [pc, #340]	; (80018ec <MX_GPIO_Init+0x230>)
 8001796:	f002 f957 	bl	8003a48 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800179a:	2308      	movs	r3, #8
 800179c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179e:	2301      	movs	r3, #1
 80017a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80017aa:	f107 031c 	add.w	r3, r7, #28
 80017ae:	4619      	mov	r1, r3
 80017b0:	484c      	ldr	r0, [pc, #304]	; (80018e4 <MX_GPIO_Init+0x228>)
 80017b2:	f001 ffad 	bl	8003710 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80017b6:	2301      	movs	r3, #1
 80017b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ba:	2301      	movs	r3, #1
 80017bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80017c6:	f107 031c 	add.w	r3, r7, #28
 80017ca:	4619      	mov	r1, r3
 80017cc:	4846      	ldr	r0, [pc, #280]	; (80018e8 <MX_GPIO_Init+0x22c>)
 80017ce:	f001 ff9f 	bl	8003710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80017d2:	2308      	movs	r3, #8
 80017d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017e2:	2305      	movs	r3, #5
 80017e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80017e6:	f107 031c 	add.w	r3, r7, #28
 80017ea:	4619      	mov	r1, r3
 80017ec:	483e      	ldr	r0, [pc, #248]	; (80018e8 <MX_GPIO_Init+0x22c>)
 80017ee:	f001 ff8f 	bl	8003710 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017f2:	2301      	movs	r3, #1
 80017f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017f6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80017fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001800:	f107 031c 	add.w	r3, r7, #28
 8001804:	4619      	mov	r1, r3
 8001806:	483a      	ldr	r0, [pc, #232]	; (80018f0 <MX_GPIO_Init+0x234>)
 8001808:	f001 ff82 	bl	8003710 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800180c:	23c0      	movs	r3, #192	; 0xc0
 800180e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2300      	movs	r3, #0
 800181a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800181c:	2305      	movs	r3, #5
 800181e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001820:	f107 031c 	add.w	r3, r7, #28
 8001824:	4619      	mov	r1, r3
 8001826:	4832      	ldr	r0, [pc, #200]	; (80018f0 <MX_GPIO_Init+0x234>)
 8001828:	f001 ff72 	bl	8003710 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800182c:	2304      	movs	r3, #4
 800182e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001838:	f107 031c 	add.w	r3, r7, #28
 800183c:	4619      	mov	r1, r3
 800183e:	482d      	ldr	r0, [pc, #180]	; (80018f4 <MX_GPIO_Init+0x238>)
 8001840:	f001 ff66 	bl	8003710 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001856:	2305      	movs	r3, #5
 8001858:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800185a:	f107 031c 	add.w	r3, r7, #28
 800185e:	4619      	mov	r1, r3
 8001860:	4824      	ldr	r0, [pc, #144]	; (80018f4 <MX_GPIO_Init+0x238>)
 8001862:	f001 ff55 	bl	8003710 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001866:	f24f 0310 	movw	r3, #61456	; 0xf010
 800186a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186c:	2301      	movs	r3, #1
 800186e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001878:	f107 031c 	add.w	r3, r7, #28
 800187c:	4619      	mov	r1, r3
 800187e:	481b      	ldr	r0, [pc, #108]	; (80018ec <MX_GPIO_Init+0x230>)
 8001880:	f001 ff46 	bl	8003710 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001884:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188a:	2302      	movs	r3, #2
 800188c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001892:	2300      	movs	r3, #0
 8001894:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001896:	2306      	movs	r3, #6
 8001898:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189a:	f107 031c 	add.w	r3, r7, #28
 800189e:	4619      	mov	r1, r3
 80018a0:	4811      	ldr	r0, [pc, #68]	; (80018e8 <MX_GPIO_Init+0x22c>)
 80018a2:	f001 ff35 	bl	8003710 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80018a6:	2320      	movs	r3, #32
 80018a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018b2:	f107 031c 	add.w	r3, r7, #28
 80018b6:	4619      	mov	r1, r3
 80018b8:	480c      	ldr	r0, [pc, #48]	; (80018ec <MX_GPIO_Init+0x230>)
 80018ba:	f001 ff29 	bl	8003710 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80018be:	2302      	movs	r3, #2
 80018c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018c2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80018c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	4619      	mov	r1, r3
 80018d2:	4804      	ldr	r0, [pc, #16]	; (80018e4 <MX_GPIO_Init+0x228>)
 80018d4:	f001 ff1c 	bl	8003710 <HAL_GPIO_Init>

}
 80018d8:	bf00      	nop
 80018da:	3730      	adds	r7, #48	; 0x30
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40020800 	.word	0x40020800
 80018ec:	40020c00 	.word	0x40020c00
 80018f0:	40020000 	.word	0x40020000
 80018f4:	40020400 	.word	0x40020400

080018f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018fc:	b672      	cpsid	i
}
 80018fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001900:	e7fe      	b.n	8001900 <Error_Handler+0x8>
	...

08001904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <HAL_MspInit+0x4c>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	4a0f      	ldr	r2, [pc, #60]	; (8001950 <HAL_MspInit+0x4c>)
 8001914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001918:	6453      	str	r3, [r2, #68]	; 0x44
 800191a:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <HAL_MspInit+0x4c>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	603b      	str	r3, [r7, #0]
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <HAL_MspInit+0x4c>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	4a08      	ldr	r2, [pc, #32]	; (8001950 <HAL_MspInit+0x4c>)
 8001930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001934:	6413      	str	r3, [r2, #64]	; 0x40
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_MspInit+0x4c>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001942:	2007      	movs	r0, #7
 8001944:	f001 f8da 	bl	8002afc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40023800 	.word	0x40023800

08001954 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	; 0x28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a2f      	ldr	r2, [pc, #188]	; (8001a30 <HAL_ADC_MspInit+0xdc>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d157      	bne.n	8001a26 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	4b2e      	ldr	r3, [pc, #184]	; (8001a34 <HAL_ADC_MspInit+0xe0>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	4a2d      	ldr	r2, [pc, #180]	; (8001a34 <HAL_ADC_MspInit+0xe0>)
 8001980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001984:	6453      	str	r3, [r2, #68]	; 0x44
 8001986:	4b2b      	ldr	r3, [pc, #172]	; (8001a34 <HAL_ADC_MspInit+0xe0>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b27      	ldr	r3, [pc, #156]	; (8001a34 <HAL_ADC_MspInit+0xe0>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a26      	ldr	r2, [pc, #152]	; (8001a34 <HAL_ADC_MspInit+0xe0>)
 800199c:	f043 0304 	orr.w	r3, r3, #4
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b24      	ldr	r3, [pc, #144]	; (8001a34 <HAL_ADC_MspInit+0xe0>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019ae:	2310      	movs	r3, #16
 80019b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019b2:	2303      	movs	r3, #3
 80019b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ba:	f107 0314 	add.w	r3, r7, #20
 80019be:	4619      	mov	r1, r3
 80019c0:	481d      	ldr	r0, [pc, #116]	; (8001a38 <HAL_ADC_MspInit+0xe4>)
 80019c2:	f001 fea5 	bl	8003710 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80019c6:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <HAL_ADC_MspInit+0xe8>)
 80019c8:	4a1d      	ldr	r2, [pc, #116]	; (8001a40 <HAL_ADC_MspInit+0xec>)
 80019ca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80019cc:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <HAL_ADC_MspInit+0xe8>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019d2:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <HAL_ADC_MspInit+0xe8>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d8:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <HAL_ADC_MspInit+0xe8>)
 80019da:	2200      	movs	r2, #0
 80019dc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019de:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <HAL_ADC_MspInit+0xe8>)
 80019e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019e4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019e6:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <HAL_ADC_MspInit+0xe8>)
 80019e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019ec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019ee:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <HAL_ADC_MspInit+0xe8>)
 80019f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <HAL_ADC_MspInit+0xe8>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <HAL_ADC_MspInit+0xe8>)
 80019fe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a02:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a04:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <HAL_ADC_MspInit+0xe8>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a0a:	480c      	ldr	r0, [pc, #48]	; (8001a3c <HAL_ADC_MspInit+0xe8>)
 8001a0c:	f001 faa0 	bl	8002f50 <HAL_DMA_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001a16:	f7ff ff6f 	bl	80018f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a07      	ldr	r2, [pc, #28]	; (8001a3c <HAL_ADC_MspInit+0xe8>)
 8001a1e:	639a      	str	r2, [r3, #56]	; 0x38
 8001a20:	4a06      	ldr	r2, [pc, #24]	; (8001a3c <HAL_ADC_MspInit+0xe8>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a26:	bf00      	nop
 8001a28:	3728      	adds	r7, #40	; 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40012000 	.word	0x40012000
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40020800 	.word	0x40020800
 8001a3c:	200000f4 	.word	0x200000f4
 8001a40:	40026410 	.word	0x40026410

08001a44 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08a      	sub	sp, #40	; 0x28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a2f      	ldr	r2, [pc, #188]	; (8001b20 <HAL_DAC_MspInit+0xdc>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d158      	bne.n	8001b18 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	4b2e      	ldr	r3, [pc, #184]	; (8001b24 <HAL_DAC_MspInit+0xe0>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	4a2d      	ldr	r2, [pc, #180]	; (8001b24 <HAL_DAC_MspInit+0xe0>)
 8001a70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a74:	6413      	str	r3, [r2, #64]	; 0x40
 8001a76:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <HAL_DAC_MspInit+0xe0>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	4b27      	ldr	r3, [pc, #156]	; (8001b24 <HAL_DAC_MspInit+0xe0>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a26      	ldr	r2, [pc, #152]	; (8001b24 <HAL_DAC_MspInit+0xe0>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <HAL_DAC_MspInit+0xe0>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a9e:	2310      	movs	r3, #16
 8001aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	4619      	mov	r1, r3
 8001ab0:	481d      	ldr	r0, [pc, #116]	; (8001b28 <HAL_DAC_MspInit+0xe4>)
 8001ab2:	f001 fe2d 	bl	8003710 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001ab6:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <HAL_DAC_MspInit+0xe8>)
 8001ab8:	4a1d      	ldr	r2, [pc, #116]	; (8001b30 <HAL_DAC_MspInit+0xec>)
 8001aba:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001abc:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <HAL_DAC_MspInit+0xe8>)
 8001abe:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001ac2:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ac4:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <HAL_DAC_MspInit+0xe8>)
 8001ac6:	2240      	movs	r2, #64	; 0x40
 8001ac8:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aca:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <HAL_DAC_MspInit+0xe8>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001ad0:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <HAL_DAC_MspInit+0xe8>)
 8001ad2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ad6:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ad8:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <HAL_DAC_MspInit+0xe8>)
 8001ada:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ade:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ae0:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_DAC_MspInit+0xe8>)
 8001ae2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ae6:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001ae8:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <HAL_DAC_MspInit+0xe8>)
 8001aea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aee:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001af0:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <HAL_DAC_MspInit+0xe8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001af6:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <HAL_DAC_MspInit+0xe8>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001afc:	480b      	ldr	r0, [pc, #44]	; (8001b2c <HAL_DAC_MspInit+0xe8>)
 8001afe:	f001 fa27 	bl	8002f50 <HAL_DMA_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8001b08:	f7ff fef6 	bl	80018f8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a07      	ldr	r2, [pc, #28]	; (8001b2c <HAL_DAC_MspInit+0xe8>)
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	4a06      	ldr	r2, [pc, #24]	; (8001b2c <HAL_DAC_MspInit+0xe8>)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001b18:	bf00      	nop
 8001b1a:	3728      	adds	r7, #40	; 0x28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40007400 	.word	0x40007400
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40020000 	.word	0x40020000
 8001b2c:	20000168 	.word	0x20000168
 8001b30:	40026088 	.word	0x40026088

08001b34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	; 0x28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a19      	ldr	r2, [pc, #100]	; (8001bb8 <HAL_I2C_MspInit+0x84>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d12c      	bne.n	8001bb0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <HAL_I2C_MspInit+0x88>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a17      	ldr	r2, [pc, #92]	; (8001bbc <HAL_I2C_MspInit+0x88>)
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <HAL_I2C_MspInit+0x88>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001b72:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b78:	2312      	movs	r3, #18
 8001b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b80:	2300      	movs	r3, #0
 8001b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b84:	2304      	movs	r3, #4
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	480c      	ldr	r0, [pc, #48]	; (8001bc0 <HAL_I2C_MspInit+0x8c>)
 8001b90:	f001 fdbe 	bl	8003710 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b94:	2300      	movs	r3, #0
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <HAL_I2C_MspInit+0x88>)
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	4a07      	ldr	r2, [pc, #28]	; (8001bbc <HAL_I2C_MspInit+0x88>)
 8001b9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ba2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <HAL_I2C_MspInit+0x88>)
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bb0:	bf00      	nop
 8001bb2:	3728      	adds	r7, #40	; 0x28
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40005400 	.word	0x40005400
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40020400 	.word	0x40020400

08001bc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd4:	d115      	bne.n	8001c02 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <HAL_TIM_Base_MspInit+0x48>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	4a0b      	ldr	r2, [pc, #44]	; (8001c0c <HAL_TIM_Base_MspInit+0x48>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6413      	str	r3, [r2, #64]	; 0x40
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <HAL_TIM_Base_MspInit+0x48>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	201c      	movs	r0, #28
 8001bf8:	f000 ff8b 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bfc:	201c      	movs	r0, #28
 8001bfe:	f000 ffa4 	bl	8002b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40023800 	.word	0x40023800

08001c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <NMI_Handler+0x4>

08001c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c1a:	e7fe      	b.n	8001c1a <HardFault_Handler+0x4>

08001c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c20:	e7fe      	b.n	8001c20 <MemManage_Handler+0x4>

08001c22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c26:	e7fe      	b.n	8001c26 <BusFault_Handler+0x4>

08001c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c2c:	e7fe      	b.n	8001c2c <UsageFault_Handler+0x4>

08001c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c5c:	f000 f8ee 	bl	8001e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001c68:	4802      	ldr	r0, [pc, #8]	; (8001c74 <DMA1_Stream5_IRQHandler+0x10>)
 8001c6a:	f001 fae7 	bl	800323c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000168 	.word	0x20000168

08001c78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c7c:	4802      	ldr	r0, [pc, #8]	; (8001c88 <TIM2_IRQHandler+0x10>)
 8001c7e:	f004 f987 	bl	8005f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	2000021c 	.word	0x2000021c

08001c8c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c90:	4802      	ldr	r0, [pc, #8]	; (8001c9c <DMA2_Stream0_IRQHandler+0x10>)
 8001c92:	f001 fad3 	bl	800323c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	200000f4 	.word	0x200000f4

08001ca0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001ca4:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <OTG_FS_IRQHandler+0x10>)
 8001ca6:	f002 f953 	bl	8003f50 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000968 	.word	0x20000968

08001cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cbc:	4a14      	ldr	r2, [pc, #80]	; (8001d10 <_sbrk+0x5c>)
 8001cbe:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <_sbrk+0x60>)
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cc8:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <_sbrk+0x64>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d102      	bne.n	8001cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cd0:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <_sbrk+0x64>)
 8001cd2:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <_sbrk+0x68>)
 8001cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <_sbrk+0x64>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d207      	bcs.n	8001cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ce4:	f007 fffc 	bl	8009ce0 <__errno>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	220c      	movs	r2, #12
 8001cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cee:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf2:	e009      	b.n	8001d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <_sbrk+0x64>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cfa:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <_sbrk+0x64>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4413      	add	r3, r2
 8001d02:	4a05      	ldr	r2, [pc, #20]	; (8001d18 <_sbrk+0x64>)
 8001d04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d06:	68fb      	ldr	r3, [r7, #12]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20020000 	.word	0x20020000
 8001d14:	00000400 	.word	0x00000400
 8001d18:	20000584 	.word	0x20000584
 8001d1c:	20000c80 	.word	0x20000c80

08001d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <SystemInit+0x20>)
 8001d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2a:	4a05      	ldr	r2, [pc, #20]	; (8001d40 <SystemInit+0x20>)
 8001d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d48:	480d      	ldr	r0, [pc, #52]	; (8001d80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d4a:	490e      	ldr	r1, [pc, #56]	; (8001d84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d4c:	4a0e      	ldr	r2, [pc, #56]	; (8001d88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d50:	e002      	b.n	8001d58 <LoopCopyDataInit>

08001d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d56:	3304      	adds	r3, #4

08001d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d5c:	d3f9      	bcc.n	8001d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5e:	4a0b      	ldr	r2, [pc, #44]	; (8001d8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d60:	4c0b      	ldr	r4, [pc, #44]	; (8001d90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d64:	e001      	b.n	8001d6a <LoopFillZerobss>

08001d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d68:	3204      	adds	r2, #4

08001d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d6c:	d3fb      	bcc.n	8001d66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d6e:	f7ff ffd7 	bl	8001d20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d72:	f007 ffbb 	bl	8009cec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d76:	f7ff faaf 	bl	80012d8 <main>
  bx  lr    
 8001d7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d84:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001d88:	0800b300 	.word	0x0800b300
  ldr r2, =_sbss
 8001d8c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001d90:	20000c7c 	.word	0x20000c7c

08001d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d94:	e7fe      	b.n	8001d94 <ADC_IRQHandler>
	...

08001d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <HAL_Init+0x40>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a0d      	ldr	r2, [pc, #52]	; (8001dd8 <HAL_Init+0x40>)
 8001da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_Init+0x40>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <HAL_Init+0x40>)
 8001dae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <HAL_Init+0x40>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a07      	ldr	r2, [pc, #28]	; (8001dd8 <HAL_Init+0x40>)
 8001dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc0:	2003      	movs	r0, #3
 8001dc2:	f000 fe9b 	bl	8002afc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f000 f808 	bl	8001ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dcc:	f7ff fd9a 	bl	8001904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40023c00 	.word	0x40023c00

08001ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_InitTick+0x54>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <HAL_InitTick+0x58>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	4619      	mov	r1, r3
 8001dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 feb3 	bl	8002b66 <HAL_SYSTICK_Config>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e00e      	b.n	8001e28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b0f      	cmp	r3, #15
 8001e0e:	d80a      	bhi.n	8001e26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e10:	2200      	movs	r2, #0
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295
 8001e18:	f000 fe7b 	bl	8002b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e1c:	4a06      	ldr	r2, [pc, #24]	; (8001e38 <HAL_InitTick+0x5c>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
 8001e24:	e000      	b.n	8001e28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000000 	.word	0x20000000
 8001e34:	20000008 	.word	0x20000008
 8001e38:	20000004 	.word	0x20000004

08001e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_IncTick+0x20>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_IncTick+0x24>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <HAL_IncTick+0x24>)
 8001e4e:	6013      	str	r3, [r2, #0]
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	20000008 	.word	0x20000008
 8001e60:	20000588 	.word	0x20000588

08001e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return uwTick;
 8001e68:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <HAL_GetTick+0x14>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	20000588 	.word	0x20000588

08001e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e84:	f7ff ffee 	bl	8001e64 <HAL_GetTick>
 8001e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e94:	d005      	beq.n	8001ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <HAL_Delay+0x44>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ea2:	bf00      	nop
 8001ea4:	f7ff ffde 	bl	8001e64 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d8f7      	bhi.n	8001ea4 <HAL_Delay+0x28>
  {
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000008 	.word	0x20000008

08001ec4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e033      	b.n	8001f42 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d109      	bne.n	8001ef6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff fd36 	bl	8001954 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	f003 0310 	and.w	r3, r3, #16
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d118      	bne.n	8001f34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f0a:	f023 0302 	bic.w	r3, r3, #2
 8001f0e:	f043 0202 	orr.w	r2, r3, #2
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 fba2 	bl	8002660 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f023 0303 	bic.w	r3, r3, #3
 8001f2a:	f043 0201 	orr.w	r2, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	641a      	str	r2, [r3, #64]	; 0x40
 8001f32:	e001      	b.n	8001f38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <HAL_ADC_Start+0x1a>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e0b2      	b.n	80020cc <HAL_ADC_Start+0x180>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d018      	beq.n	8001fae <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0201 	orr.w	r2, r2, #1
 8001f8a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f8c:	4b52      	ldr	r3, [pc, #328]	; (80020d8 <HAL_ADC_Start+0x18c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a52      	ldr	r2, [pc, #328]	; (80020dc <HAL_ADC_Start+0x190>)
 8001f92:	fba2 2303 	umull	r2, r3, r2, r3
 8001f96:	0c9a      	lsrs	r2, r3, #18
 8001f98:	4613      	mov	r3, r2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	4413      	add	r3, r2
 8001f9e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001fa0:	e002      	b.n	8001fa8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f9      	bne.n	8001fa2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d17a      	bne.n	80020b2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001fc4:	f023 0301 	bic.w	r3, r3, #1
 8001fc8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d007      	beq.n	8001fee <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fe6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ffa:	d106      	bne.n	800200a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002000:	f023 0206 	bic.w	r2, r3, #6
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	645a      	str	r2, [r3, #68]	; 0x44
 8002008:	e002      	b.n	8002010 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002018:	4b31      	ldr	r3, [pc, #196]	; (80020e0 <HAL_ADC_Start+0x194>)
 800201a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002024:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 031f 	and.w	r3, r3, #31
 800202e:	2b00      	cmp	r3, #0
 8002030:	d12a      	bne.n	8002088 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a2b      	ldr	r2, [pc, #172]	; (80020e4 <HAL_ADC_Start+0x198>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d015      	beq.n	8002068 <HAL_ADC_Start+0x11c>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a29      	ldr	r2, [pc, #164]	; (80020e8 <HAL_ADC_Start+0x19c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d105      	bne.n	8002052 <HAL_ADC_Start+0x106>
 8002046:	4b26      	ldr	r3, [pc, #152]	; (80020e0 <HAL_ADC_Start+0x194>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 031f 	and.w	r3, r3, #31
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00a      	beq.n	8002068 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a25      	ldr	r2, [pc, #148]	; (80020ec <HAL_ADC_Start+0x1a0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d136      	bne.n	80020ca <HAL_ADC_Start+0x17e>
 800205c:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <HAL_ADC_Start+0x194>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 0310 	and.w	r3, r3, #16
 8002064:	2b00      	cmp	r3, #0
 8002066:	d130      	bne.n	80020ca <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d129      	bne.n	80020ca <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002084:	609a      	str	r2, [r3, #8]
 8002086:	e020      	b.n	80020ca <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a15      	ldr	r2, [pc, #84]	; (80020e4 <HAL_ADC_Start+0x198>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d11b      	bne.n	80020ca <HAL_ADC_Start+0x17e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d114      	bne.n	80020ca <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	e00b      	b.n	80020ca <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f043 0210 	orr.w	r2, r3, #16
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	f043 0201 	orr.w	r2, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	20000000 	.word	0x20000000
 80020dc:	431bde83 	.word	0x431bde83
 80020e0:	40012300 	.word	0x40012300
 80020e4:	40012000 	.word	0x40012000
 80020e8:	40012100 	.word	0x40012100
 80020ec:	40012200 	.word	0x40012200

080020f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_ADC_Start_DMA+0x1e>
 800210a:	2302      	movs	r3, #2
 800210c:	e0e9      	b.n	80022e2 <HAL_ADC_Start_DMA+0x1f2>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b01      	cmp	r3, #1
 8002122:	d018      	beq.n	8002156 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0201 	orr.w	r2, r2, #1
 8002132:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002134:	4b6d      	ldr	r3, [pc, #436]	; (80022ec <HAL_ADC_Start_DMA+0x1fc>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a6d      	ldr	r2, [pc, #436]	; (80022f0 <HAL_ADC_Start_DMA+0x200>)
 800213a:	fba2 2303 	umull	r2, r3, r2, r3
 800213e:	0c9a      	lsrs	r2, r3, #18
 8002140:	4613      	mov	r3, r2
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	4413      	add	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002148:	e002      	b.n	8002150 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	3b01      	subs	r3, #1
 800214e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f9      	bne.n	800214a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002164:	d107      	bne.n	8002176 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002174:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b01      	cmp	r3, #1
 8002182:	f040 80a1 	bne.w	80022c8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800218e:	f023 0301 	bic.w	r3, r3, #1
 8002192:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d007      	beq.n	80021b8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021c4:	d106      	bne.n	80021d4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	f023 0206 	bic.w	r2, r3, #6
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	645a      	str	r2, [r3, #68]	; 0x44
 80021d2:	e002      	b.n	80021da <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021e2:	4b44      	ldr	r3, [pc, #272]	; (80022f4 <HAL_ADC_Start_DMA+0x204>)
 80021e4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ea:	4a43      	ldr	r2, [pc, #268]	; (80022f8 <HAL_ADC_Start_DMA+0x208>)
 80021ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f2:	4a42      	ldr	r2, [pc, #264]	; (80022fc <HAL_ADC_Start_DMA+0x20c>)
 80021f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fa:	4a41      	ldr	r2, [pc, #260]	; (8002300 <HAL_ADC_Start_DMA+0x210>)
 80021fc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002206:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002216:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002226:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	334c      	adds	r3, #76	; 0x4c
 8002232:	4619      	mov	r1, r3
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f000 ff38 	bl	80030ac <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 031f 	and.w	r3, r3, #31
 8002244:	2b00      	cmp	r3, #0
 8002246:	d12a      	bne.n	800229e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a2d      	ldr	r2, [pc, #180]	; (8002304 <HAL_ADC_Start_DMA+0x214>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d015      	beq.n	800227e <HAL_ADC_Start_DMA+0x18e>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a2c      	ldr	r2, [pc, #176]	; (8002308 <HAL_ADC_Start_DMA+0x218>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d105      	bne.n	8002268 <HAL_ADC_Start_DMA+0x178>
 800225c:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <HAL_ADC_Start_DMA+0x204>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 031f 	and.w	r3, r3, #31
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00a      	beq.n	800227e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a27      	ldr	r2, [pc, #156]	; (800230c <HAL_ADC_Start_DMA+0x21c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d136      	bne.n	80022e0 <HAL_ADC_Start_DMA+0x1f0>
 8002272:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <HAL_ADC_Start_DMA+0x204>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 0310 	and.w	r3, r3, #16
 800227a:	2b00      	cmp	r3, #0
 800227c:	d130      	bne.n	80022e0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d129      	bne.n	80022e0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	e020      	b.n	80022e0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a18      	ldr	r2, [pc, #96]	; (8002304 <HAL_ADC_Start_DMA+0x214>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d11b      	bne.n	80022e0 <HAL_ADC_Start_DMA+0x1f0>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d114      	bne.n	80022e0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	e00b      	b.n	80022e0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	f043 0210 	orr.w	r2, r3, #16
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d8:	f043 0201 	orr.w	r2, r3, #1
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000000 	.word	0x20000000
 80022f0:	431bde83 	.word	0x431bde83
 80022f4:	40012300 	.word	0x40012300
 80022f8:	08002859 	.word	0x08002859
 80022fc:	08002913 	.word	0x08002913
 8002300:	0800292f 	.word	0x0800292f
 8002304:	40012000 	.word	0x40012000
 8002308:	40012100 	.word	0x40012100
 800230c:	40012200 	.word	0x40012200

08002310 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002318:	2300      	movs	r3, #0
 800231a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_ADC_Stop_DMA+0x1a>
 8002326:	2302      	movs	r3, #2
 8002328:	e048      	b.n	80023bc <HAL_ADC_Stop_DMA+0xac>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0201 	bic.w	r2, r2, #1
 8002340:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d130      	bne.n	80023b2 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800235e:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002364:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d10f      	bne.n	800238e <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002372:	4618      	mov	r0, r3
 8002374:	f000 fef2 	bl	800315c <HAL_DMA_Abort>
 8002378:	4603      	mov	r3, r0
 800237a:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800237c:	7bfb      	ldrb	r3, [r7, #15]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d005      	beq.n	800238e <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800239c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023a6:	f023 0301 	bic.w	r3, r3, #1
 80023aa:	f043 0201 	orr.w	r2, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x1c>
 8002434:	2302      	movs	r3, #2
 8002436:	e105      	b.n	8002644 <HAL_ADC_ConfigChannel+0x228>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b09      	cmp	r3, #9
 8002446:	d925      	bls.n	8002494 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68d9      	ldr	r1, [r3, #12]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	b29b      	uxth	r3, r3
 8002454:	461a      	mov	r2, r3
 8002456:	4613      	mov	r3, r2
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	4413      	add	r3, r2
 800245c:	3b1e      	subs	r3, #30
 800245e:	2207      	movs	r2, #7
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43da      	mvns	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	400a      	ands	r2, r1
 800246c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68d9      	ldr	r1, [r3, #12]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	b29b      	uxth	r3, r3
 800247e:	4618      	mov	r0, r3
 8002480:	4603      	mov	r3, r0
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4403      	add	r3, r0
 8002486:	3b1e      	subs	r3, #30
 8002488:	409a      	lsls	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	e022      	b.n	80024da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6919      	ldr	r1, [r3, #16]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	461a      	mov	r2, r3
 80024a2:	4613      	mov	r3, r2
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	4413      	add	r3, r2
 80024a8:	2207      	movs	r2, #7
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43da      	mvns	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	400a      	ands	r2, r1
 80024b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6919      	ldr	r1, [r3, #16]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	4618      	mov	r0, r3
 80024ca:	4603      	mov	r3, r0
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4403      	add	r3, r0
 80024d0:	409a      	lsls	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b06      	cmp	r3, #6
 80024e0:	d824      	bhi.n	800252c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	3b05      	subs	r3, #5
 80024f4:	221f      	movs	r2, #31
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43da      	mvns	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	400a      	ands	r2, r1
 8002502:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	b29b      	uxth	r3, r3
 8002510:	4618      	mov	r0, r3
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	3b05      	subs	r3, #5
 800251e:	fa00 f203 	lsl.w	r2, r0, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	635a      	str	r2, [r3, #52]	; 0x34
 800252a:	e04c      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b0c      	cmp	r3, #12
 8002532:	d824      	bhi.n	800257e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	3b23      	subs	r3, #35	; 0x23
 8002546:	221f      	movs	r2, #31
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43da      	mvns	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	400a      	ands	r2, r1
 8002554:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	b29b      	uxth	r3, r3
 8002562:	4618      	mov	r0, r3
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	3b23      	subs	r3, #35	; 0x23
 8002570:	fa00 f203 	lsl.w	r2, r0, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
 800257c:	e023      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	3b41      	subs	r3, #65	; 0x41
 8002590:	221f      	movs	r2, #31
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43da      	mvns	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	400a      	ands	r2, r1
 800259e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	4618      	mov	r0, r3
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	3b41      	subs	r3, #65	; 0x41
 80025ba:	fa00 f203 	lsl.w	r2, r0, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025c6:	4b22      	ldr	r3, [pc, #136]	; (8002650 <HAL_ADC_ConfigChannel+0x234>)
 80025c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a21      	ldr	r2, [pc, #132]	; (8002654 <HAL_ADC_ConfigChannel+0x238>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d109      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x1cc>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b12      	cmp	r3, #18
 80025da:	d105      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a19      	ldr	r2, [pc, #100]	; (8002654 <HAL_ADC_ConfigChannel+0x238>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d123      	bne.n	800263a <HAL_ADC_ConfigChannel+0x21e>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b10      	cmp	r3, #16
 80025f8:	d003      	beq.n	8002602 <HAL_ADC_ConfigChannel+0x1e6>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b11      	cmp	r3, #17
 8002600:	d11b      	bne.n	800263a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b10      	cmp	r3, #16
 8002614:	d111      	bne.n	800263a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002616:	4b10      	ldr	r3, [pc, #64]	; (8002658 <HAL_ADC_ConfigChannel+0x23c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a10      	ldr	r2, [pc, #64]	; (800265c <HAL_ADC_ConfigChannel+0x240>)
 800261c:	fba2 2303 	umull	r2, r3, r2, r3
 8002620:	0c9a      	lsrs	r2, r3, #18
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800262c:	e002      	b.n	8002634 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	3b01      	subs	r3, #1
 8002632:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f9      	bne.n	800262e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	40012300 	.word	0x40012300
 8002654:	40012000 	.word	0x40012000
 8002658:	20000000 	.word	0x20000000
 800265c:	431bde83 	.word	0x431bde83

08002660 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002668:	4b79      	ldr	r3, [pc, #484]	; (8002850 <ADC_Init+0x1f0>)
 800266a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	431a      	orrs	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002694:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6859      	ldr	r1, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	021a      	lsls	r2, r3, #8
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6859      	ldr	r1, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6899      	ldr	r1, [r3, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f2:	4a58      	ldr	r2, [pc, #352]	; (8002854 <ADC_Init+0x1f4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d022      	beq.n	800273e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002706:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6899      	ldr	r1, [r3, #8]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002728:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6899      	ldr	r1, [r3, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	e00f      	b.n	800275e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800274c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800275c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0202 	bic.w	r2, r2, #2
 800276c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6899      	ldr	r1, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	7e1b      	ldrb	r3, [r3, #24]
 8002778:	005a      	lsls	r2, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d01b      	beq.n	80027c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800279a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6859      	ldr	r1, [r3, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	3b01      	subs	r3, #1
 80027b8:	035a      	lsls	r2, r3, #13
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	e007      	b.n	80027d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	051a      	lsls	r2, r3, #20
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002808:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6899      	ldr	r1, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002816:	025a      	lsls	r2, r3, #9
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800282e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6899      	ldr	r1, [r3, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	029a      	lsls	r2, r3, #10
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	609a      	str	r2, [r3, #8]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	40012300 	.word	0x40012300
 8002854:	0f000001 	.word	0x0f000001

08002858 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002864:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800286e:	2b00      	cmp	r3, #0
 8002870:	d13c      	bne.n	80028ec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d12b      	bne.n	80028e4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002890:	2b00      	cmp	r3, #0
 8002892:	d127      	bne.n	80028e4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d006      	beq.n	80028b0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d119      	bne.n	80028e4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0220 	bic.w	r2, r2, #32
 80028be:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d105      	bne.n	80028e4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	f043 0201 	orr.w	r2, r3, #1
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f7ff fd7a 	bl	80023de <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80028ea:	e00e      	b.n	800290a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f7ff fd84 	bl	8002406 <HAL_ADC_ErrorCallback>
}
 80028fe:	e004      	b.n	800290a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	4798      	blx	r3
}
 800290a:	bf00      	nop
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b084      	sub	sp, #16
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f7ff fd66 	bl	80023f2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002926:	bf00      	nop
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b084      	sub	sp, #16
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2240      	movs	r2, #64	; 0x40
 8002940:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	f043 0204 	orr.w	r2, r3, #4
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f7ff fd59 	bl	8002406 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002954:	bf00      	nop
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800296c:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <__NVIC_SetPriorityGrouping+0x44>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002978:	4013      	ands	r3, r2
 800297a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002984:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800298c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800298e:	4a04      	ldr	r2, [pc, #16]	; (80029a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	60d3      	str	r3, [r2, #12]
}
 8002994:	bf00      	nop
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a8:	4b04      	ldr	r3, [pc, #16]	; (80029bc <__NVIC_GetPriorityGrouping+0x18>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	0a1b      	lsrs	r3, r3, #8
 80029ae:	f003 0307 	and.w	r3, r3, #7
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	db0b      	blt.n	80029ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	f003 021f 	and.w	r2, r3, #31
 80029d8:	4907      	ldr	r1, [pc, #28]	; (80029f8 <__NVIC_EnableIRQ+0x38>)
 80029da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	2001      	movs	r0, #1
 80029e2:	fa00 f202 	lsl.w	r2, r0, r2
 80029e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	e000e100 	.word	0xe000e100

080029fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	6039      	str	r1, [r7, #0]
 8002a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	db0a      	blt.n	8002a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	490c      	ldr	r1, [pc, #48]	; (8002a48 <__NVIC_SetPriority+0x4c>)
 8002a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1a:	0112      	lsls	r2, r2, #4
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	440b      	add	r3, r1
 8002a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a24:	e00a      	b.n	8002a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	4908      	ldr	r1, [pc, #32]	; (8002a4c <__NVIC_SetPriority+0x50>)
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	3b04      	subs	r3, #4
 8002a34:	0112      	lsls	r2, r2, #4
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	440b      	add	r3, r1
 8002a3a:	761a      	strb	r2, [r3, #24]
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	e000e100 	.word	0xe000e100
 8002a4c:	e000ed00 	.word	0xe000ed00

08002a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b089      	sub	sp, #36	; 0x24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f1c3 0307 	rsb	r3, r3, #7
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	bf28      	it	cs
 8002a6e:	2304      	movcs	r3, #4
 8002a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3304      	adds	r3, #4
 8002a76:	2b06      	cmp	r3, #6
 8002a78:	d902      	bls.n	8002a80 <NVIC_EncodePriority+0x30>
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	3b03      	subs	r3, #3
 8002a7e:	e000      	b.n	8002a82 <NVIC_EncodePriority+0x32>
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a84:	f04f 32ff 	mov.w	r2, #4294967295
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43da      	mvns	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	401a      	ands	r2, r3
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a98:	f04f 31ff 	mov.w	r1, #4294967295
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa2:	43d9      	mvns	r1, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa8:	4313      	orrs	r3, r2
         );
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3724      	adds	r7, #36	; 0x24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ac8:	d301      	bcc.n	8002ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aca:	2301      	movs	r3, #1
 8002acc:	e00f      	b.n	8002aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ace:	4a0a      	ldr	r2, [pc, #40]	; (8002af8 <SysTick_Config+0x40>)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ad6:	210f      	movs	r1, #15
 8002ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8002adc:	f7ff ff8e 	bl	80029fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <SysTick_Config+0x40>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ae6:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <SysTick_Config+0x40>)
 8002ae8:	2207      	movs	r2, #7
 8002aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	e000e010 	.word	0xe000e010

08002afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff ff29 	bl	800295c <__NVIC_SetPriorityGrouping>
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b086      	sub	sp, #24
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	4603      	mov	r3, r0
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	607a      	str	r2, [r7, #4]
 8002b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b24:	f7ff ff3e 	bl	80029a4 <__NVIC_GetPriorityGrouping>
 8002b28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	68b9      	ldr	r1, [r7, #8]
 8002b2e:	6978      	ldr	r0, [r7, #20]
 8002b30:	f7ff ff8e 	bl	8002a50 <NVIC_EncodePriority>
 8002b34:	4602      	mov	r2, r0
 8002b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff ff5d 	bl	80029fc <__NVIC_SetPriority>
}
 8002b42:	bf00      	nop
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	4603      	mov	r3, r0
 8002b52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff ff31 	bl	80029c0 <__NVIC_EnableIRQ>
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7ff ffa2 	bl	8002ab8 <SysTick_Config>
 8002b74:	4603      	mov	r3, r0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b082      	sub	sp, #8
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e014      	b.n	8002bba <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	791b      	ldrb	r3, [r3, #4]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d105      	bne.n	8002ba6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7fe ff4f 	bl	8001a44 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2202      	movs	r2, #2
 8002baa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
	...

08002bc4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	795b      	ldrb	r3, [r3, #5]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_DAC_Start_DMA+0x22>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e0ab      	b.n	8002d3e <HAL_DAC_Start_DMA+0x17a>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2201      	movs	r2, #1
 8002bea:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d12f      	bne.n	8002c58 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	4a52      	ldr	r2, [pc, #328]	; (8002d48 <HAL_DAC_Start_DMA+0x184>)
 8002bfe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	4a51      	ldr	r2, [pc, #324]	; (8002d4c <HAL_DAC_Start_DMA+0x188>)
 8002c06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	4a50      	ldr	r2, [pc, #320]	; (8002d50 <HAL_DAC_Start_DMA+0x18c>)
 8002c0e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c1e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d013      	beq.n	8002c4e <HAL_DAC_Start_DMA+0x8a>
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d845      	bhi.n	8002cb8 <HAL_DAC_Start_DMA+0xf4>
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_DAC_Start_DMA+0x76>
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d005      	beq.n	8002c44 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002c38:	e03e      	b.n	8002cb8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	3308      	adds	r3, #8
 8002c40:	613b      	str	r3, [r7, #16]
        break;
 8002c42:	e03c      	b.n	8002cbe <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	330c      	adds	r3, #12
 8002c4a:	613b      	str	r3, [r7, #16]
        break;
 8002c4c:	e037      	b.n	8002cbe <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	3310      	adds	r3, #16
 8002c54:	613b      	str	r3, [r7, #16]
        break;
 8002c56:	e032      	b.n	8002cbe <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4a3d      	ldr	r2, [pc, #244]	; (8002d54 <HAL_DAC_Start_DMA+0x190>)
 8002c5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	4a3c      	ldr	r2, [pc, #240]	; (8002d58 <HAL_DAC_Start_DMA+0x194>)
 8002c66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	4a3b      	ldr	r2, [pc, #236]	; (8002d5c <HAL_DAC_Start_DMA+0x198>)
 8002c6e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c7e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d013      	beq.n	8002cae <HAL_DAC_Start_DMA+0xea>
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d817      	bhi.n	8002cbc <HAL_DAC_Start_DMA+0xf8>
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_DAC_Start_DMA+0xd6>
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d005      	beq.n	8002ca4 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002c98:	e010      	b.n	8002cbc <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	3314      	adds	r3, #20
 8002ca0:	613b      	str	r3, [r7, #16]
        break;
 8002ca2:	e00c      	b.n	8002cbe <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	3318      	adds	r3, #24
 8002caa:	613b      	str	r3, [r7, #16]
        break;
 8002cac:	e007      	b.n	8002cbe <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	331c      	adds	r3, #28
 8002cb4:	613b      	str	r3, [r7, #16]
        break;
 8002cb6:	e002      	b.n	8002cbe <HAL_DAC_Start_DMA+0xfa>
        break;
 8002cb8:	bf00      	nop
 8002cba:	e000      	b.n	8002cbe <HAL_DAC_Start_DMA+0xfa>
        break;
 8002cbc:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d111      	bne.n	8002ce8 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cd2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6898      	ldr	r0, [r3, #8]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	f000 f9e5 	bl	80030ac <HAL_DMA_Start_IT>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	75fb      	strb	r3, [r7, #23]
 8002ce6:	e010      	b.n	8002d0a <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002cf6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	68d8      	ldr	r0, [r3, #12]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	f000 f9d3 	bl	80030ac <HAL_DMA_Start_IT>
 8002d06:	4603      	mov	r3, r0
 8002d08:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002d10:	7dfb      	ldrb	r3, [r7, #23]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10c      	bne.n	8002d30 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6819      	ldr	r1, [r3, #0]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f003 0310 	and.w	r3, r3, #16
 8002d22:	2201      	movs	r2, #1
 8002d24:	409a      	lsls	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	e005      	b.n	8002d3c <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	f043 0204 	orr.w	r2, r3, #4
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	08002e3b 	.word	0x08002e3b
 8002d4c:	08002e5d 	.word	0x08002e5d
 8002d50:	08002e79 	.word	0x08002e79
 8002d54:	08002ee3 	.word	0x08002ee3
 8002d58:	08002f05 	.word	0x08002f05
 8002d5c:	08002f21 	.word	0x08002f21

08002d60 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b087      	sub	sp, #28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	795b      	ldrb	r3, [r3, #5]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_DAC_ConfigChannel+0x18>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e03c      	b.n	8002e2e <HAL_DAC_ConfigChannel+0x92>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2201      	movs	r2, #1
 8002db8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f003 0310 	and.w	r3, r3, #16
 8002dce:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f003 0310 	and.w	r3, r3, #16
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6819      	ldr	r1, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	22c0      	movs	r2, #192	; 0xc0
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43da      	mvns	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	400a      	ands	r2, r1
 8002e1e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2201      	movs	r2, #1
 8002e24:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	371c      	adds	r7, #28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b084      	sub	sp, #16
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e46:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f7ff ff89 	bl	8002d60 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2201      	movs	r2, #1
 8002e52:	711a      	strb	r2, [r3, #4]
}
 8002e54:	bf00      	nop
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e68:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f7ff ff82 	bl	8002d74 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002e70:	bf00      	nop
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	f043 0204 	orr.w	r2, r3, #4
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f7ff ff78 	bl	8002d88 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	711a      	strb	r2, [r3, #4]
}
 8002e9e:	bf00      	nop
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b084      	sub	sp, #16
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f7ff ffd8 	bl	8002ea6 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	711a      	strb	r2, [r3, #4]
}
 8002efc:	bf00      	nop
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f10:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f7ff ffd1 	bl	8002eba <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002f18:	bf00      	nop
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f043 0204 	orr.w	r2, r3, #4
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f7ff ffc7 	bl	8002ece <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2201      	movs	r2, #1
 8002f44:	711a      	strb	r2, [r3, #4]
}
 8002f46:	bf00      	nop
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f5c:	f7fe ff82 	bl	8001e64 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e099      	b.n	80030a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0201 	bic.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f8c:	e00f      	b.n	8002fae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f8e:	f7fe ff69 	bl	8001e64 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b05      	cmp	r3, #5
 8002f9a:	d908      	bls.n	8002fae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e078      	b.n	80030a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1e8      	bne.n	8002f8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	4b38      	ldr	r3, [pc, #224]	; (80030a8 <HAL_DMA_Init+0x158>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ff2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	2b04      	cmp	r3, #4
 8003006:	d107      	bne.n	8003018 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003010:	4313      	orrs	r3, r2
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	4313      	orrs	r3, r2
 8003016:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f023 0307 	bic.w	r3, r3, #7
 800302e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	2b04      	cmp	r3, #4
 8003040:	d117      	bne.n	8003072 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	4313      	orrs	r3, r2
 800304a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00e      	beq.n	8003072 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 fadf 	bl	8003618 <DMA_CheckFifoParam>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2240      	movs	r2, #64	; 0x40
 8003064:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800306e:	2301      	movs	r3, #1
 8003070:	e016      	b.n	80030a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 fa96 	bl	80035ac <DMA_CalcBaseAndBitshift>
 8003080:	4603      	mov	r3, r0
 8003082:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003088:	223f      	movs	r2, #63	; 0x3f
 800308a:	409a      	lsls	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	f010803f 	.word	0xf010803f

080030ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
 80030b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d101      	bne.n	80030d2 <HAL_DMA_Start_IT+0x26>
 80030ce:	2302      	movs	r3, #2
 80030d0:	e040      	b.n	8003154 <HAL_DMA_Start_IT+0xa8>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d12f      	bne.n	8003146 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2202      	movs	r2, #2
 80030ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 fa28 	bl	8003550 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003104:	223f      	movs	r2, #63	; 0x3f
 8003106:	409a      	lsls	r2, r3
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0216 	orr.w	r2, r2, #22
 800311a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	2b00      	cmp	r3, #0
 8003122:	d007      	beq.n	8003134 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0208 	orr.w	r2, r2, #8
 8003132:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	e005      	b.n	8003152 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800314e:	2302      	movs	r3, #2
 8003150:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003152:	7dfb      	ldrb	r3, [r7, #23]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003168:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800316a:	f7fe fe7b 	bl	8001e64 <HAL_GetTick>
 800316e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d008      	beq.n	800318e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2280      	movs	r2, #128	; 0x80
 8003180:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e052      	b.n	8003234 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0216 	bic.w	r2, r2, #22
 800319c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695a      	ldr	r2, [r3, #20]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d103      	bne.n	80031be <HAL_DMA_Abort+0x62>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d007      	beq.n	80031ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0208 	bic.w	r2, r2, #8
 80031cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0201 	bic.w	r2, r2, #1
 80031dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031de:	e013      	b.n	8003208 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031e0:	f7fe fe40 	bl	8001e64 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b05      	cmp	r3, #5
 80031ec:	d90c      	bls.n	8003208 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2220      	movs	r2, #32
 80031f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2203      	movs	r2, #3
 80031f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e015      	b.n	8003234 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1e4      	bne.n	80031e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321a:	223f      	movs	r2, #63	; 0x3f
 800321c:	409a      	lsls	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003248:	4b8e      	ldr	r3, [pc, #568]	; (8003484 <HAL_DMA_IRQHandler+0x248>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a8e      	ldr	r2, [pc, #568]	; (8003488 <HAL_DMA_IRQHandler+0x24c>)
 800324e:	fba2 2303 	umull	r2, r3, r2, r3
 8003252:	0a9b      	lsrs	r3, r3, #10
 8003254:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003266:	2208      	movs	r2, #8
 8003268:	409a      	lsls	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4013      	ands	r3, r2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d01a      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d013      	beq.n	80032a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0204 	bic.w	r2, r2, #4
 800328e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003294:	2208      	movs	r2, #8
 8003296:	409a      	lsls	r2, r3
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a0:	f043 0201 	orr.w	r2, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ac:	2201      	movs	r2, #1
 80032ae:	409a      	lsls	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4013      	ands	r3, r2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d012      	beq.n	80032de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00b      	beq.n	80032de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ca:	2201      	movs	r2, #1
 80032cc:	409a      	lsls	r2, r3
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d6:	f043 0202 	orr.w	r2, r3, #2
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e2:	2204      	movs	r2, #4
 80032e4:	409a      	lsls	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4013      	ands	r3, r2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d012      	beq.n	8003314 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00b      	beq.n	8003314 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003300:	2204      	movs	r2, #4
 8003302:	409a      	lsls	r2, r3
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330c:	f043 0204 	orr.w	r2, r3, #4
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003318:	2210      	movs	r2, #16
 800331a:	409a      	lsls	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4013      	ands	r3, r2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d043      	beq.n	80033ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d03c      	beq.n	80033ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003336:	2210      	movs	r2, #16
 8003338:	409a      	lsls	r2, r3
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d018      	beq.n	800337e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d108      	bne.n	800336c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	d024      	beq.n	80033ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	4798      	blx	r3
 800336a:	e01f      	b.n	80033ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003370:	2b00      	cmp	r3, #0
 8003372:	d01b      	beq.n	80033ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	4798      	blx	r3
 800337c:	e016      	b.n	80033ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d107      	bne.n	800339c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0208 	bic.w	r2, r2, #8
 800339a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b0:	2220      	movs	r2, #32
 80033b2:	409a      	lsls	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4013      	ands	r3, r2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 808f 	beq.w	80034dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0310 	and.w	r3, r3, #16
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 8087 	beq.w	80034dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d2:	2220      	movs	r2, #32
 80033d4:	409a      	lsls	r2, r3
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b05      	cmp	r3, #5
 80033e4:	d136      	bne.n	8003454 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0216 	bic.w	r2, r2, #22
 80033f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695a      	ldr	r2, [r3, #20]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003404:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	2b00      	cmp	r3, #0
 800340c:	d103      	bne.n	8003416 <HAL_DMA_IRQHandler+0x1da>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003412:	2b00      	cmp	r3, #0
 8003414:	d007      	beq.n	8003426 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0208 	bic.w	r2, r2, #8
 8003424:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342a:	223f      	movs	r2, #63	; 0x3f
 800342c:	409a      	lsls	r2, r3
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003446:	2b00      	cmp	r3, #0
 8003448:	d07e      	beq.n	8003548 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	4798      	blx	r3
        }
        return;
 8003452:	e079      	b.n	8003548 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d01d      	beq.n	800349e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10d      	bne.n	800348c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003474:	2b00      	cmp	r3, #0
 8003476:	d031      	beq.n	80034dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	4798      	blx	r3
 8003480:	e02c      	b.n	80034dc <HAL_DMA_IRQHandler+0x2a0>
 8003482:	bf00      	nop
 8003484:	20000000 	.word	0x20000000
 8003488:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003490:	2b00      	cmp	r3, #0
 8003492:	d023      	beq.n	80034dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	4798      	blx	r3
 800349c:	e01e      	b.n	80034dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10f      	bne.n	80034cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0210 	bic.w	r2, r2, #16
 80034ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d032      	beq.n	800354a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d022      	beq.n	8003536 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2205      	movs	r2, #5
 80034f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0201 	bic.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	3301      	adds	r3, #1
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	429a      	cmp	r2, r3
 8003512:	d307      	bcc.n	8003524 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f2      	bne.n	8003508 <HAL_DMA_IRQHandler+0x2cc>
 8003522:	e000      	b.n	8003526 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003524:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	4798      	blx	r3
 8003546:	e000      	b.n	800354a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003548:	bf00      	nop
    }
  }
}
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800356c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b40      	cmp	r3, #64	; 0x40
 800357c:	d108      	bne.n	8003590 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800358e:	e007      	b.n	80035a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	60da      	str	r2, [r3, #12]
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	3b10      	subs	r3, #16
 80035bc:	4a14      	ldr	r2, [pc, #80]	; (8003610 <DMA_CalcBaseAndBitshift+0x64>)
 80035be:	fba2 2303 	umull	r2, r3, r2, r3
 80035c2:	091b      	lsrs	r3, r3, #4
 80035c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035c6:	4a13      	ldr	r2, [pc, #76]	; (8003614 <DMA_CalcBaseAndBitshift+0x68>)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4413      	add	r3, r2
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d909      	bls.n	80035ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035e2:	f023 0303 	bic.w	r3, r3, #3
 80035e6:	1d1a      	adds	r2, r3, #4
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	659a      	str	r2, [r3, #88]	; 0x58
 80035ec:	e007      	b.n	80035fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035f6:	f023 0303 	bic.w	r3, r3, #3
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	aaaaaaab 	.word	0xaaaaaaab
 8003614:	0800b0e4 	.word	0x0800b0e4

08003618 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003628:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d11f      	bne.n	8003672 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b03      	cmp	r3, #3
 8003636:	d856      	bhi.n	80036e6 <DMA_CheckFifoParam+0xce>
 8003638:	a201      	add	r2, pc, #4	; (adr r2, 8003640 <DMA_CheckFifoParam+0x28>)
 800363a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363e:	bf00      	nop
 8003640:	08003651 	.word	0x08003651
 8003644:	08003663 	.word	0x08003663
 8003648:	08003651 	.word	0x08003651
 800364c:	080036e7 	.word	0x080036e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d046      	beq.n	80036ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003660:	e043      	b.n	80036ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800366a:	d140      	bne.n	80036ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003670:	e03d      	b.n	80036ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800367a:	d121      	bne.n	80036c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b03      	cmp	r3, #3
 8003680:	d837      	bhi.n	80036f2 <DMA_CheckFifoParam+0xda>
 8003682:	a201      	add	r2, pc, #4	; (adr r2, 8003688 <DMA_CheckFifoParam+0x70>)
 8003684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003688:	08003699 	.word	0x08003699
 800368c:	0800369f 	.word	0x0800369f
 8003690:	08003699 	.word	0x08003699
 8003694:	080036b1 	.word	0x080036b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	73fb      	strb	r3, [r7, #15]
      break;
 800369c:	e030      	b.n	8003700 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d025      	beq.n	80036f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ae:	e022      	b.n	80036f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036b8:	d11f      	bne.n	80036fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036be:	e01c      	b.n	80036fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d903      	bls.n	80036ce <DMA_CheckFifoParam+0xb6>
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	d003      	beq.n	80036d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036cc:	e018      	b.n	8003700 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	73fb      	strb	r3, [r7, #15]
      break;
 80036d2:	e015      	b.n	8003700 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00e      	beq.n	80036fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	73fb      	strb	r3, [r7, #15]
      break;
 80036e4:	e00b      	b.n	80036fe <DMA_CheckFifoParam+0xe6>
      break;
 80036e6:	bf00      	nop
 80036e8:	e00a      	b.n	8003700 <DMA_CheckFifoParam+0xe8>
      break;
 80036ea:	bf00      	nop
 80036ec:	e008      	b.n	8003700 <DMA_CheckFifoParam+0xe8>
      break;
 80036ee:	bf00      	nop
 80036f0:	e006      	b.n	8003700 <DMA_CheckFifoParam+0xe8>
      break;
 80036f2:	bf00      	nop
 80036f4:	e004      	b.n	8003700 <DMA_CheckFifoParam+0xe8>
      break;
 80036f6:	bf00      	nop
 80036f8:	e002      	b.n	8003700 <DMA_CheckFifoParam+0xe8>
      break;   
 80036fa:	bf00      	nop
 80036fc:	e000      	b.n	8003700 <DMA_CheckFifoParam+0xe8>
      break;
 80036fe:	bf00      	nop
    }
  } 
  
  return status; 
 8003700:	7bfb      	ldrb	r3, [r7, #15]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop

08003710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003710:	b480      	push	{r7}
 8003712:	b089      	sub	sp, #36	; 0x24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800371e:	2300      	movs	r3, #0
 8003720:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003722:	2300      	movs	r3, #0
 8003724:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
 800372a:	e16b      	b.n	8003a04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800372c:	2201      	movs	r2, #1
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4013      	ands	r3, r2
 800373e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	429a      	cmp	r2, r3
 8003746:	f040 815a 	bne.w	80039fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	2b01      	cmp	r3, #1
 8003754:	d005      	beq.n	8003762 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800375e:	2b02      	cmp	r3, #2
 8003760:	d130      	bne.n	80037c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	2203      	movs	r2, #3
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	43db      	mvns	r3, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4013      	ands	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4313      	orrs	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003798:	2201      	movs	r2, #1
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	091b      	lsrs	r3, r3, #4
 80037ae:	f003 0201 	and.w	r2, r3, #1
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 0303 	and.w	r3, r3, #3
 80037cc:	2b03      	cmp	r3, #3
 80037ce:	d017      	beq.n	8003800 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	2203      	movs	r2, #3
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	43db      	mvns	r3, r3
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	4013      	ands	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f003 0303 	and.w	r3, r3, #3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d123      	bne.n	8003854 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	08da      	lsrs	r2, r3, #3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3208      	adds	r2, #8
 8003814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003818:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	220f      	movs	r2, #15
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4013      	ands	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	08da      	lsrs	r2, r3, #3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3208      	adds	r2, #8
 800384e:	69b9      	ldr	r1, [r7, #24]
 8003850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	2203      	movs	r2, #3
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4013      	ands	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 0203 	and.w	r2, r3, #3
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 80b4 	beq.w	80039fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	4b60      	ldr	r3, [pc, #384]	; (8003a1c <HAL_GPIO_Init+0x30c>)
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	4a5f      	ldr	r2, [pc, #380]	; (8003a1c <HAL_GPIO_Init+0x30c>)
 80038a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038a4:	6453      	str	r3, [r2, #68]	; 0x44
 80038a6:	4b5d      	ldr	r3, [pc, #372]	; (8003a1c <HAL_GPIO_Init+0x30c>)
 80038a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038b2:	4a5b      	ldr	r2, [pc, #364]	; (8003a20 <HAL_GPIO_Init+0x310>)
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	089b      	lsrs	r3, r3, #2
 80038b8:	3302      	adds	r3, #2
 80038ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	220f      	movs	r2, #15
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43db      	mvns	r3, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4013      	ands	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a52      	ldr	r2, [pc, #328]	; (8003a24 <HAL_GPIO_Init+0x314>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d02b      	beq.n	8003936 <HAL_GPIO_Init+0x226>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a51      	ldr	r2, [pc, #324]	; (8003a28 <HAL_GPIO_Init+0x318>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d025      	beq.n	8003932 <HAL_GPIO_Init+0x222>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a50      	ldr	r2, [pc, #320]	; (8003a2c <HAL_GPIO_Init+0x31c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d01f      	beq.n	800392e <HAL_GPIO_Init+0x21e>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a4f      	ldr	r2, [pc, #316]	; (8003a30 <HAL_GPIO_Init+0x320>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d019      	beq.n	800392a <HAL_GPIO_Init+0x21a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a4e      	ldr	r2, [pc, #312]	; (8003a34 <HAL_GPIO_Init+0x324>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d013      	beq.n	8003926 <HAL_GPIO_Init+0x216>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a4d      	ldr	r2, [pc, #308]	; (8003a38 <HAL_GPIO_Init+0x328>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00d      	beq.n	8003922 <HAL_GPIO_Init+0x212>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a4c      	ldr	r2, [pc, #304]	; (8003a3c <HAL_GPIO_Init+0x32c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d007      	beq.n	800391e <HAL_GPIO_Init+0x20e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a4b      	ldr	r2, [pc, #300]	; (8003a40 <HAL_GPIO_Init+0x330>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d101      	bne.n	800391a <HAL_GPIO_Init+0x20a>
 8003916:	2307      	movs	r3, #7
 8003918:	e00e      	b.n	8003938 <HAL_GPIO_Init+0x228>
 800391a:	2308      	movs	r3, #8
 800391c:	e00c      	b.n	8003938 <HAL_GPIO_Init+0x228>
 800391e:	2306      	movs	r3, #6
 8003920:	e00a      	b.n	8003938 <HAL_GPIO_Init+0x228>
 8003922:	2305      	movs	r3, #5
 8003924:	e008      	b.n	8003938 <HAL_GPIO_Init+0x228>
 8003926:	2304      	movs	r3, #4
 8003928:	e006      	b.n	8003938 <HAL_GPIO_Init+0x228>
 800392a:	2303      	movs	r3, #3
 800392c:	e004      	b.n	8003938 <HAL_GPIO_Init+0x228>
 800392e:	2302      	movs	r3, #2
 8003930:	e002      	b.n	8003938 <HAL_GPIO_Init+0x228>
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <HAL_GPIO_Init+0x228>
 8003936:	2300      	movs	r3, #0
 8003938:	69fa      	ldr	r2, [r7, #28]
 800393a:	f002 0203 	and.w	r2, r2, #3
 800393e:	0092      	lsls	r2, r2, #2
 8003940:	4093      	lsls	r3, r2
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4313      	orrs	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003948:	4935      	ldr	r1, [pc, #212]	; (8003a20 <HAL_GPIO_Init+0x310>)
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	089b      	lsrs	r3, r3, #2
 800394e:	3302      	adds	r3, #2
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003956:	4b3b      	ldr	r3, [pc, #236]	; (8003a44 <HAL_GPIO_Init+0x334>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	43db      	mvns	r3, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4013      	ands	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800397a:	4a32      	ldr	r2, [pc, #200]	; (8003a44 <HAL_GPIO_Init+0x334>)
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003980:	4b30      	ldr	r3, [pc, #192]	; (8003a44 <HAL_GPIO_Init+0x334>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	43db      	mvns	r3, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4013      	ands	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039a4:	4a27      	ldr	r2, [pc, #156]	; (8003a44 <HAL_GPIO_Init+0x334>)
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039aa:	4b26      	ldr	r3, [pc, #152]	; (8003a44 <HAL_GPIO_Init+0x334>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	43db      	mvns	r3, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4013      	ands	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039ce:	4a1d      	ldr	r2, [pc, #116]	; (8003a44 <HAL_GPIO_Init+0x334>)
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039d4:	4b1b      	ldr	r3, [pc, #108]	; (8003a44 <HAL_GPIO_Init+0x334>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	43db      	mvns	r3, r3
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	4013      	ands	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039f8:	4a12      	ldr	r2, [pc, #72]	; (8003a44 <HAL_GPIO_Init+0x334>)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	3301      	adds	r3, #1
 8003a02:	61fb      	str	r3, [r7, #28]
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	2b0f      	cmp	r3, #15
 8003a08:	f67f ae90 	bls.w	800372c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	bf00      	nop
 8003a10:	3724      	adds	r7, #36	; 0x24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	40013800 	.word	0x40013800
 8003a24:	40020000 	.word	0x40020000
 8003a28:	40020400 	.word	0x40020400
 8003a2c:	40020800 	.word	0x40020800
 8003a30:	40020c00 	.word	0x40020c00
 8003a34:	40021000 	.word	0x40021000
 8003a38:	40021400 	.word	0x40021400
 8003a3c:	40021800 	.word	0x40021800
 8003a40:	40021c00 	.word	0x40021c00
 8003a44:	40013c00 	.word	0x40013c00

08003a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	807b      	strh	r3, [r7, #2]
 8003a54:	4613      	mov	r3, r2
 8003a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a58:	787b      	ldrb	r3, [r7, #1]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a5e:	887a      	ldrh	r2, [r7, #2]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a64:	e003      	b.n	8003a6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a66:	887b      	ldrh	r3, [r7, #2]
 8003a68:	041a      	lsls	r2, r3, #16
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	619a      	str	r2, [r3, #24]
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003a7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a7c:	b08f      	sub	sp, #60	; 0x3c
 8003a7e:	af0a      	add	r7, sp, #40	; 0x28
 8003a80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e054      	b.n	8003b36 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d106      	bne.n	8003aac <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f005 fe70 	bl	800978c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2203      	movs	r2, #3
 8003ab0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d102      	bne.n	8003ac6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f002 fe9e 	bl	800680c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	603b      	str	r3, [r7, #0]
 8003ad6:	687e      	ldr	r6, [r7, #4]
 8003ad8:	466d      	mov	r5, sp
 8003ada:	f106 0410 	add.w	r4, r6, #16
 8003ade:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ae0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ae2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ae4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ae6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003aea:	e885 0003 	stmia.w	r5, {r0, r1}
 8003aee:	1d33      	adds	r3, r6, #4
 8003af0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003af2:	6838      	ldr	r0, [r7, #0]
 8003af4:	f002 fe18 	bl	8006728 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2101      	movs	r1, #1
 8003afe:	4618      	mov	r0, r3
 8003b00:	f002 fe95 	bl	800682e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	603b      	str	r3, [r7, #0]
 8003b0a:	687e      	ldr	r6, [r7, #4]
 8003b0c:	466d      	mov	r5, sp
 8003b0e:	f106 0410 	add.w	r4, r6, #16
 8003b12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b22:	1d33      	adds	r3, r6, #4
 8003b24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b26:	6838      	ldr	r0, [r7, #0]
 8003b28:	f003 f81e 	bl	8006b68 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b3e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003b3e:	b590      	push	{r4, r7, lr}
 8003b40:	b089      	sub	sp, #36	; 0x24
 8003b42:	af04      	add	r7, sp, #16
 8003b44:	6078      	str	r0, [r7, #4]
 8003b46:	4608      	mov	r0, r1
 8003b48:	4611      	mov	r1, r2
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	70fb      	strb	r3, [r7, #3]
 8003b50:	460b      	mov	r3, r1
 8003b52:	70bb      	strb	r3, [r7, #2]
 8003b54:	4613      	mov	r3, r2
 8003b56:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_HCD_HC_Init+0x28>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e076      	b.n	8003c54 <HAL_HCD_HC_Init+0x116>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003b6e:	78fb      	ldrb	r3, [r7, #3]
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	212c      	movs	r1, #44	; 0x2c
 8003b74:	fb01 f303 	mul.w	r3, r1, r3
 8003b78:	4413      	add	r3, r2
 8003b7a:	333d      	adds	r3, #61	; 0x3d
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003b80:	78fb      	ldrb	r3, [r7, #3]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	212c      	movs	r1, #44	; 0x2c
 8003b86:	fb01 f303 	mul.w	r3, r1, r3
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3338      	adds	r3, #56	; 0x38
 8003b8e:	787a      	ldrb	r2, [r7, #1]
 8003b90:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003b92:	78fb      	ldrb	r3, [r7, #3]
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	212c      	movs	r1, #44	; 0x2c
 8003b98:	fb01 f303 	mul.w	r3, r1, r3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	3340      	adds	r3, #64	; 0x40
 8003ba0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003ba2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003ba4:	78fb      	ldrb	r3, [r7, #3]
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	212c      	movs	r1, #44	; 0x2c
 8003baa:	fb01 f303 	mul.w	r3, r1, r3
 8003bae:	4413      	add	r3, r2
 8003bb0:	3339      	adds	r3, #57	; 0x39
 8003bb2:	78fa      	ldrb	r2, [r7, #3]
 8003bb4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003bb6:	78fb      	ldrb	r3, [r7, #3]
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	212c      	movs	r1, #44	; 0x2c
 8003bbc:	fb01 f303 	mul.w	r3, r1, r3
 8003bc0:	4413      	add	r3, r2
 8003bc2:	333f      	adds	r3, #63	; 0x3f
 8003bc4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003bc8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003bca:	78fb      	ldrb	r3, [r7, #3]
 8003bcc:	78ba      	ldrb	r2, [r7, #2]
 8003bce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003bd2:	b2d0      	uxtb	r0, r2
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	212c      	movs	r1, #44	; 0x2c
 8003bd8:	fb01 f303 	mul.w	r3, r1, r3
 8003bdc:	4413      	add	r3, r2
 8003bde:	333a      	adds	r3, #58	; 0x3a
 8003be0:	4602      	mov	r2, r0
 8003be2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003be4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	da09      	bge.n	8003c00 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003bec:	78fb      	ldrb	r3, [r7, #3]
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	212c      	movs	r1, #44	; 0x2c
 8003bf2:	fb01 f303 	mul.w	r3, r1, r3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	333b      	adds	r3, #59	; 0x3b
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	701a      	strb	r2, [r3, #0]
 8003bfe:	e008      	b.n	8003c12 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003c00:	78fb      	ldrb	r3, [r7, #3]
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	212c      	movs	r1, #44	; 0x2c
 8003c06:	fb01 f303 	mul.w	r3, r1, r3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	333b      	adds	r3, #59	; 0x3b
 8003c0e:	2200      	movs	r2, #0
 8003c10:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003c12:	78fb      	ldrb	r3, [r7, #3]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	212c      	movs	r1, #44	; 0x2c
 8003c18:	fb01 f303 	mul.w	r3, r1, r3
 8003c1c:	4413      	add	r3, r2
 8003c1e:	333c      	adds	r3, #60	; 0x3c
 8003c20:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003c24:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	787c      	ldrb	r4, [r7, #1]
 8003c2c:	78ba      	ldrb	r2, [r7, #2]
 8003c2e:	78f9      	ldrb	r1, [r7, #3]
 8003c30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003c32:	9302      	str	r3, [sp, #8]
 8003c34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c38:	9301      	str	r3, [sp, #4]
 8003c3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	4623      	mov	r3, r4
 8003c42:	f003 f917 	bl	8006e74 <USB_HC_Init>
 8003c46:	4603      	mov	r3, r0
 8003c48:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd90      	pop	{r4, r7, pc}

08003c5c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d101      	bne.n	8003c7a <HAL_HCD_HC_Halt+0x1e>
 8003c76:	2302      	movs	r3, #2
 8003c78:	e00f      	b.n	8003c9a <HAL_HCD_HC_Halt+0x3e>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	78fa      	ldrb	r2, [r7, #3]
 8003c88:	4611      	mov	r1, r2
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f003 fb67 	bl	800735e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	4608      	mov	r0, r1
 8003cae:	4611      	mov	r1, r2
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	70fb      	strb	r3, [r7, #3]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	70bb      	strb	r3, [r7, #2]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003cbe:	78fb      	ldrb	r3, [r7, #3]
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	212c      	movs	r1, #44	; 0x2c
 8003cc4:	fb01 f303 	mul.w	r3, r1, r3
 8003cc8:	4413      	add	r3, r2
 8003cca:	333b      	adds	r3, #59	; 0x3b
 8003ccc:	78ba      	ldrb	r2, [r7, #2]
 8003cce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	212c      	movs	r1, #44	; 0x2c
 8003cd6:	fb01 f303 	mul.w	r3, r1, r3
 8003cda:	4413      	add	r3, r2
 8003cdc:	333f      	adds	r3, #63	; 0x3f
 8003cde:	787a      	ldrb	r2, [r7, #1]
 8003ce0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003ce2:	7c3b      	ldrb	r3, [r7, #16]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d112      	bne.n	8003d0e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003ce8:	78fb      	ldrb	r3, [r7, #3]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	212c      	movs	r1, #44	; 0x2c
 8003cee:	fb01 f303 	mul.w	r3, r1, r3
 8003cf2:	4413      	add	r3, r2
 8003cf4:	3342      	adds	r3, #66	; 0x42
 8003cf6:	2203      	movs	r2, #3
 8003cf8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	212c      	movs	r1, #44	; 0x2c
 8003d00:	fb01 f303 	mul.w	r3, r1, r3
 8003d04:	4413      	add	r3, r2
 8003d06:	333d      	adds	r3, #61	; 0x3d
 8003d08:	7f3a      	ldrb	r2, [r7, #28]
 8003d0a:	701a      	strb	r2, [r3, #0]
 8003d0c:	e008      	b.n	8003d20 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d0e:	78fb      	ldrb	r3, [r7, #3]
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	212c      	movs	r1, #44	; 0x2c
 8003d14:	fb01 f303 	mul.w	r3, r1, r3
 8003d18:	4413      	add	r3, r2
 8003d1a:	3342      	adds	r3, #66	; 0x42
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003d20:	787b      	ldrb	r3, [r7, #1]
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	f200 80c6 	bhi.w	8003eb4 <HAL_HCD_HC_SubmitRequest+0x210>
 8003d28:	a201      	add	r2, pc, #4	; (adr r2, 8003d30 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2e:	bf00      	nop
 8003d30:	08003d41 	.word	0x08003d41
 8003d34:	08003ea1 	.word	0x08003ea1
 8003d38:	08003da5 	.word	0x08003da5
 8003d3c:	08003e23 	.word	0x08003e23
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003d40:	7c3b      	ldrb	r3, [r7, #16]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	f040 80b8 	bne.w	8003eb8 <HAL_HCD_HC_SubmitRequest+0x214>
 8003d48:	78bb      	ldrb	r3, [r7, #2]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f040 80b4 	bne.w	8003eb8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003d50:	8b3b      	ldrh	r3, [r7, #24]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d108      	bne.n	8003d68 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003d56:	78fb      	ldrb	r3, [r7, #3]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	212c      	movs	r1, #44	; 0x2c
 8003d5c:	fb01 f303 	mul.w	r3, r1, r3
 8003d60:	4413      	add	r3, r2
 8003d62:	3355      	adds	r3, #85	; 0x55
 8003d64:	2201      	movs	r2, #1
 8003d66:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	212c      	movs	r1, #44	; 0x2c
 8003d6e:	fb01 f303 	mul.w	r3, r1, r3
 8003d72:	4413      	add	r3, r2
 8003d74:	3355      	adds	r3, #85	; 0x55
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d109      	bne.n	8003d90 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	212c      	movs	r1, #44	; 0x2c
 8003d82:	fb01 f303 	mul.w	r3, r1, r3
 8003d86:	4413      	add	r3, r2
 8003d88:	3342      	adds	r3, #66	; 0x42
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003d8e:	e093      	b.n	8003eb8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	212c      	movs	r1, #44	; 0x2c
 8003d96:	fb01 f303 	mul.w	r3, r1, r3
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3342      	adds	r3, #66	; 0x42
 8003d9e:	2202      	movs	r2, #2
 8003da0:	701a      	strb	r2, [r3, #0]
      break;
 8003da2:	e089      	b.n	8003eb8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003da4:	78bb      	ldrb	r3, [r7, #2]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d11d      	bne.n	8003de6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003daa:	78fb      	ldrb	r3, [r7, #3]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	212c      	movs	r1, #44	; 0x2c
 8003db0:	fb01 f303 	mul.w	r3, r1, r3
 8003db4:	4413      	add	r3, r2
 8003db6:	3355      	adds	r3, #85	; 0x55
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d109      	bne.n	8003dd2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003dbe:	78fb      	ldrb	r3, [r7, #3]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	212c      	movs	r1, #44	; 0x2c
 8003dc4:	fb01 f303 	mul.w	r3, r1, r3
 8003dc8:	4413      	add	r3, r2
 8003dca:	3342      	adds	r3, #66	; 0x42
 8003dcc:	2200      	movs	r2, #0
 8003dce:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003dd0:	e073      	b.n	8003eba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003dd2:	78fb      	ldrb	r3, [r7, #3]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	212c      	movs	r1, #44	; 0x2c
 8003dd8:	fb01 f303 	mul.w	r3, r1, r3
 8003ddc:	4413      	add	r3, r2
 8003dde:	3342      	adds	r3, #66	; 0x42
 8003de0:	2202      	movs	r2, #2
 8003de2:	701a      	strb	r2, [r3, #0]
      break;
 8003de4:	e069      	b.n	8003eba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003de6:	78fb      	ldrb	r3, [r7, #3]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	212c      	movs	r1, #44	; 0x2c
 8003dec:	fb01 f303 	mul.w	r3, r1, r3
 8003df0:	4413      	add	r3, r2
 8003df2:	3354      	adds	r3, #84	; 0x54
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d109      	bne.n	8003e0e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003dfa:	78fb      	ldrb	r3, [r7, #3]
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	212c      	movs	r1, #44	; 0x2c
 8003e00:	fb01 f303 	mul.w	r3, r1, r3
 8003e04:	4413      	add	r3, r2
 8003e06:	3342      	adds	r3, #66	; 0x42
 8003e08:	2200      	movs	r2, #0
 8003e0a:	701a      	strb	r2, [r3, #0]
      break;
 8003e0c:	e055      	b.n	8003eba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e0e:	78fb      	ldrb	r3, [r7, #3]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	212c      	movs	r1, #44	; 0x2c
 8003e14:	fb01 f303 	mul.w	r3, r1, r3
 8003e18:	4413      	add	r3, r2
 8003e1a:	3342      	adds	r3, #66	; 0x42
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	701a      	strb	r2, [r3, #0]
      break;
 8003e20:	e04b      	b.n	8003eba <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003e22:	78bb      	ldrb	r3, [r7, #2]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d11d      	bne.n	8003e64 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003e28:	78fb      	ldrb	r3, [r7, #3]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	212c      	movs	r1, #44	; 0x2c
 8003e2e:	fb01 f303 	mul.w	r3, r1, r3
 8003e32:	4413      	add	r3, r2
 8003e34:	3355      	adds	r3, #85	; 0x55
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d109      	bne.n	8003e50 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e3c:	78fb      	ldrb	r3, [r7, #3]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	212c      	movs	r1, #44	; 0x2c
 8003e42:	fb01 f303 	mul.w	r3, r1, r3
 8003e46:	4413      	add	r3, r2
 8003e48:	3342      	adds	r3, #66	; 0x42
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003e4e:	e034      	b.n	8003eba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	212c      	movs	r1, #44	; 0x2c
 8003e56:	fb01 f303 	mul.w	r3, r1, r3
 8003e5a:	4413      	add	r3, r2
 8003e5c:	3342      	adds	r3, #66	; 0x42
 8003e5e:	2202      	movs	r2, #2
 8003e60:	701a      	strb	r2, [r3, #0]
      break;
 8003e62:	e02a      	b.n	8003eba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003e64:	78fb      	ldrb	r3, [r7, #3]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	212c      	movs	r1, #44	; 0x2c
 8003e6a:	fb01 f303 	mul.w	r3, r1, r3
 8003e6e:	4413      	add	r3, r2
 8003e70:	3354      	adds	r3, #84	; 0x54
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d109      	bne.n	8003e8c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	212c      	movs	r1, #44	; 0x2c
 8003e7e:	fb01 f303 	mul.w	r3, r1, r3
 8003e82:	4413      	add	r3, r2
 8003e84:	3342      	adds	r3, #66	; 0x42
 8003e86:	2200      	movs	r2, #0
 8003e88:	701a      	strb	r2, [r3, #0]
      break;
 8003e8a:	e016      	b.n	8003eba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e8c:	78fb      	ldrb	r3, [r7, #3]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	212c      	movs	r1, #44	; 0x2c
 8003e92:	fb01 f303 	mul.w	r3, r1, r3
 8003e96:	4413      	add	r3, r2
 8003e98:	3342      	adds	r3, #66	; 0x42
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	701a      	strb	r2, [r3, #0]
      break;
 8003e9e:	e00c      	b.n	8003eba <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ea0:	78fb      	ldrb	r3, [r7, #3]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	212c      	movs	r1, #44	; 0x2c
 8003ea6:	fb01 f303 	mul.w	r3, r1, r3
 8003eaa:	4413      	add	r3, r2
 8003eac:	3342      	adds	r3, #66	; 0x42
 8003eae:	2200      	movs	r2, #0
 8003eb0:	701a      	strb	r2, [r3, #0]
      break;
 8003eb2:	e002      	b.n	8003eba <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003eb4:	bf00      	nop
 8003eb6:	e000      	b.n	8003eba <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003eb8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	212c      	movs	r1, #44	; 0x2c
 8003ec0:	fb01 f303 	mul.w	r3, r1, r3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	3344      	adds	r3, #68	; 0x44
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003ecc:	78fb      	ldrb	r3, [r7, #3]
 8003ece:	8b3a      	ldrh	r2, [r7, #24]
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	202c      	movs	r0, #44	; 0x2c
 8003ed4:	fb00 f303 	mul.w	r3, r0, r3
 8003ed8:	440b      	add	r3, r1
 8003eda:	334c      	adds	r3, #76	; 0x4c
 8003edc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003ede:	78fb      	ldrb	r3, [r7, #3]
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	212c      	movs	r1, #44	; 0x2c
 8003ee4:	fb01 f303 	mul.w	r3, r1, r3
 8003ee8:	4413      	add	r3, r2
 8003eea:	3360      	adds	r3, #96	; 0x60
 8003eec:	2200      	movs	r2, #0
 8003eee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	212c      	movs	r1, #44	; 0x2c
 8003ef6:	fb01 f303 	mul.w	r3, r1, r3
 8003efa:	4413      	add	r3, r2
 8003efc:	3350      	adds	r3, #80	; 0x50
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003f02:	78fb      	ldrb	r3, [r7, #3]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	212c      	movs	r1, #44	; 0x2c
 8003f08:	fb01 f303 	mul.w	r3, r1, r3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	3339      	adds	r3, #57	; 0x39
 8003f10:	78fa      	ldrb	r2, [r7, #3]
 8003f12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	212c      	movs	r1, #44	; 0x2c
 8003f1a:	fb01 f303 	mul.w	r3, r1, r3
 8003f1e:	4413      	add	r3, r2
 8003f20:	3361      	adds	r3, #97	; 0x61
 8003f22:	2200      	movs	r2, #0
 8003f24:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6818      	ldr	r0, [r3, #0]
 8003f2a:	78fb      	ldrb	r3, [r7, #3]
 8003f2c:	222c      	movs	r2, #44	; 0x2c
 8003f2e:	fb02 f303 	mul.w	r3, r2, r3
 8003f32:	3338      	adds	r3, #56	; 0x38
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	18d1      	adds	r1, r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	461a      	mov	r2, r3
 8003f40:	f003 f8ba 	bl	80070b8 <USB_HC_StartXfer>
 8003f44:	4603      	mov	r3, r0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop

08003f50 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f002 fdbb 	bl	8006ae2 <USB_GetMode>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	f040 80f6 	bne.w	8004160 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f002 fd9f 	bl	8006abc <USB_ReadInterrupts>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 80ec 	beq.w	800415e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f002 fd96 	bl	8006abc <USB_ReadInterrupts>
 8003f90:	4603      	mov	r3, r0
 8003f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f9a:	d104      	bne.n	8003fa6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003fa4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f002 fd86 	bl	8006abc <USB_ReadInterrupts>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fba:	d104      	bne.n	8003fc6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003fc4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f002 fd76 	bl	8006abc <USB_ReadInterrupts>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fda:	d104      	bne.n	8003fe6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003fe4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f002 fd66 	bl	8006abc <USB_ReadInterrupts>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d103      	bne.n	8004002 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2202      	movs	r2, #2
 8004000:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f002 fd58 	bl	8006abc <USB_ReadInterrupts>
 800400c:	4603      	mov	r3, r0
 800400e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004016:	d11c      	bne.n	8004052 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004020:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10f      	bne.n	8004052 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004032:	2110      	movs	r1, #16
 8004034:	6938      	ldr	r0, [r7, #16]
 8004036:	f002 fc47 	bl	80068c8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800403a:	6938      	ldr	r0, [r7, #16]
 800403c:	f002 fc78 	bl	8006930 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2101      	movs	r1, #1
 8004046:	4618      	mov	r0, r3
 8004048:	f002 fe4e 	bl	8006ce8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f005 fc1b 	bl	8009888 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f002 fd30 	bl	8006abc <USB_ReadInterrupts>
 800405c:	4603      	mov	r3, r0
 800405e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004062:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004066:	d102      	bne.n	800406e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f001 f89e 	bl	80051aa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f002 fd22 	bl	8006abc <USB_ReadInterrupts>
 8004078:	4603      	mov	r3, r0
 800407a:	f003 0308 	and.w	r3, r3, #8
 800407e:	2b08      	cmp	r3, #8
 8004080:	d106      	bne.n	8004090 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f005 fbe4 	bl	8009850 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2208      	movs	r2, #8
 800408e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4618      	mov	r0, r3
 8004096:	f002 fd11 	bl	8006abc <USB_ReadInterrupts>
 800409a:	4603      	mov	r3, r0
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	2b10      	cmp	r3, #16
 80040a2:	d101      	bne.n	80040a8 <HAL_HCD_IRQHandler+0x158>
 80040a4:	2301      	movs	r3, #1
 80040a6:	e000      	b.n	80040aa <HAL_HCD_IRQHandler+0x15a>
 80040a8:	2300      	movs	r3, #0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d012      	beq.n	80040d4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	699a      	ldr	r2, [r3, #24]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0210 	bic.w	r2, r2, #16
 80040bc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 ffa1 	bl	8005006 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0210 	orr.w	r2, r2, #16
 80040d2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4618      	mov	r0, r3
 80040da:	f002 fcef 	bl	8006abc <USB_ReadInterrupts>
 80040de:	4603      	mov	r3, r0
 80040e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040e8:	d13a      	bne.n	8004160 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f003 f924 	bl	800733c <USB_HC_ReadInterrupt>
 80040f4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80040f6:	2300      	movs	r3, #0
 80040f8:	617b      	str	r3, [r7, #20]
 80040fa:	e025      	b.n	8004148 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	fa22 f303 	lsr.w	r3, r2, r3
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	2b00      	cmp	r3, #0
 800410e:	d018      	beq.n	8004142 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4413      	add	r3, r2
 8004118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004122:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004126:	d106      	bne.n	8004136 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	b2db      	uxtb	r3, r3
 800412c:	4619      	mov	r1, r3
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f8ab 	bl	800428a <HCD_HC_IN_IRQHandler>
 8004134:	e005      	b.n	8004142 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	b2db      	uxtb	r3, r3
 800413a:	4619      	mov	r1, r3
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 fbf9 	bl	8004934 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	3301      	adds	r3, #1
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	429a      	cmp	r2, r3
 8004150:	d3d4      	bcc.n	80040fc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800415a:	615a      	str	r2, [r3, #20]
 800415c:	e000      	b.n	8004160 <HAL_HCD_IRQHandler+0x210>
      return;
 800415e:	bf00      	nop
    }
  }
}
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_HCD_Start+0x16>
 8004178:	2302      	movs	r3, #2
 800417a:	e013      	b.n	80041a4 <HAL_HCD_Start+0x3e>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2101      	movs	r1, #1
 800418a:	4618      	mov	r0, r3
 800418c:	f002 fe10 	bl	8006db0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4618      	mov	r0, r3
 8004196:	f002 fb28 	bl	80067ea <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d101      	bne.n	80041c2 <HAL_HCD_Stop+0x16>
 80041be:	2302      	movs	r3, #2
 80041c0:	e00d      	b.n	80041de <HAL_HCD_Stop+0x32>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f003 f9fe 	bl	80075d0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b082      	sub	sp, #8
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f002 fdb2 	bl	8006d5c <USB_ResetPort>
 80041f8:	4603      	mov	r3, r0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	460b      	mov	r3, r1
 800420c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800420e:	78fb      	ldrb	r3, [r7, #3]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	212c      	movs	r1, #44	; 0x2c
 8004214:	fb01 f303 	mul.w	r3, r1, r3
 8004218:	4413      	add	r3, r2
 800421a:	3360      	adds	r3, #96	; 0x60
 800421c:	781b      	ldrb	r3, [r3, #0]
}
 800421e:	4618      	mov	r0, r3
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
 8004232:	460b      	mov	r3, r1
 8004234:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	212c      	movs	r1, #44	; 0x2c
 800423c:	fb01 f303 	mul.w	r3, r1, r3
 8004240:	4413      	add	r3, r2
 8004242:	3350      	adds	r3, #80	; 0x50
 8004244:	681b      	ldr	r3, [r3, #0]
}
 8004246:	4618      	mov	r0, r3
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b082      	sub	sp, #8
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f002 fdf6 	bl	8006e50 <USB_GetCurrentFrame>
 8004264:	4603      	mov	r3, r0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b082      	sub	sp, #8
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f002 fdd1 	bl	8006e22 <USB_GetHostSpeed>
 8004280:	4603      	mov	r3, r0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b086      	sub	sp, #24
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
 8004292:	460b      	mov	r3, r1
 8004294:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80042a0:	78fb      	ldrb	r3, [r7, #3]
 80042a2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	015a      	lsls	r2, r3, #5
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	4413      	add	r3, r2
 80042ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 0304 	and.w	r3, r3, #4
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d11a      	bne.n	80042f0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c6:	461a      	mov	r2, r3
 80042c8:	2304      	movs	r3, #4
 80042ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	212c      	movs	r1, #44	; 0x2c
 80042d2:	fb01 f303 	mul.w	r3, r1, r3
 80042d6:	4413      	add	r3, r2
 80042d8:	3361      	adds	r3, #97	; 0x61
 80042da:	2206      	movs	r2, #6
 80042dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	4611      	mov	r1, r2
 80042e8:	4618      	mov	r0, r3
 80042ea:	f003 f838 	bl	800735e <USB_HC_Halt>
 80042ee:	e0af      	b.n	8004450 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004306:	d11b      	bne.n	8004340 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	4413      	add	r3, r2
 8004310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004314:	461a      	mov	r2, r3
 8004316:	f44f 7380 	mov.w	r3, #256	; 0x100
 800431a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	212c      	movs	r1, #44	; 0x2c
 8004322:	fb01 f303 	mul.w	r3, r1, r3
 8004326:	4413      	add	r3, r2
 8004328:	3361      	adds	r3, #97	; 0x61
 800432a:	2207      	movs	r2, #7
 800432c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	4611      	mov	r1, r2
 8004338:	4618      	mov	r0, r3
 800433a:	f003 f810 	bl	800735e <USB_HC_Halt>
 800433e:	e087      	b.n	8004450 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	4413      	add	r3, r2
 8004348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 0320 	and.w	r3, r3, #32
 8004352:	2b20      	cmp	r3, #32
 8004354:	d109      	bne.n	800436a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	4413      	add	r3, r2
 800435e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004362:	461a      	mov	r2, r3
 8004364:	2320      	movs	r3, #32
 8004366:	6093      	str	r3, [r2, #8]
 8004368:	e072      	b.n	8004450 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	4413      	add	r3, r2
 8004372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 0308 	and.w	r3, r3, #8
 800437c:	2b08      	cmp	r3, #8
 800437e:	d11a      	bne.n	80043b6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	4413      	add	r3, r2
 8004388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800438c:	461a      	mov	r2, r3
 800438e:	2308      	movs	r3, #8
 8004390:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	212c      	movs	r1, #44	; 0x2c
 8004398:	fb01 f303 	mul.w	r3, r1, r3
 800439c:	4413      	add	r3, r2
 800439e:	3361      	adds	r3, #97	; 0x61
 80043a0:	2205      	movs	r2, #5
 80043a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	4611      	mov	r1, r2
 80043ae:	4618      	mov	r0, r3
 80043b0:	f002 ffd5 	bl	800735e <USB_HC_Halt>
 80043b4:	e04c      	b.n	8004450 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043cc:	d11b      	bne.n	8004406 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043da:	461a      	mov	r2, r3
 80043dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	212c      	movs	r1, #44	; 0x2c
 80043e8:	fb01 f303 	mul.w	r3, r1, r3
 80043ec:	4413      	add	r3, r2
 80043ee:	3361      	adds	r3, #97	; 0x61
 80043f0:	2208      	movs	r2, #8
 80043f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	b2d2      	uxtb	r2, r2
 80043fc:	4611      	mov	r1, r2
 80043fe:	4618      	mov	r0, r3
 8004400:	f002 ffad 	bl	800735e <USB_HC_Halt>
 8004404:	e024      	b.n	8004450 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	4413      	add	r3, r2
 800440e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004418:	2b80      	cmp	r3, #128	; 0x80
 800441a:	d119      	bne.n	8004450 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	4413      	add	r3, r2
 8004424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004428:	461a      	mov	r2, r3
 800442a:	2380      	movs	r3, #128	; 0x80
 800442c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	212c      	movs	r1, #44	; 0x2c
 8004434:	fb01 f303 	mul.w	r3, r1, r3
 8004438:	4413      	add	r3, r2
 800443a:	3361      	adds	r3, #97	; 0x61
 800443c:	2206      	movs	r2, #6
 800443e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	4611      	mov	r1, r2
 800444a:	4618      	mov	r0, r3
 800444c:	f002 ff87 	bl	800735e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	4413      	add	r3, r2
 8004458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004466:	d112      	bne.n	800448e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	4611      	mov	r1, r2
 8004472:	4618      	mov	r0, r3
 8004474:	f002 ff73 	bl	800735e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	4413      	add	r3, r2
 8004480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004484:	461a      	mov	r2, r3
 8004486:	f44f 7300 	mov.w	r3, #512	; 0x200
 800448a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800448c:	e24e      	b.n	800492c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	015a      	lsls	r2, r3, #5
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	4413      	add	r3, r2
 8004496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	f040 80df 	bne.w	8004664 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d019      	beq.n	80044e2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	212c      	movs	r1, #44	; 0x2c
 80044b4:	fb01 f303 	mul.w	r3, r1, r3
 80044b8:	4413      	add	r3, r2
 80044ba:	3348      	adds	r3, #72	; 0x48
 80044bc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	0159      	lsls	r1, r3, #5
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	440b      	add	r3, r1
 80044c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80044d0:	1ad2      	subs	r2, r2, r3
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	202c      	movs	r0, #44	; 0x2c
 80044d8:	fb00 f303 	mul.w	r3, r0, r3
 80044dc:	440b      	add	r3, r1
 80044de:	3350      	adds	r3, #80	; 0x50
 80044e0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	212c      	movs	r1, #44	; 0x2c
 80044e8:	fb01 f303 	mul.w	r3, r1, r3
 80044ec:	4413      	add	r3, r2
 80044ee:	3361      	adds	r3, #97	; 0x61
 80044f0:	2201      	movs	r2, #1
 80044f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	212c      	movs	r1, #44	; 0x2c
 80044fa:	fb01 f303 	mul.w	r3, r1, r3
 80044fe:	4413      	add	r3, r2
 8004500:	335c      	adds	r3, #92	; 0x5c
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	4413      	add	r3, r2
 800450e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004512:	461a      	mov	r2, r3
 8004514:	2301      	movs	r3, #1
 8004516:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	212c      	movs	r1, #44	; 0x2c
 800451e:	fb01 f303 	mul.w	r3, r1, r3
 8004522:	4413      	add	r3, r2
 8004524:	333f      	adds	r3, #63	; 0x3f
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d009      	beq.n	8004540 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	212c      	movs	r1, #44	; 0x2c
 8004532:	fb01 f303 	mul.w	r3, r1, r3
 8004536:	4413      	add	r3, r2
 8004538:	333f      	adds	r3, #63	; 0x3f
 800453a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800453c:	2b02      	cmp	r3, #2
 800453e:	d111      	bne.n	8004564 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	4611      	mov	r1, r2
 800454a:	4618      	mov	r0, r3
 800454c:	f002 ff07 	bl	800735e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	4413      	add	r3, r2
 8004558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455c:	461a      	mov	r2, r3
 800455e:	2310      	movs	r3, #16
 8004560:	6093      	str	r3, [r2, #8]
 8004562:	e03a      	b.n	80045da <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	212c      	movs	r1, #44	; 0x2c
 800456a:	fb01 f303 	mul.w	r3, r1, r3
 800456e:	4413      	add	r3, r2
 8004570:	333f      	adds	r3, #63	; 0x3f
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	2b03      	cmp	r3, #3
 8004576:	d009      	beq.n	800458c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	212c      	movs	r1, #44	; 0x2c
 800457e:	fb01 f303 	mul.w	r3, r1, r3
 8004582:	4413      	add	r3, r2
 8004584:	333f      	adds	r3, #63	; 0x3f
 8004586:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004588:	2b01      	cmp	r3, #1
 800458a:	d126      	bne.n	80045da <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	4413      	add	r3, r2
 8004594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	0151      	lsls	r1, r2, #5
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	440a      	add	r2, r1
 80045a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045aa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	212c      	movs	r1, #44	; 0x2c
 80045b2:	fb01 f303 	mul.w	r3, r1, r3
 80045b6:	4413      	add	r3, r2
 80045b8:	3360      	adds	r3, #96	; 0x60
 80045ba:	2201      	movs	r2, #1
 80045bc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	b2d9      	uxtb	r1, r3
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	202c      	movs	r0, #44	; 0x2c
 80045c8:	fb00 f303 	mul.w	r3, r0, r3
 80045cc:	4413      	add	r3, r2
 80045ce:	3360      	adds	r3, #96	; 0x60
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	461a      	mov	r2, r3
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f005 f965 	bl	80098a4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d12b      	bne.n	800463a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	212c      	movs	r1, #44	; 0x2c
 80045e8:	fb01 f303 	mul.w	r3, r1, r3
 80045ec:	4413      	add	r3, r2
 80045ee:	3348      	adds	r3, #72	; 0x48
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	202c      	movs	r0, #44	; 0x2c
 80045f8:	fb00 f202 	mul.w	r2, r0, r2
 80045fc:	440a      	add	r2, r1
 80045fe:	3240      	adds	r2, #64	; 0x40
 8004600:	8812      	ldrh	r2, [r2, #0]
 8004602:	fbb3 f3f2 	udiv	r3, r3, r2
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 818e 	beq.w	800492c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	212c      	movs	r1, #44	; 0x2c
 8004616:	fb01 f303 	mul.w	r3, r1, r3
 800461a:	4413      	add	r3, r2
 800461c:	3354      	adds	r3, #84	; 0x54
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	f083 0301 	eor.w	r3, r3, #1
 8004624:	b2d8      	uxtb	r0, r3
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	212c      	movs	r1, #44	; 0x2c
 800462c:	fb01 f303 	mul.w	r3, r1, r3
 8004630:	4413      	add	r3, r2
 8004632:	3354      	adds	r3, #84	; 0x54
 8004634:	4602      	mov	r2, r0
 8004636:	701a      	strb	r2, [r3, #0]
}
 8004638:	e178      	b.n	800492c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	212c      	movs	r1, #44	; 0x2c
 8004640:	fb01 f303 	mul.w	r3, r1, r3
 8004644:	4413      	add	r3, r2
 8004646:	3354      	adds	r3, #84	; 0x54
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	f083 0301 	eor.w	r3, r3, #1
 800464e:	b2d8      	uxtb	r0, r3
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	212c      	movs	r1, #44	; 0x2c
 8004656:	fb01 f303 	mul.w	r3, r1, r3
 800465a:	4413      	add	r3, r2
 800465c:	3354      	adds	r3, #84	; 0x54
 800465e:	4602      	mov	r2, r0
 8004660:	701a      	strb	r2, [r3, #0]
}
 8004662:	e163      	b.n	800492c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	4413      	add	r3, r2
 800466c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b02      	cmp	r3, #2
 8004678:	f040 80f6 	bne.w	8004868 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	212c      	movs	r1, #44	; 0x2c
 8004682:	fb01 f303 	mul.w	r3, r1, r3
 8004686:	4413      	add	r3, r2
 8004688:	3361      	adds	r3, #97	; 0x61
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d109      	bne.n	80046a4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	212c      	movs	r1, #44	; 0x2c
 8004696:	fb01 f303 	mul.w	r3, r1, r3
 800469a:	4413      	add	r3, r2
 800469c:	3360      	adds	r3, #96	; 0x60
 800469e:	2201      	movs	r2, #1
 80046a0:	701a      	strb	r2, [r3, #0]
 80046a2:	e0c9      	b.n	8004838 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	212c      	movs	r1, #44	; 0x2c
 80046aa:	fb01 f303 	mul.w	r3, r1, r3
 80046ae:	4413      	add	r3, r2
 80046b0:	3361      	adds	r3, #97	; 0x61
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	2b05      	cmp	r3, #5
 80046b6:	d109      	bne.n	80046cc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	212c      	movs	r1, #44	; 0x2c
 80046be:	fb01 f303 	mul.w	r3, r1, r3
 80046c2:	4413      	add	r3, r2
 80046c4:	3360      	adds	r3, #96	; 0x60
 80046c6:	2205      	movs	r2, #5
 80046c8:	701a      	strb	r2, [r3, #0]
 80046ca:	e0b5      	b.n	8004838 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	212c      	movs	r1, #44	; 0x2c
 80046d2:	fb01 f303 	mul.w	r3, r1, r3
 80046d6:	4413      	add	r3, r2
 80046d8:	3361      	adds	r3, #97	; 0x61
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b06      	cmp	r3, #6
 80046de:	d009      	beq.n	80046f4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	212c      	movs	r1, #44	; 0x2c
 80046e6:	fb01 f303 	mul.w	r3, r1, r3
 80046ea:	4413      	add	r3, r2
 80046ec:	3361      	adds	r3, #97	; 0x61
 80046ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d150      	bne.n	8004796 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	212c      	movs	r1, #44	; 0x2c
 80046fa:	fb01 f303 	mul.w	r3, r1, r3
 80046fe:	4413      	add	r3, r2
 8004700:	335c      	adds	r3, #92	; 0x5c
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	6879      	ldr	r1, [r7, #4]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	202c      	movs	r0, #44	; 0x2c
 800470c:	fb00 f303 	mul.w	r3, r0, r3
 8004710:	440b      	add	r3, r1
 8004712:	335c      	adds	r3, #92	; 0x5c
 8004714:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	212c      	movs	r1, #44	; 0x2c
 800471c:	fb01 f303 	mul.w	r3, r1, r3
 8004720:	4413      	add	r3, r2
 8004722:	335c      	adds	r3, #92	; 0x5c
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d912      	bls.n	8004750 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	212c      	movs	r1, #44	; 0x2c
 8004730:	fb01 f303 	mul.w	r3, r1, r3
 8004734:	4413      	add	r3, r2
 8004736:	335c      	adds	r3, #92	; 0x5c
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	212c      	movs	r1, #44	; 0x2c
 8004742:	fb01 f303 	mul.w	r3, r1, r3
 8004746:	4413      	add	r3, r2
 8004748:	3360      	adds	r3, #96	; 0x60
 800474a:	2204      	movs	r2, #4
 800474c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800474e:	e073      	b.n	8004838 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	212c      	movs	r1, #44	; 0x2c
 8004756:	fb01 f303 	mul.w	r3, r1, r3
 800475a:	4413      	add	r3, r2
 800475c:	3360      	adds	r3, #96	; 0x60
 800475e:	2202      	movs	r2, #2
 8004760:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	4413      	add	r3, r2
 800476a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004778:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004780:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	4413      	add	r3, r2
 800478a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800478e:	461a      	mov	r2, r3
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004794:	e050      	b.n	8004838 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	212c      	movs	r1, #44	; 0x2c
 800479c:	fb01 f303 	mul.w	r3, r1, r3
 80047a0:	4413      	add	r3, r2
 80047a2:	3361      	adds	r3, #97	; 0x61
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	2b03      	cmp	r3, #3
 80047a8:	d122      	bne.n	80047f0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	212c      	movs	r1, #44	; 0x2c
 80047b0:	fb01 f303 	mul.w	r3, r1, r3
 80047b4:	4413      	add	r3, r2
 80047b6:	3360      	adds	r3, #96	; 0x60
 80047b8:	2202      	movs	r2, #2
 80047ba:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047d2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047da:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e8:	461a      	mov	r2, r3
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	e023      	b.n	8004838 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	212c      	movs	r1, #44	; 0x2c
 80047f6:	fb01 f303 	mul.w	r3, r1, r3
 80047fa:	4413      	add	r3, r2
 80047fc:	3361      	adds	r3, #97	; 0x61
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b07      	cmp	r3, #7
 8004802:	d119      	bne.n	8004838 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	212c      	movs	r1, #44	; 0x2c
 800480a:	fb01 f303 	mul.w	r3, r1, r3
 800480e:	4413      	add	r3, r2
 8004810:	335c      	adds	r3, #92	; 0x5c
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	6879      	ldr	r1, [r7, #4]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	202c      	movs	r0, #44	; 0x2c
 800481c:	fb00 f303 	mul.w	r3, r0, r3
 8004820:	440b      	add	r3, r1
 8004822:	335c      	adds	r3, #92	; 0x5c
 8004824:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	212c      	movs	r1, #44	; 0x2c
 800482c:	fb01 f303 	mul.w	r3, r1, r3
 8004830:	4413      	add	r3, r2
 8004832:	3360      	adds	r3, #96	; 0x60
 8004834:	2204      	movs	r2, #4
 8004836:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	4413      	add	r3, r2
 8004840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004844:	461a      	mov	r2, r3
 8004846:	2302      	movs	r3, #2
 8004848:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	b2d9      	uxtb	r1, r3
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	202c      	movs	r0, #44	; 0x2c
 8004854:	fb00 f303 	mul.w	r3, r0, r3
 8004858:	4413      	add	r3, r2
 800485a:	3360      	adds	r3, #96	; 0x60
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f005 f81f 	bl	80098a4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004866:	e061      	b.n	800492c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	4413      	add	r3, r2
 8004870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 0310 	and.w	r3, r3, #16
 800487a:	2b10      	cmp	r3, #16
 800487c:	d156      	bne.n	800492c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	212c      	movs	r1, #44	; 0x2c
 8004884:	fb01 f303 	mul.w	r3, r1, r3
 8004888:	4413      	add	r3, r2
 800488a:	333f      	adds	r3, #63	; 0x3f
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	2b03      	cmp	r3, #3
 8004890:	d111      	bne.n	80048b6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	212c      	movs	r1, #44	; 0x2c
 8004898:	fb01 f303 	mul.w	r3, r1, r3
 800489c:	4413      	add	r3, r2
 800489e:	335c      	adds	r3, #92	; 0x5c
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	4611      	mov	r1, r2
 80048ae:	4618      	mov	r0, r3
 80048b0:	f002 fd55 	bl	800735e <USB_HC_Halt>
 80048b4:	e031      	b.n	800491a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	212c      	movs	r1, #44	; 0x2c
 80048bc:	fb01 f303 	mul.w	r3, r1, r3
 80048c0:	4413      	add	r3, r2
 80048c2:	333f      	adds	r3, #63	; 0x3f
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d009      	beq.n	80048de <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	212c      	movs	r1, #44	; 0x2c
 80048d0:	fb01 f303 	mul.w	r3, r1, r3
 80048d4:	4413      	add	r3, r2
 80048d6:	333f      	adds	r3, #63	; 0x3f
 80048d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d11d      	bne.n	800491a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	212c      	movs	r1, #44	; 0x2c
 80048e4:	fb01 f303 	mul.w	r3, r1, r3
 80048e8:	4413      	add	r3, r2
 80048ea:	335c      	adds	r3, #92	; 0x5c
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d110      	bne.n	800491a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	212c      	movs	r1, #44	; 0x2c
 80048fe:	fb01 f303 	mul.w	r3, r1, r3
 8004902:	4413      	add	r3, r2
 8004904:	3361      	adds	r3, #97	; 0x61
 8004906:	2203      	movs	r2, #3
 8004908:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	b2d2      	uxtb	r2, r2
 8004912:	4611      	mov	r1, r2
 8004914:	4618      	mov	r0, r3
 8004916:	f002 fd22 	bl	800735e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	4413      	add	r3, r2
 8004922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004926:	461a      	mov	r2, r3
 8004928:	2310      	movs	r3, #16
 800492a:	6093      	str	r3, [r2, #8]
}
 800492c:	bf00      	nop
 800492e:	3718      	adds	r7, #24
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b088      	sub	sp, #32
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	460b      	mov	r3, r1
 800493e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800494a:	78fb      	ldrb	r3, [r7, #3]
 800494c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	4413      	add	r3, r2
 8004956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b04      	cmp	r3, #4
 8004962:	d11a      	bne.n	800499a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	015a      	lsls	r2, r3, #5
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	4413      	add	r3, r2
 800496c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004970:	461a      	mov	r2, r3
 8004972:	2304      	movs	r3, #4
 8004974:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	212c      	movs	r1, #44	; 0x2c
 800497c:	fb01 f303 	mul.w	r3, r1, r3
 8004980:	4413      	add	r3, r2
 8004982:	3361      	adds	r3, #97	; 0x61
 8004984:	2206      	movs	r2, #6
 8004986:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	4611      	mov	r1, r2
 8004992:	4618      	mov	r0, r3
 8004994:	f002 fce3 	bl	800735e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004998:	e331      	b.n	8004ffe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f003 0320 	and.w	r3, r3, #32
 80049ac:	2b20      	cmp	r3, #32
 80049ae:	d12e      	bne.n	8004a0e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049bc:	461a      	mov	r2, r3
 80049be:	2320      	movs	r3, #32
 80049c0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	212c      	movs	r1, #44	; 0x2c
 80049c8:	fb01 f303 	mul.w	r3, r1, r3
 80049cc:	4413      	add	r3, r2
 80049ce:	333d      	adds	r3, #61	; 0x3d
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	f040 8313 	bne.w	8004ffe <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	212c      	movs	r1, #44	; 0x2c
 80049de:	fb01 f303 	mul.w	r3, r1, r3
 80049e2:	4413      	add	r3, r2
 80049e4:	333d      	adds	r3, #61	; 0x3d
 80049e6:	2200      	movs	r2, #0
 80049e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	212c      	movs	r1, #44	; 0x2c
 80049f0:	fb01 f303 	mul.w	r3, r1, r3
 80049f4:	4413      	add	r3, r2
 80049f6:	3360      	adds	r3, #96	; 0x60
 80049f8:	2202      	movs	r2, #2
 80049fa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	4611      	mov	r1, r2
 8004a06:	4618      	mov	r0, r3
 8004a08:	f002 fca9 	bl	800735e <USB_HC_Halt>
}
 8004a0c:	e2f7      	b.n	8004ffe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a24:	d112      	bne.n	8004a4c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	015a      	lsls	r2, r3, #5
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a32:	461a      	mov	r2, r3
 8004a34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a38:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	4611      	mov	r1, r2
 8004a44:	4618      	mov	r0, r3
 8004a46:	f002 fc8a 	bl	800735e <USB_HC_Halt>
}
 8004a4a:	e2d8      	b.n	8004ffe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d140      	bne.n	8004ae4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	212c      	movs	r1, #44	; 0x2c
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	335c      	adds	r3, #92	; 0x5c
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a86:	2b40      	cmp	r3, #64	; 0x40
 8004a88:	d111      	bne.n	8004aae <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	212c      	movs	r1, #44	; 0x2c
 8004a90:	fb01 f303 	mul.w	r3, r1, r3
 8004a94:	4413      	add	r3, r2
 8004a96:	333d      	adds	r3, #61	; 0x3d
 8004a98:	2201      	movs	r2, #1
 8004a9a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	2340      	movs	r3, #64	; 0x40
 8004aac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aba:	461a      	mov	r2, r3
 8004abc:	2301      	movs	r3, #1
 8004abe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	212c      	movs	r1, #44	; 0x2c
 8004ac6:	fb01 f303 	mul.w	r3, r1, r3
 8004aca:	4413      	add	r3, r2
 8004acc:	3361      	adds	r3, #97	; 0x61
 8004ace:	2201      	movs	r2, #1
 8004ad0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	b2d2      	uxtb	r2, r2
 8004ada:	4611      	mov	r1, r2
 8004adc:	4618      	mov	r0, r3
 8004ade:	f002 fc3e 	bl	800735e <USB_HC_Halt>
}
 8004ae2:	e28c      	b.n	8004ffe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af6:	2b40      	cmp	r3, #64	; 0x40
 8004af8:	d12c      	bne.n	8004b54 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	212c      	movs	r1, #44	; 0x2c
 8004b00:	fb01 f303 	mul.w	r3, r1, r3
 8004b04:	4413      	add	r3, r2
 8004b06:	3361      	adds	r3, #97	; 0x61
 8004b08:	2204      	movs	r2, #4
 8004b0a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	212c      	movs	r1, #44	; 0x2c
 8004b12:	fb01 f303 	mul.w	r3, r1, r3
 8004b16:	4413      	add	r3, r2
 8004b18:	333d      	adds	r3, #61	; 0x3d
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	212c      	movs	r1, #44	; 0x2c
 8004b24:	fb01 f303 	mul.w	r3, r1, r3
 8004b28:	4413      	add	r3, r2
 8004b2a:	335c      	adds	r3, #92	; 0x5c
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	4611      	mov	r1, r2
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f002 fc0f 	bl	800735e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	2340      	movs	r3, #64	; 0x40
 8004b50:	6093      	str	r3, [r2, #8]
}
 8004b52:	e254      	b.n	8004ffe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 0308 	and.w	r3, r3, #8
 8004b66:	2b08      	cmp	r3, #8
 8004b68:	d11a      	bne.n	8004ba0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b76:	461a      	mov	r2, r3
 8004b78:	2308      	movs	r3, #8
 8004b7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	212c      	movs	r1, #44	; 0x2c
 8004b82:	fb01 f303 	mul.w	r3, r1, r3
 8004b86:	4413      	add	r3, r2
 8004b88:	3361      	adds	r3, #97	; 0x61
 8004b8a:	2205      	movs	r2, #5
 8004b8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	4611      	mov	r1, r2
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f002 fbe0 	bl	800735e <USB_HC_Halt>
}
 8004b9e:	e22e      	b.n	8004ffe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 0310 	and.w	r3, r3, #16
 8004bb2:	2b10      	cmp	r3, #16
 8004bb4:	d140      	bne.n	8004c38 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	212c      	movs	r1, #44	; 0x2c
 8004bbc:	fb01 f303 	mul.w	r3, r1, r3
 8004bc0:	4413      	add	r3, r2
 8004bc2:	335c      	adds	r3, #92	; 0x5c
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	212c      	movs	r1, #44	; 0x2c
 8004bce:	fb01 f303 	mul.w	r3, r1, r3
 8004bd2:	4413      	add	r3, r2
 8004bd4:	3361      	adds	r3, #97	; 0x61
 8004bd6:	2203      	movs	r2, #3
 8004bd8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	212c      	movs	r1, #44	; 0x2c
 8004be0:	fb01 f303 	mul.w	r3, r1, r3
 8004be4:	4413      	add	r3, r2
 8004be6:	333d      	adds	r3, #61	; 0x3d
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d112      	bne.n	8004c14 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	212c      	movs	r1, #44	; 0x2c
 8004bf4:	fb01 f303 	mul.w	r3, r1, r3
 8004bf8:	4413      	add	r3, r2
 8004bfa:	333c      	adds	r3, #60	; 0x3c
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d108      	bne.n	8004c14 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	212c      	movs	r1, #44	; 0x2c
 8004c08:	fb01 f303 	mul.w	r3, r1, r3
 8004c0c:	4413      	add	r3, r2
 8004c0e:	333d      	adds	r3, #61	; 0x3d
 8004c10:	2201      	movs	r2, #1
 8004c12:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	4611      	mov	r1, r2
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f002 fb9d 	bl	800735e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c30:	461a      	mov	r2, r3
 8004c32:	2310      	movs	r3, #16
 8004c34:	6093      	str	r3, [r2, #8]
}
 8004c36:	e1e2      	b.n	8004ffe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4a:	2b80      	cmp	r3, #128	; 0x80
 8004c4c:	d164      	bne.n	8004d18 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d111      	bne.n	8004c7a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	212c      	movs	r1, #44	; 0x2c
 8004c5c:	fb01 f303 	mul.w	r3, r1, r3
 8004c60:	4413      	add	r3, r2
 8004c62:	3361      	adds	r3, #97	; 0x61
 8004c64:	2206      	movs	r2, #6
 8004c66:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	4611      	mov	r1, r2
 8004c72:	4618      	mov	r0, r3
 8004c74:	f002 fb73 	bl	800735e <USB_HC_Halt>
 8004c78:	e044      	b.n	8004d04 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	212c      	movs	r1, #44	; 0x2c
 8004c80:	fb01 f303 	mul.w	r3, r1, r3
 8004c84:	4413      	add	r3, r2
 8004c86:	335c      	adds	r3, #92	; 0x5c
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	1c5a      	adds	r2, r3, #1
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	202c      	movs	r0, #44	; 0x2c
 8004c92:	fb00 f303 	mul.w	r3, r0, r3
 8004c96:	440b      	add	r3, r1
 8004c98:	335c      	adds	r3, #92	; 0x5c
 8004c9a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	212c      	movs	r1, #44	; 0x2c
 8004ca2:	fb01 f303 	mul.w	r3, r1, r3
 8004ca6:	4413      	add	r3, r2
 8004ca8:	335c      	adds	r3, #92	; 0x5c
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d920      	bls.n	8004cf2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	212c      	movs	r1, #44	; 0x2c
 8004cb6:	fb01 f303 	mul.w	r3, r1, r3
 8004cba:	4413      	add	r3, r2
 8004cbc:	335c      	adds	r3, #92	; 0x5c
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	212c      	movs	r1, #44	; 0x2c
 8004cc8:	fb01 f303 	mul.w	r3, r1, r3
 8004ccc:	4413      	add	r3, r2
 8004cce:	3360      	adds	r3, #96	; 0x60
 8004cd0:	2204      	movs	r2, #4
 8004cd2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	b2d9      	uxtb	r1, r3
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	202c      	movs	r0, #44	; 0x2c
 8004cde:	fb00 f303 	mul.w	r3, r0, r3
 8004ce2:	4413      	add	r3, r2
 8004ce4:	3360      	adds	r3, #96	; 0x60
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f004 fdda 	bl	80098a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004cf0:	e008      	b.n	8004d04 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	212c      	movs	r1, #44	; 0x2c
 8004cf8:	fb01 f303 	mul.w	r3, r1, r3
 8004cfc:	4413      	add	r3, r2
 8004cfe:	3360      	adds	r3, #96	; 0x60
 8004d00:	2202      	movs	r2, #2
 8004d02:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	015a      	lsls	r2, r3, #5
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d10:	461a      	mov	r2, r3
 8004d12:	2380      	movs	r3, #128	; 0x80
 8004d14:	6093      	str	r3, [r2, #8]
}
 8004d16:	e172      	b.n	8004ffe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d2e:	d11b      	bne.n	8004d68 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	212c      	movs	r1, #44	; 0x2c
 8004d36:	fb01 f303 	mul.w	r3, r1, r3
 8004d3a:	4413      	add	r3, r2
 8004d3c:	3361      	adds	r3, #97	; 0x61
 8004d3e:	2208      	movs	r2, #8
 8004d40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f002 fb06 	bl	800735e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d64:	6093      	str	r3, [r2, #8]
}
 8004d66:	e14a      	b.n	8004ffe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	f040 813f 	bne.w	8004ffe <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	212c      	movs	r1, #44	; 0x2c
 8004d86:	fb01 f303 	mul.w	r3, r1, r3
 8004d8a:	4413      	add	r3, r2
 8004d8c:	3361      	adds	r3, #97	; 0x61
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d17d      	bne.n	8004e90 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	212c      	movs	r1, #44	; 0x2c
 8004d9a:	fb01 f303 	mul.w	r3, r1, r3
 8004d9e:	4413      	add	r3, r2
 8004da0:	3360      	adds	r3, #96	; 0x60
 8004da2:	2201      	movs	r2, #1
 8004da4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	212c      	movs	r1, #44	; 0x2c
 8004dac:	fb01 f303 	mul.w	r3, r1, r3
 8004db0:	4413      	add	r3, r2
 8004db2:	333f      	adds	r3, #63	; 0x3f
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d00a      	beq.n	8004dd0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	212c      	movs	r1, #44	; 0x2c
 8004dc0:	fb01 f303 	mul.w	r3, r1, r3
 8004dc4:	4413      	add	r3, r2
 8004dc6:	333f      	adds	r3, #63	; 0x3f
 8004dc8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	f040 8100 	bne.w	8004fd0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d113      	bne.n	8004e00 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	212c      	movs	r1, #44	; 0x2c
 8004dde:	fb01 f303 	mul.w	r3, r1, r3
 8004de2:	4413      	add	r3, r2
 8004de4:	3355      	adds	r3, #85	; 0x55
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	f083 0301 	eor.w	r3, r3, #1
 8004dec:	b2d8      	uxtb	r0, r3
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	212c      	movs	r1, #44	; 0x2c
 8004df4:	fb01 f303 	mul.w	r3, r1, r3
 8004df8:	4413      	add	r3, r2
 8004dfa:	3355      	adds	r3, #85	; 0x55
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	f040 80e3 	bne.w	8004fd0 <HCD_HC_OUT_IRQHandler+0x69c>
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	212c      	movs	r1, #44	; 0x2c
 8004e10:	fb01 f303 	mul.w	r3, r1, r3
 8004e14:	4413      	add	r3, r2
 8004e16:	334c      	adds	r3, #76	; 0x4c
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 80d8 	beq.w	8004fd0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	212c      	movs	r1, #44	; 0x2c
 8004e26:	fb01 f303 	mul.w	r3, r1, r3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	334c      	adds	r3, #76	; 0x4c
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6879      	ldr	r1, [r7, #4]
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	202c      	movs	r0, #44	; 0x2c
 8004e36:	fb00 f202 	mul.w	r2, r0, r2
 8004e3a:	440a      	add	r2, r1
 8004e3c:	3240      	adds	r2, #64	; 0x40
 8004e3e:	8812      	ldrh	r2, [r2, #0]
 8004e40:	4413      	add	r3, r2
 8004e42:	3b01      	subs	r3, #1
 8004e44:	6879      	ldr	r1, [r7, #4]
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	202c      	movs	r0, #44	; 0x2c
 8004e4a:	fb00 f202 	mul.w	r2, r0, r2
 8004e4e:	440a      	add	r2, r1
 8004e50:	3240      	adds	r2, #64	; 0x40
 8004e52:	8812      	ldrh	r2, [r2, #0]
 8004e54:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 80b5 	beq.w	8004fd0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	212c      	movs	r1, #44	; 0x2c
 8004e6c:	fb01 f303 	mul.w	r3, r1, r3
 8004e70:	4413      	add	r3, r2
 8004e72:	3355      	adds	r3, #85	; 0x55
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	f083 0301 	eor.w	r3, r3, #1
 8004e7a:	b2d8      	uxtb	r0, r3
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	212c      	movs	r1, #44	; 0x2c
 8004e82:	fb01 f303 	mul.w	r3, r1, r3
 8004e86:	4413      	add	r3, r2
 8004e88:	3355      	adds	r3, #85	; 0x55
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	701a      	strb	r2, [r3, #0]
 8004e8e:	e09f      	b.n	8004fd0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	212c      	movs	r1, #44	; 0x2c
 8004e96:	fb01 f303 	mul.w	r3, r1, r3
 8004e9a:	4413      	add	r3, r2
 8004e9c:	3361      	adds	r3, #97	; 0x61
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	2b03      	cmp	r3, #3
 8004ea2:	d109      	bne.n	8004eb8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	212c      	movs	r1, #44	; 0x2c
 8004eaa:	fb01 f303 	mul.w	r3, r1, r3
 8004eae:	4413      	add	r3, r2
 8004eb0:	3360      	adds	r3, #96	; 0x60
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	701a      	strb	r2, [r3, #0]
 8004eb6:	e08b      	b.n	8004fd0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	212c      	movs	r1, #44	; 0x2c
 8004ebe:	fb01 f303 	mul.w	r3, r1, r3
 8004ec2:	4413      	add	r3, r2
 8004ec4:	3361      	adds	r3, #97	; 0x61
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	2b04      	cmp	r3, #4
 8004eca:	d109      	bne.n	8004ee0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	212c      	movs	r1, #44	; 0x2c
 8004ed2:	fb01 f303 	mul.w	r3, r1, r3
 8004ed6:	4413      	add	r3, r2
 8004ed8:	3360      	adds	r3, #96	; 0x60
 8004eda:	2202      	movs	r2, #2
 8004edc:	701a      	strb	r2, [r3, #0]
 8004ede:	e077      	b.n	8004fd0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	212c      	movs	r1, #44	; 0x2c
 8004ee6:	fb01 f303 	mul.w	r3, r1, r3
 8004eea:	4413      	add	r3, r2
 8004eec:	3361      	adds	r3, #97	; 0x61
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	2b05      	cmp	r3, #5
 8004ef2:	d109      	bne.n	8004f08 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	212c      	movs	r1, #44	; 0x2c
 8004efa:	fb01 f303 	mul.w	r3, r1, r3
 8004efe:	4413      	add	r3, r2
 8004f00:	3360      	adds	r3, #96	; 0x60
 8004f02:	2205      	movs	r2, #5
 8004f04:	701a      	strb	r2, [r3, #0]
 8004f06:	e063      	b.n	8004fd0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	212c      	movs	r1, #44	; 0x2c
 8004f0e:	fb01 f303 	mul.w	r3, r1, r3
 8004f12:	4413      	add	r3, r2
 8004f14:	3361      	adds	r3, #97	; 0x61
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b06      	cmp	r3, #6
 8004f1a:	d009      	beq.n	8004f30 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	212c      	movs	r1, #44	; 0x2c
 8004f22:	fb01 f303 	mul.w	r3, r1, r3
 8004f26:	4413      	add	r3, r2
 8004f28:	3361      	adds	r3, #97	; 0x61
 8004f2a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d14f      	bne.n	8004fd0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	212c      	movs	r1, #44	; 0x2c
 8004f36:	fb01 f303 	mul.w	r3, r1, r3
 8004f3a:	4413      	add	r3, r2
 8004f3c:	335c      	adds	r3, #92	; 0x5c
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	1c5a      	adds	r2, r3, #1
 8004f42:	6879      	ldr	r1, [r7, #4]
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	202c      	movs	r0, #44	; 0x2c
 8004f48:	fb00 f303 	mul.w	r3, r0, r3
 8004f4c:	440b      	add	r3, r1
 8004f4e:	335c      	adds	r3, #92	; 0x5c
 8004f50:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	212c      	movs	r1, #44	; 0x2c
 8004f58:	fb01 f303 	mul.w	r3, r1, r3
 8004f5c:	4413      	add	r3, r2
 8004f5e:	335c      	adds	r3, #92	; 0x5c
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d912      	bls.n	8004f8c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	212c      	movs	r1, #44	; 0x2c
 8004f6c:	fb01 f303 	mul.w	r3, r1, r3
 8004f70:	4413      	add	r3, r2
 8004f72:	335c      	adds	r3, #92	; 0x5c
 8004f74:	2200      	movs	r2, #0
 8004f76:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	212c      	movs	r1, #44	; 0x2c
 8004f7e:	fb01 f303 	mul.w	r3, r1, r3
 8004f82:	4413      	add	r3, r2
 8004f84:	3360      	adds	r3, #96	; 0x60
 8004f86:	2204      	movs	r2, #4
 8004f88:	701a      	strb	r2, [r3, #0]
 8004f8a:	e021      	b.n	8004fd0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	212c      	movs	r1, #44	; 0x2c
 8004f92:	fb01 f303 	mul.w	r3, r1, r3
 8004f96:	4413      	add	r3, r2
 8004f98:	3360      	adds	r3, #96	; 0x60
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fb4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fbc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fca:	461a      	mov	r2, r3
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fdc:	461a      	mov	r2, r3
 8004fde:	2302      	movs	r3, #2
 8004fe0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	b2d9      	uxtb	r1, r3
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	202c      	movs	r0, #44	; 0x2c
 8004fec:	fb00 f303 	mul.w	r3, r0, r3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	3360      	adds	r3, #96	; 0x60
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f004 fc53 	bl	80098a4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004ffe:	bf00      	nop
 8005000:	3720      	adds	r7, #32
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b08a      	sub	sp, #40	; 0x28
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	f003 030f 	and.w	r3, r3, #15
 8005026:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	0c5b      	lsrs	r3, r3, #17
 800502c:	f003 030f 	and.w	r3, r3, #15
 8005030:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	091b      	lsrs	r3, r3, #4
 8005036:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800503a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	2b02      	cmp	r3, #2
 8005040:	d004      	beq.n	800504c <HCD_RXQLVL_IRQHandler+0x46>
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2b05      	cmp	r3, #5
 8005046:	f000 80a9 	beq.w	800519c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800504a:	e0aa      	b.n	80051a2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 80a6 	beq.w	80051a0 <HCD_RXQLVL_IRQHandler+0x19a>
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	212c      	movs	r1, #44	; 0x2c
 800505a:	fb01 f303 	mul.w	r3, r1, r3
 800505e:	4413      	add	r3, r2
 8005060:	3344      	adds	r3, #68	; 0x44
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 809b 	beq.w	80051a0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	212c      	movs	r1, #44	; 0x2c
 8005070:	fb01 f303 	mul.w	r3, r1, r3
 8005074:	4413      	add	r3, r2
 8005076:	3350      	adds	r3, #80	; 0x50
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	441a      	add	r2, r3
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	202c      	movs	r0, #44	; 0x2c
 8005084:	fb00 f303 	mul.w	r3, r0, r3
 8005088:	440b      	add	r3, r1
 800508a:	334c      	adds	r3, #76	; 0x4c
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	429a      	cmp	r2, r3
 8005090:	d87a      	bhi.n	8005188 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6818      	ldr	r0, [r3, #0]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	212c      	movs	r1, #44	; 0x2c
 800509c:	fb01 f303 	mul.w	r3, r1, r3
 80050a0:	4413      	add	r3, r2
 80050a2:	3344      	adds	r3, #68	; 0x44
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	b292      	uxth	r2, r2
 80050aa:	4619      	mov	r1, r3
 80050ac:	f001 fcae 	bl	8006a0c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	212c      	movs	r1, #44	; 0x2c
 80050b6:	fb01 f303 	mul.w	r3, r1, r3
 80050ba:	4413      	add	r3, r2
 80050bc:	3344      	adds	r3, #68	; 0x44
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	441a      	add	r2, r3
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	202c      	movs	r0, #44	; 0x2c
 80050ca:	fb00 f303 	mul.w	r3, r0, r3
 80050ce:	440b      	add	r3, r1
 80050d0:	3344      	adds	r3, #68	; 0x44
 80050d2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	212c      	movs	r1, #44	; 0x2c
 80050da:	fb01 f303 	mul.w	r3, r1, r3
 80050de:	4413      	add	r3, r2
 80050e0:	3350      	adds	r3, #80	; 0x50
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	441a      	add	r2, r3
 80050e8:	6879      	ldr	r1, [r7, #4]
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	202c      	movs	r0, #44	; 0x2c
 80050ee:	fb00 f303 	mul.w	r3, r0, r3
 80050f2:	440b      	add	r3, r1
 80050f4:	3350      	adds	r3, #80	; 0x50
 80050f6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	0cdb      	lsrs	r3, r3, #19
 8005108:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800510c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	212c      	movs	r1, #44	; 0x2c
 8005114:	fb01 f303 	mul.w	r3, r1, r3
 8005118:	4413      	add	r3, r2
 800511a:	3340      	adds	r3, #64	; 0x40
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	461a      	mov	r2, r3
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	4293      	cmp	r3, r2
 8005124:	d13c      	bne.n	80051a0 <HCD_RXQLVL_IRQHandler+0x19a>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d039      	beq.n	80051a0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	4413      	add	r3, r2
 8005134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005142:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800514a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	4413      	add	r3, r2
 8005154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005158:	461a      	mov	r2, r3
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	212c      	movs	r1, #44	; 0x2c
 8005164:	fb01 f303 	mul.w	r3, r1, r3
 8005168:	4413      	add	r3, r2
 800516a:	3354      	adds	r3, #84	; 0x54
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	f083 0301 	eor.w	r3, r3, #1
 8005172:	b2d8      	uxtb	r0, r3
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	212c      	movs	r1, #44	; 0x2c
 800517a:	fb01 f303 	mul.w	r3, r1, r3
 800517e:	4413      	add	r3, r2
 8005180:	3354      	adds	r3, #84	; 0x54
 8005182:	4602      	mov	r2, r0
 8005184:	701a      	strb	r2, [r3, #0]
      break;
 8005186:	e00b      	b.n	80051a0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	212c      	movs	r1, #44	; 0x2c
 800518e:	fb01 f303 	mul.w	r3, r1, r3
 8005192:	4413      	add	r3, r2
 8005194:	3360      	adds	r3, #96	; 0x60
 8005196:	2204      	movs	r2, #4
 8005198:	701a      	strb	r2, [r3, #0]
      break;
 800519a:	e001      	b.n	80051a0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800519c:	bf00      	nop
 800519e:	e000      	b.n	80051a2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80051a0:	bf00      	nop
  }
}
 80051a2:	bf00      	nop
 80051a4:	3728      	adds	r7, #40	; 0x28
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b086      	sub	sp, #24
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80051d6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d10b      	bne.n	80051fa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d102      	bne.n	80051f2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f004 fb3d 	bl	800986c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f043 0302 	orr.w	r3, r3, #2
 80051f8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	2b08      	cmp	r3, #8
 8005202:	d132      	bne.n	800526a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	f043 0308 	orr.w	r3, r3, #8
 800520a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f003 0304 	and.w	r3, r3, #4
 8005212:	2b04      	cmp	r3, #4
 8005214:	d126      	bne.n	8005264 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	2b02      	cmp	r3, #2
 800521c:	d113      	bne.n	8005246 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005224:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005228:	d106      	bne.n	8005238 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2102      	movs	r1, #2
 8005230:	4618      	mov	r0, r3
 8005232:	f001 fd59 	bl	8006ce8 <USB_InitFSLSPClkSel>
 8005236:	e011      	b.n	800525c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2101      	movs	r1, #1
 800523e:	4618      	mov	r0, r3
 8005240:	f001 fd52 	bl	8006ce8 <USB_InitFSLSPClkSel>
 8005244:	e00a      	b.n	800525c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d106      	bne.n	800525c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005254:	461a      	mov	r2, r3
 8005256:	f64e 2360 	movw	r3, #60000	; 0xea60
 800525a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f004 fb2f 	bl	80098c0 <HAL_HCD_PortEnabled_Callback>
 8005262:	e002      	b.n	800526a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f004 fb39 	bl	80098dc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f003 0320 	and.w	r3, r3, #32
 8005270:	2b20      	cmp	r3, #32
 8005272:	d103      	bne.n	800527c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	f043 0320 	orr.w	r3, r3, #32
 800527a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005282:	461a      	mov	r2, r3
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	6013      	str	r3, [r2, #0]
}
 8005288:	bf00      	nop
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e12b      	b.n	80054fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d106      	bne.n	80052bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7fc fc3c 	bl	8001b34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2224      	movs	r2, #36	; 0x24
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 0201 	bic.w	r2, r2, #1
 80052d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80052f4:	f000 fd80 	bl	8005df8 <HAL_RCC_GetPCLK1Freq>
 80052f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	4a81      	ldr	r2, [pc, #516]	; (8005504 <HAL_I2C_Init+0x274>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d807      	bhi.n	8005314 <HAL_I2C_Init+0x84>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4a80      	ldr	r2, [pc, #512]	; (8005508 <HAL_I2C_Init+0x278>)
 8005308:	4293      	cmp	r3, r2
 800530a:	bf94      	ite	ls
 800530c:	2301      	movls	r3, #1
 800530e:	2300      	movhi	r3, #0
 8005310:	b2db      	uxtb	r3, r3
 8005312:	e006      	b.n	8005322 <HAL_I2C_Init+0x92>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4a7d      	ldr	r2, [pc, #500]	; (800550c <HAL_I2C_Init+0x27c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	bf94      	ite	ls
 800531c:	2301      	movls	r3, #1
 800531e:	2300      	movhi	r3, #0
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e0e7      	b.n	80054fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	4a78      	ldr	r2, [pc, #480]	; (8005510 <HAL_I2C_Init+0x280>)
 800532e:	fba2 2303 	umull	r2, r3, r2, r3
 8005332:	0c9b      	lsrs	r3, r3, #18
 8005334:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	430a      	orrs	r2, r1
 8005348:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	4a6a      	ldr	r2, [pc, #424]	; (8005504 <HAL_I2C_Init+0x274>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d802      	bhi.n	8005364 <HAL_I2C_Init+0xd4>
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	3301      	adds	r3, #1
 8005362:	e009      	b.n	8005378 <HAL_I2C_Init+0xe8>
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800536a:	fb02 f303 	mul.w	r3, r2, r3
 800536e:	4a69      	ldr	r2, [pc, #420]	; (8005514 <HAL_I2C_Init+0x284>)
 8005370:	fba2 2303 	umull	r2, r3, r2, r3
 8005374:	099b      	lsrs	r3, r3, #6
 8005376:	3301      	adds	r3, #1
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6812      	ldr	r2, [r2, #0]
 800537c:	430b      	orrs	r3, r1
 800537e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800538a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	495c      	ldr	r1, [pc, #368]	; (8005504 <HAL_I2C_Init+0x274>)
 8005394:	428b      	cmp	r3, r1
 8005396:	d819      	bhi.n	80053cc <HAL_I2C_Init+0x13c>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	1e59      	subs	r1, r3, #1
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80053a6:	1c59      	adds	r1, r3, #1
 80053a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80053ac:	400b      	ands	r3, r1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <HAL_I2C_Init+0x138>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	1e59      	subs	r1, r3, #1
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80053c0:	3301      	adds	r3, #1
 80053c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053c6:	e051      	b.n	800546c <HAL_I2C_Init+0x1dc>
 80053c8:	2304      	movs	r3, #4
 80053ca:	e04f      	b.n	800546c <HAL_I2C_Init+0x1dc>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d111      	bne.n	80053f8 <HAL_I2C_Init+0x168>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	1e58      	subs	r0, r3, #1
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6859      	ldr	r1, [r3, #4]
 80053dc:	460b      	mov	r3, r1
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	440b      	add	r3, r1
 80053e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80053e6:	3301      	adds	r3, #1
 80053e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	bf0c      	ite	eq
 80053f0:	2301      	moveq	r3, #1
 80053f2:	2300      	movne	r3, #0
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	e012      	b.n	800541e <HAL_I2C_Init+0x18e>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	1e58      	subs	r0, r3, #1
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6859      	ldr	r1, [r3, #4]
 8005400:	460b      	mov	r3, r1
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	440b      	add	r3, r1
 8005406:	0099      	lsls	r1, r3, #2
 8005408:	440b      	add	r3, r1
 800540a:	fbb0 f3f3 	udiv	r3, r0, r3
 800540e:	3301      	adds	r3, #1
 8005410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005414:	2b00      	cmp	r3, #0
 8005416:	bf0c      	ite	eq
 8005418:	2301      	moveq	r3, #1
 800541a:	2300      	movne	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <HAL_I2C_Init+0x196>
 8005422:	2301      	movs	r3, #1
 8005424:	e022      	b.n	800546c <HAL_I2C_Init+0x1dc>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10e      	bne.n	800544c <HAL_I2C_Init+0x1bc>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	1e58      	subs	r0, r3, #1
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6859      	ldr	r1, [r3, #4]
 8005436:	460b      	mov	r3, r1
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	440b      	add	r3, r1
 800543c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005440:	3301      	adds	r3, #1
 8005442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800544a:	e00f      	b.n	800546c <HAL_I2C_Init+0x1dc>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	1e58      	subs	r0, r3, #1
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6859      	ldr	r1, [r3, #4]
 8005454:	460b      	mov	r3, r1
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	440b      	add	r3, r1
 800545a:	0099      	lsls	r1, r3, #2
 800545c:	440b      	add	r3, r1
 800545e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005462:	3301      	adds	r3, #1
 8005464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005468:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800546c:	6879      	ldr	r1, [r7, #4]
 800546e:	6809      	ldr	r1, [r1, #0]
 8005470:	4313      	orrs	r3, r2
 8005472:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	69da      	ldr	r2, [r3, #28]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	431a      	orrs	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800549a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	6911      	ldr	r1, [r2, #16]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	68d2      	ldr	r2, [r2, #12]
 80054a6:	4311      	orrs	r1, r2
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6812      	ldr	r2, [r2, #0]
 80054ac:	430b      	orrs	r3, r1
 80054ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	695a      	ldr	r2, [r3, #20]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0201 	orr.w	r2, r2, #1
 80054da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	000186a0 	.word	0x000186a0
 8005508:	001e847f 	.word	0x001e847f
 800550c:	003d08ff 	.word	0x003d08ff
 8005510:	431bde83 	.word	0x431bde83
 8005514:	10624dd3 	.word	0x10624dd3

08005518 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e267      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d075      	beq.n	8005622 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005536:	4b88      	ldr	r3, [pc, #544]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f003 030c 	and.w	r3, r3, #12
 800553e:	2b04      	cmp	r3, #4
 8005540:	d00c      	beq.n	800555c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005542:	4b85      	ldr	r3, [pc, #532]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800554a:	2b08      	cmp	r3, #8
 800554c:	d112      	bne.n	8005574 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800554e:	4b82      	ldr	r3, [pc, #520]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800555a:	d10b      	bne.n	8005574 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800555c:	4b7e      	ldr	r3, [pc, #504]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d05b      	beq.n	8005620 <HAL_RCC_OscConfig+0x108>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d157      	bne.n	8005620 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e242      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800557c:	d106      	bne.n	800558c <HAL_RCC_OscConfig+0x74>
 800557e:	4b76      	ldr	r3, [pc, #472]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a75      	ldr	r2, [pc, #468]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 8005584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005588:	6013      	str	r3, [r2, #0]
 800558a:	e01d      	b.n	80055c8 <HAL_RCC_OscConfig+0xb0>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005594:	d10c      	bne.n	80055b0 <HAL_RCC_OscConfig+0x98>
 8005596:	4b70      	ldr	r3, [pc, #448]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a6f      	ldr	r2, [pc, #444]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 800559c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	4b6d      	ldr	r3, [pc, #436]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a6c      	ldr	r2, [pc, #432]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 80055a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	e00b      	b.n	80055c8 <HAL_RCC_OscConfig+0xb0>
 80055b0:	4b69      	ldr	r3, [pc, #420]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a68      	ldr	r2, [pc, #416]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 80055b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ba:	6013      	str	r3, [r2, #0]
 80055bc:	4b66      	ldr	r3, [pc, #408]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a65      	ldr	r2, [pc, #404]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 80055c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d013      	beq.n	80055f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d0:	f7fc fc48 	bl	8001e64 <HAL_GetTick>
 80055d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055d6:	e008      	b.n	80055ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055d8:	f7fc fc44 	bl	8001e64 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b64      	cmp	r3, #100	; 0x64
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e207      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ea:	4b5b      	ldr	r3, [pc, #364]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d0f0      	beq.n	80055d8 <HAL_RCC_OscConfig+0xc0>
 80055f6:	e014      	b.n	8005622 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f8:	f7fc fc34 	bl	8001e64 <HAL_GetTick>
 80055fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005600:	f7fc fc30 	bl	8001e64 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b64      	cmp	r3, #100	; 0x64
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e1f3      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005612:	4b51      	ldr	r3, [pc, #324]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1f0      	bne.n	8005600 <HAL_RCC_OscConfig+0xe8>
 800561e:	e000      	b.n	8005622 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d063      	beq.n	80056f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800562e:	4b4a      	ldr	r3, [pc, #296]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 030c 	and.w	r3, r3, #12
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00b      	beq.n	8005652 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800563a:	4b47      	ldr	r3, [pc, #284]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005642:	2b08      	cmp	r3, #8
 8005644:	d11c      	bne.n	8005680 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005646:	4b44      	ldr	r3, [pc, #272]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d116      	bne.n	8005680 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005652:	4b41      	ldr	r3, [pc, #260]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d005      	beq.n	800566a <HAL_RCC_OscConfig+0x152>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d001      	beq.n	800566a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e1c7      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800566a:	4b3b      	ldr	r3, [pc, #236]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	4937      	ldr	r1, [pc, #220]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 800567a:	4313      	orrs	r3, r2
 800567c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800567e:	e03a      	b.n	80056f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d020      	beq.n	80056ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005688:	4b34      	ldr	r3, [pc, #208]	; (800575c <HAL_RCC_OscConfig+0x244>)
 800568a:	2201      	movs	r2, #1
 800568c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800568e:	f7fc fbe9 	bl	8001e64 <HAL_GetTick>
 8005692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005694:	e008      	b.n	80056a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005696:	f7fc fbe5 	bl	8001e64 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e1a8      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056a8:	4b2b      	ldr	r3, [pc, #172]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d0f0      	beq.n	8005696 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056b4:	4b28      	ldr	r3, [pc, #160]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	00db      	lsls	r3, r3, #3
 80056c2:	4925      	ldr	r1, [pc, #148]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	600b      	str	r3, [r1, #0]
 80056c8:	e015      	b.n	80056f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056ca:	4b24      	ldr	r3, [pc, #144]	; (800575c <HAL_RCC_OscConfig+0x244>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d0:	f7fc fbc8 	bl	8001e64 <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056d8:	f7fc fbc4 	bl	8001e64 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e187      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ea:	4b1b      	ldr	r3, [pc, #108]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1f0      	bne.n	80056d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0308 	and.w	r3, r3, #8
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d036      	beq.n	8005770 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d016      	beq.n	8005738 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800570a:	4b15      	ldr	r3, [pc, #84]	; (8005760 <HAL_RCC_OscConfig+0x248>)
 800570c:	2201      	movs	r2, #1
 800570e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005710:	f7fc fba8 	bl	8001e64 <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005716:	e008      	b.n	800572a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005718:	f7fc fba4 	bl	8001e64 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b02      	cmp	r3, #2
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e167      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800572a:	4b0b      	ldr	r3, [pc, #44]	; (8005758 <HAL_RCC_OscConfig+0x240>)
 800572c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0f0      	beq.n	8005718 <HAL_RCC_OscConfig+0x200>
 8005736:	e01b      	b.n	8005770 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005738:	4b09      	ldr	r3, [pc, #36]	; (8005760 <HAL_RCC_OscConfig+0x248>)
 800573a:	2200      	movs	r2, #0
 800573c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800573e:	f7fc fb91 	bl	8001e64 <HAL_GetTick>
 8005742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005744:	e00e      	b.n	8005764 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005746:	f7fc fb8d 	bl	8001e64 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d907      	bls.n	8005764 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e150      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
 8005758:	40023800 	.word	0x40023800
 800575c:	42470000 	.word	0x42470000
 8005760:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005764:	4b88      	ldr	r3, [pc, #544]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 8005766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1ea      	bne.n	8005746 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0304 	and.w	r3, r3, #4
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 8097 	beq.w	80058ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800577e:	2300      	movs	r3, #0
 8005780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005782:	4b81      	ldr	r3, [pc, #516]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 8005784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10f      	bne.n	80057ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800578e:	2300      	movs	r3, #0
 8005790:	60bb      	str	r3, [r7, #8]
 8005792:	4b7d      	ldr	r3, [pc, #500]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	4a7c      	ldr	r2, [pc, #496]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 8005798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800579c:	6413      	str	r3, [r2, #64]	; 0x40
 800579e:	4b7a      	ldr	r3, [pc, #488]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057a6:	60bb      	str	r3, [r7, #8]
 80057a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057aa:	2301      	movs	r3, #1
 80057ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ae:	4b77      	ldr	r3, [pc, #476]	; (800598c <HAL_RCC_OscConfig+0x474>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d118      	bne.n	80057ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057ba:	4b74      	ldr	r3, [pc, #464]	; (800598c <HAL_RCC_OscConfig+0x474>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a73      	ldr	r2, [pc, #460]	; (800598c <HAL_RCC_OscConfig+0x474>)
 80057c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057c6:	f7fc fb4d 	bl	8001e64 <HAL_GetTick>
 80057ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057cc:	e008      	b.n	80057e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ce:	f7fc fb49 	bl	8001e64 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d901      	bls.n	80057e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e10c      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057e0:	4b6a      	ldr	r3, [pc, #424]	; (800598c <HAL_RCC_OscConfig+0x474>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0f0      	beq.n	80057ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d106      	bne.n	8005802 <HAL_RCC_OscConfig+0x2ea>
 80057f4:	4b64      	ldr	r3, [pc, #400]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 80057f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f8:	4a63      	ldr	r2, [pc, #396]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 80057fa:	f043 0301 	orr.w	r3, r3, #1
 80057fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005800:	e01c      	b.n	800583c <HAL_RCC_OscConfig+0x324>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	2b05      	cmp	r3, #5
 8005808:	d10c      	bne.n	8005824 <HAL_RCC_OscConfig+0x30c>
 800580a:	4b5f      	ldr	r3, [pc, #380]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 800580c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580e:	4a5e      	ldr	r2, [pc, #376]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 8005810:	f043 0304 	orr.w	r3, r3, #4
 8005814:	6713      	str	r3, [r2, #112]	; 0x70
 8005816:	4b5c      	ldr	r3, [pc, #368]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 8005818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581a:	4a5b      	ldr	r2, [pc, #364]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 800581c:	f043 0301 	orr.w	r3, r3, #1
 8005820:	6713      	str	r3, [r2, #112]	; 0x70
 8005822:	e00b      	b.n	800583c <HAL_RCC_OscConfig+0x324>
 8005824:	4b58      	ldr	r3, [pc, #352]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 8005826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005828:	4a57      	ldr	r2, [pc, #348]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 800582a:	f023 0301 	bic.w	r3, r3, #1
 800582e:	6713      	str	r3, [r2, #112]	; 0x70
 8005830:	4b55      	ldr	r3, [pc, #340]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 8005832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005834:	4a54      	ldr	r2, [pc, #336]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 8005836:	f023 0304 	bic.w	r3, r3, #4
 800583a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d015      	beq.n	8005870 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005844:	f7fc fb0e 	bl	8001e64 <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800584a:	e00a      	b.n	8005862 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800584c:	f7fc fb0a 	bl	8001e64 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	f241 3288 	movw	r2, #5000	; 0x1388
 800585a:	4293      	cmp	r3, r2
 800585c:	d901      	bls.n	8005862 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e0cb      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005862:	4b49      	ldr	r3, [pc, #292]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 8005864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d0ee      	beq.n	800584c <HAL_RCC_OscConfig+0x334>
 800586e:	e014      	b.n	800589a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005870:	f7fc faf8 	bl	8001e64 <HAL_GetTick>
 8005874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005876:	e00a      	b.n	800588e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005878:	f7fc faf4 	bl	8001e64 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	f241 3288 	movw	r2, #5000	; 0x1388
 8005886:	4293      	cmp	r3, r2
 8005888:	d901      	bls.n	800588e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e0b5      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800588e:	4b3e      	ldr	r3, [pc, #248]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 8005890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1ee      	bne.n	8005878 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800589a:	7dfb      	ldrb	r3, [r7, #23]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d105      	bne.n	80058ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058a0:	4b39      	ldr	r3, [pc, #228]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 80058a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a4:	4a38      	ldr	r2, [pc, #224]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 80058a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 80a1 	beq.w	80059f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058b6:	4b34      	ldr	r3, [pc, #208]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 030c 	and.w	r3, r3, #12
 80058be:	2b08      	cmp	r3, #8
 80058c0:	d05c      	beq.n	800597c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d141      	bne.n	800594e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058ca:	4b31      	ldr	r3, [pc, #196]	; (8005990 <HAL_RCC_OscConfig+0x478>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058d0:	f7fc fac8 	bl	8001e64 <HAL_GetTick>
 80058d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058d6:	e008      	b.n	80058ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d8:	f7fc fac4 	bl	8001e64 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d901      	bls.n	80058ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e087      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ea:	4b27      	ldr	r3, [pc, #156]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1f0      	bne.n	80058d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69da      	ldr	r2, [r3, #28]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	019b      	lsls	r3, r3, #6
 8005906:	431a      	orrs	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590c:	085b      	lsrs	r3, r3, #1
 800590e:	3b01      	subs	r3, #1
 8005910:	041b      	lsls	r3, r3, #16
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005918:	061b      	lsls	r3, r3, #24
 800591a:	491b      	ldr	r1, [pc, #108]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 800591c:	4313      	orrs	r3, r2
 800591e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005920:	4b1b      	ldr	r3, [pc, #108]	; (8005990 <HAL_RCC_OscConfig+0x478>)
 8005922:	2201      	movs	r2, #1
 8005924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005926:	f7fc fa9d 	bl	8001e64 <HAL_GetTick>
 800592a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800592c:	e008      	b.n	8005940 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800592e:	f7fc fa99 	bl	8001e64 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b02      	cmp	r3, #2
 800593a:	d901      	bls.n	8005940 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e05c      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005940:	4b11      	ldr	r3, [pc, #68]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0f0      	beq.n	800592e <HAL_RCC_OscConfig+0x416>
 800594c:	e054      	b.n	80059f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800594e:	4b10      	ldr	r3, [pc, #64]	; (8005990 <HAL_RCC_OscConfig+0x478>)
 8005950:	2200      	movs	r2, #0
 8005952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005954:	f7fc fa86 	bl	8001e64 <HAL_GetTick>
 8005958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800595a:	e008      	b.n	800596e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800595c:	f7fc fa82 	bl	8001e64 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b02      	cmp	r3, #2
 8005968:	d901      	bls.n	800596e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e045      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800596e:	4b06      	ldr	r3, [pc, #24]	; (8005988 <HAL_RCC_OscConfig+0x470>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1f0      	bne.n	800595c <HAL_RCC_OscConfig+0x444>
 800597a:	e03d      	b.n	80059f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d107      	bne.n	8005994 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e038      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
 8005988:	40023800 	.word	0x40023800
 800598c:	40007000 	.word	0x40007000
 8005990:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005994:	4b1b      	ldr	r3, [pc, #108]	; (8005a04 <HAL_RCC_OscConfig+0x4ec>)
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d028      	beq.n	80059f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d121      	bne.n	80059f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d11a      	bne.n	80059f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059c4:	4013      	ands	r3, r2
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d111      	bne.n	80059f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059da:	085b      	lsrs	r3, r3, #1
 80059dc:	3b01      	subs	r3, #1
 80059de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d107      	bne.n	80059f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d001      	beq.n	80059f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e000      	b.n	80059fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	40023800 	.word	0x40023800

08005a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e0cc      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a1c:	4b68      	ldr	r3, [pc, #416]	; (8005bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0307 	and.w	r3, r3, #7
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d90c      	bls.n	8005a44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a2a:	4b65      	ldr	r3, [pc, #404]	; (8005bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	b2d2      	uxtb	r2, r2
 8005a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a32:	4b63      	ldr	r3, [pc, #396]	; (8005bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0307 	and.w	r3, r3, #7
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d001      	beq.n	8005a44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e0b8      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d020      	beq.n	8005a92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0304 	and.w	r3, r3, #4
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d005      	beq.n	8005a68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a5c:	4b59      	ldr	r3, [pc, #356]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	4a58      	ldr	r2, [pc, #352]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0308 	and.w	r3, r3, #8
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d005      	beq.n	8005a80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a74:	4b53      	ldr	r3, [pc, #332]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	4a52      	ldr	r2, [pc, #328]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a80:	4b50      	ldr	r3, [pc, #320]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	494d      	ldr	r1, [pc, #308]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d044      	beq.n	8005b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d107      	bne.n	8005ab6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aa6:	4b47      	ldr	r3, [pc, #284]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d119      	bne.n	8005ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e07f      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d003      	beq.n	8005ac6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	d107      	bne.n	8005ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ac6:	4b3f      	ldr	r3, [pc, #252]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d109      	bne.n	8005ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e06f      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ad6:	4b3b      	ldr	r3, [pc, #236]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e067      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ae6:	4b37      	ldr	r3, [pc, #220]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f023 0203 	bic.w	r2, r3, #3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	4934      	ldr	r1, [pc, #208]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005af8:	f7fc f9b4 	bl	8001e64 <HAL_GetTick>
 8005afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005afe:	e00a      	b.n	8005b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b00:	f7fc f9b0 	bl	8001e64 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e04f      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b16:	4b2b      	ldr	r3, [pc, #172]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 020c 	and.w	r2, r3, #12
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d1eb      	bne.n	8005b00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b28:	4b25      	ldr	r3, [pc, #148]	; (8005bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0307 	and.w	r3, r3, #7
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d20c      	bcs.n	8005b50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b36:	4b22      	ldr	r3, [pc, #136]	; (8005bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	b2d2      	uxtb	r2, r2
 8005b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b3e:	4b20      	ldr	r3, [pc, #128]	; (8005bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0307 	and.w	r3, r3, #7
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d001      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e032      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d008      	beq.n	8005b6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b5c:	4b19      	ldr	r3, [pc, #100]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	4916      	ldr	r1, [pc, #88]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0308 	and.w	r3, r3, #8
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d009      	beq.n	8005b8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b7a:	4b12      	ldr	r3, [pc, #72]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	490e      	ldr	r1, [pc, #56]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b8e:	f000 f821 	bl	8005bd4 <HAL_RCC_GetSysClockFreq>
 8005b92:	4602      	mov	r2, r0
 8005b94:	4b0b      	ldr	r3, [pc, #44]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	091b      	lsrs	r3, r3, #4
 8005b9a:	f003 030f 	and.w	r3, r3, #15
 8005b9e:	490a      	ldr	r1, [pc, #40]	; (8005bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005ba0:	5ccb      	ldrb	r3, [r1, r3]
 8005ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba6:	4a09      	ldr	r2, [pc, #36]	; (8005bcc <HAL_RCC_ClockConfig+0x1c4>)
 8005ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005baa:	4b09      	ldr	r3, [pc, #36]	; (8005bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fc f914 	bl	8001ddc <HAL_InitTick>

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	40023c00 	.word	0x40023c00
 8005bc4:	40023800 	.word	0x40023800
 8005bc8:	0800b0cc 	.word	0x0800b0cc
 8005bcc:	20000000 	.word	0x20000000
 8005bd0:	20000004 	.word	0x20000004

08005bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bd8:	b094      	sub	sp, #80	; 0x50
 8005bda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	647b      	str	r3, [r7, #68]	; 0x44
 8005be0:	2300      	movs	r3, #0
 8005be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005be4:	2300      	movs	r3, #0
 8005be6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005be8:	2300      	movs	r3, #0
 8005bea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bec:	4b79      	ldr	r3, [pc, #484]	; (8005dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f003 030c 	and.w	r3, r3, #12
 8005bf4:	2b08      	cmp	r3, #8
 8005bf6:	d00d      	beq.n	8005c14 <HAL_RCC_GetSysClockFreq+0x40>
 8005bf8:	2b08      	cmp	r3, #8
 8005bfa:	f200 80e1 	bhi.w	8005dc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <HAL_RCC_GetSysClockFreq+0x34>
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d003      	beq.n	8005c0e <HAL_RCC_GetSysClockFreq+0x3a>
 8005c06:	e0db      	b.n	8005dc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c08:	4b73      	ldr	r3, [pc, #460]	; (8005dd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c0a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005c0c:	e0db      	b.n	8005dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c0e:	4b73      	ldr	r3, [pc, #460]	; (8005ddc <HAL_RCC_GetSysClockFreq+0x208>)
 8005c10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c12:	e0d8      	b.n	8005dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c14:	4b6f      	ldr	r3, [pc, #444]	; (8005dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c1c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c1e:	4b6d      	ldr	r3, [pc, #436]	; (8005dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d063      	beq.n	8005cf2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c2a:	4b6a      	ldr	r3, [pc, #424]	; (8005dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	099b      	lsrs	r3, r3, #6
 8005c30:	2200      	movs	r2, #0
 8005c32:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c3c:	633b      	str	r3, [r7, #48]	; 0x30
 8005c3e:	2300      	movs	r3, #0
 8005c40:	637b      	str	r3, [r7, #52]	; 0x34
 8005c42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005c46:	4622      	mov	r2, r4
 8005c48:	462b      	mov	r3, r5
 8005c4a:	f04f 0000 	mov.w	r0, #0
 8005c4e:	f04f 0100 	mov.w	r1, #0
 8005c52:	0159      	lsls	r1, r3, #5
 8005c54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c58:	0150      	lsls	r0, r2, #5
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	4621      	mov	r1, r4
 8005c60:	1a51      	subs	r1, r2, r1
 8005c62:	6139      	str	r1, [r7, #16]
 8005c64:	4629      	mov	r1, r5
 8005c66:	eb63 0301 	sbc.w	r3, r3, r1
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	f04f 0200 	mov.w	r2, #0
 8005c70:	f04f 0300 	mov.w	r3, #0
 8005c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c78:	4659      	mov	r1, fp
 8005c7a:	018b      	lsls	r3, r1, #6
 8005c7c:	4651      	mov	r1, sl
 8005c7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c82:	4651      	mov	r1, sl
 8005c84:	018a      	lsls	r2, r1, #6
 8005c86:	4651      	mov	r1, sl
 8005c88:	ebb2 0801 	subs.w	r8, r2, r1
 8005c8c:	4659      	mov	r1, fp
 8005c8e:	eb63 0901 	sbc.w	r9, r3, r1
 8005c92:	f04f 0200 	mov.w	r2, #0
 8005c96:	f04f 0300 	mov.w	r3, #0
 8005c9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ca2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ca6:	4690      	mov	r8, r2
 8005ca8:	4699      	mov	r9, r3
 8005caa:	4623      	mov	r3, r4
 8005cac:	eb18 0303 	adds.w	r3, r8, r3
 8005cb0:	60bb      	str	r3, [r7, #8]
 8005cb2:	462b      	mov	r3, r5
 8005cb4:	eb49 0303 	adc.w	r3, r9, r3
 8005cb8:	60fb      	str	r3, [r7, #12]
 8005cba:	f04f 0200 	mov.w	r2, #0
 8005cbe:	f04f 0300 	mov.w	r3, #0
 8005cc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005cc6:	4629      	mov	r1, r5
 8005cc8:	024b      	lsls	r3, r1, #9
 8005cca:	4621      	mov	r1, r4
 8005ccc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005cd0:	4621      	mov	r1, r4
 8005cd2:	024a      	lsls	r2, r1, #9
 8005cd4:	4610      	mov	r0, r2
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cda:	2200      	movs	r2, #0
 8005cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ce0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ce4:	f7fa ff16 	bl	8000b14 <__aeabi_uldivmod>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	4613      	mov	r3, r2
 8005cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cf0:	e058      	b.n	8005da4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cf2:	4b38      	ldr	r3, [pc, #224]	; (8005dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	099b      	lsrs	r3, r3, #6
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	4611      	mov	r1, r2
 8005cfe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005d02:	623b      	str	r3, [r7, #32]
 8005d04:	2300      	movs	r3, #0
 8005d06:	627b      	str	r3, [r7, #36]	; 0x24
 8005d08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005d0c:	4642      	mov	r2, r8
 8005d0e:	464b      	mov	r3, r9
 8005d10:	f04f 0000 	mov.w	r0, #0
 8005d14:	f04f 0100 	mov.w	r1, #0
 8005d18:	0159      	lsls	r1, r3, #5
 8005d1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d1e:	0150      	lsls	r0, r2, #5
 8005d20:	4602      	mov	r2, r0
 8005d22:	460b      	mov	r3, r1
 8005d24:	4641      	mov	r1, r8
 8005d26:	ebb2 0a01 	subs.w	sl, r2, r1
 8005d2a:	4649      	mov	r1, r9
 8005d2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005d30:	f04f 0200 	mov.w	r2, #0
 8005d34:	f04f 0300 	mov.w	r3, #0
 8005d38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005d3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005d40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005d44:	ebb2 040a 	subs.w	r4, r2, sl
 8005d48:	eb63 050b 	sbc.w	r5, r3, fp
 8005d4c:	f04f 0200 	mov.w	r2, #0
 8005d50:	f04f 0300 	mov.w	r3, #0
 8005d54:	00eb      	lsls	r3, r5, #3
 8005d56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d5a:	00e2      	lsls	r2, r4, #3
 8005d5c:	4614      	mov	r4, r2
 8005d5e:	461d      	mov	r5, r3
 8005d60:	4643      	mov	r3, r8
 8005d62:	18e3      	adds	r3, r4, r3
 8005d64:	603b      	str	r3, [r7, #0]
 8005d66:	464b      	mov	r3, r9
 8005d68:	eb45 0303 	adc.w	r3, r5, r3
 8005d6c:	607b      	str	r3, [r7, #4]
 8005d6e:	f04f 0200 	mov.w	r2, #0
 8005d72:	f04f 0300 	mov.w	r3, #0
 8005d76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d7a:	4629      	mov	r1, r5
 8005d7c:	028b      	lsls	r3, r1, #10
 8005d7e:	4621      	mov	r1, r4
 8005d80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d84:	4621      	mov	r1, r4
 8005d86:	028a      	lsls	r2, r1, #10
 8005d88:	4610      	mov	r0, r2
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d8e:	2200      	movs	r2, #0
 8005d90:	61bb      	str	r3, [r7, #24]
 8005d92:	61fa      	str	r2, [r7, #28]
 8005d94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d98:	f7fa febc 	bl	8000b14 <__aeabi_uldivmod>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	460b      	mov	r3, r1
 8005da0:	4613      	mov	r3, r2
 8005da2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005da4:	4b0b      	ldr	r3, [pc, #44]	; (8005dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	0c1b      	lsrs	r3, r3, #16
 8005daa:	f003 0303 	and.w	r3, r3, #3
 8005dae:	3301      	adds	r3, #1
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005db4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005dbe:	e002      	b.n	8005dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005dc0:	4b05      	ldr	r3, [pc, #20]	; (8005dd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005dc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005dc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3750      	adds	r7, #80	; 0x50
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dd2:	bf00      	nop
 8005dd4:	40023800 	.word	0x40023800
 8005dd8:	00f42400 	.word	0x00f42400
 8005ddc:	007a1200 	.word	0x007a1200

08005de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005de0:	b480      	push	{r7}
 8005de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005de4:	4b03      	ldr	r3, [pc, #12]	; (8005df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005de6:	681b      	ldr	r3, [r3, #0]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	20000000 	.word	0x20000000

08005df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005dfc:	f7ff fff0 	bl	8005de0 <HAL_RCC_GetHCLKFreq>
 8005e00:	4602      	mov	r2, r0
 8005e02:	4b05      	ldr	r3, [pc, #20]	; (8005e18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	0a9b      	lsrs	r3, r3, #10
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	4903      	ldr	r1, [pc, #12]	; (8005e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e0e:	5ccb      	ldrb	r3, [r1, r3]
 8005e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	40023800 	.word	0x40023800
 8005e1c:	0800b0dc 	.word	0x0800b0dc

08005e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e041      	b.n	8005eb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d106      	bne.n	8005e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7fb febc 	bl	8001bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	4610      	mov	r0, r2
 8005e60:	f000 fa98 	bl	8006394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d001      	beq.n	8005ed8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e046      	b.n	8005f66 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a23      	ldr	r2, [pc, #140]	; (8005f74 <HAL_TIM_Base_Start+0xb4>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d022      	beq.n	8005f30 <HAL_TIM_Base_Start+0x70>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ef2:	d01d      	beq.n	8005f30 <HAL_TIM_Base_Start+0x70>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a1f      	ldr	r2, [pc, #124]	; (8005f78 <HAL_TIM_Base_Start+0xb8>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d018      	beq.n	8005f30 <HAL_TIM_Base_Start+0x70>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a1e      	ldr	r2, [pc, #120]	; (8005f7c <HAL_TIM_Base_Start+0xbc>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d013      	beq.n	8005f30 <HAL_TIM_Base_Start+0x70>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a1c      	ldr	r2, [pc, #112]	; (8005f80 <HAL_TIM_Base_Start+0xc0>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d00e      	beq.n	8005f30 <HAL_TIM_Base_Start+0x70>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a1b      	ldr	r2, [pc, #108]	; (8005f84 <HAL_TIM_Base_Start+0xc4>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d009      	beq.n	8005f30 <HAL_TIM_Base_Start+0x70>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a19      	ldr	r2, [pc, #100]	; (8005f88 <HAL_TIM_Base_Start+0xc8>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d004      	beq.n	8005f30 <HAL_TIM_Base_Start+0x70>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a18      	ldr	r2, [pc, #96]	; (8005f8c <HAL_TIM_Base_Start+0xcc>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d111      	bne.n	8005f54 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f003 0307 	and.w	r3, r3, #7
 8005f3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2b06      	cmp	r3, #6
 8005f40:	d010      	beq.n	8005f64 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f042 0201 	orr.w	r2, r2, #1
 8005f50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f52:	e007      	b.n	8005f64 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0201 	orr.w	r2, r2, #1
 8005f62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	40010000 	.word	0x40010000
 8005f78:	40000400 	.word	0x40000400
 8005f7c:	40000800 	.word	0x40000800
 8005f80:	40000c00 	.word	0x40000c00
 8005f84:	40010400 	.word	0x40010400
 8005f88:	40014000 	.word	0x40014000
 8005f8c:	40001800 	.word	0x40001800

08005f90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d122      	bne.n	8005fec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d11b      	bne.n	8005fec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f06f 0202 	mvn.w	r2, #2
 8005fbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	f003 0303 	and.w	r3, r3, #3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f9bf 	bl	8006356 <HAL_TIM_IC_CaptureCallback>
 8005fd8:	e005      	b.n	8005fe6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f9b1 	bl	8006342 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f9c2 	bl	800636a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	f003 0304 	and.w	r3, r3, #4
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d122      	bne.n	8006040 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f003 0304 	and.w	r3, r3, #4
 8006004:	2b04      	cmp	r3, #4
 8006006:	d11b      	bne.n	8006040 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f06f 0204 	mvn.w	r2, #4
 8006010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2202      	movs	r2, #2
 8006016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006022:	2b00      	cmp	r3, #0
 8006024:	d003      	beq.n	800602e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f995 	bl	8006356 <HAL_TIM_IC_CaptureCallback>
 800602c:	e005      	b.n	800603a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f987 	bl	8006342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f998 	bl	800636a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	f003 0308 	and.w	r3, r3, #8
 800604a:	2b08      	cmp	r3, #8
 800604c:	d122      	bne.n	8006094 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f003 0308 	and.w	r3, r3, #8
 8006058:	2b08      	cmp	r3, #8
 800605a:	d11b      	bne.n	8006094 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f06f 0208 	mvn.w	r2, #8
 8006064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2204      	movs	r2, #4
 800606a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	f003 0303 	and.w	r3, r3, #3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f96b 	bl	8006356 <HAL_TIM_IC_CaptureCallback>
 8006080:	e005      	b.n	800608e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f95d 	bl	8006342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f96e 	bl	800636a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	f003 0310 	and.w	r3, r3, #16
 800609e:	2b10      	cmp	r3, #16
 80060a0:	d122      	bne.n	80060e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f003 0310 	and.w	r3, r3, #16
 80060ac:	2b10      	cmp	r3, #16
 80060ae:	d11b      	bne.n	80060e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f06f 0210 	mvn.w	r2, #16
 80060b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2208      	movs	r2, #8
 80060be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d003      	beq.n	80060d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f941 	bl	8006356 <HAL_TIM_IC_CaptureCallback>
 80060d4:	e005      	b.n	80060e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f933 	bl	8006342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 f944 	bl	800636a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d10e      	bne.n	8006114 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f003 0301 	and.w	r3, r3, #1
 8006100:	2b01      	cmp	r3, #1
 8006102:	d107      	bne.n	8006114 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f06f 0201 	mvn.w	r2, #1
 800610c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f90d 	bl	800632e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800611e:	2b80      	cmp	r3, #128	; 0x80
 8006120:	d10e      	bne.n	8006140 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612c:	2b80      	cmp	r3, #128	; 0x80
 800612e:	d107      	bne.n	8006140 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 faea 	bl	8006714 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614a:	2b40      	cmp	r3, #64	; 0x40
 800614c:	d10e      	bne.n	800616c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006158:	2b40      	cmp	r3, #64	; 0x40
 800615a:	d107      	bne.n	800616c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f909 	bl	800637e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	f003 0320 	and.w	r3, r3, #32
 8006176:	2b20      	cmp	r3, #32
 8006178:	d10e      	bne.n	8006198 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	f003 0320 	and.w	r3, r3, #32
 8006184:	2b20      	cmp	r3, #32
 8006186:	d107      	bne.n	8006198 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f06f 0220 	mvn.w	r2, #32
 8006190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fab4 	bl	8006700 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006198:	bf00      	nop
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061aa:	2300      	movs	r3, #0
 80061ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d101      	bne.n	80061bc <HAL_TIM_ConfigClockSource+0x1c>
 80061b8:	2302      	movs	r3, #2
 80061ba:	e0b4      	b.n	8006326 <HAL_TIM_ConfigClockSource+0x186>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80061da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061f4:	d03e      	beq.n	8006274 <HAL_TIM_ConfigClockSource+0xd4>
 80061f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061fa:	f200 8087 	bhi.w	800630c <HAL_TIM_ConfigClockSource+0x16c>
 80061fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006202:	f000 8086 	beq.w	8006312 <HAL_TIM_ConfigClockSource+0x172>
 8006206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800620a:	d87f      	bhi.n	800630c <HAL_TIM_ConfigClockSource+0x16c>
 800620c:	2b70      	cmp	r3, #112	; 0x70
 800620e:	d01a      	beq.n	8006246 <HAL_TIM_ConfigClockSource+0xa6>
 8006210:	2b70      	cmp	r3, #112	; 0x70
 8006212:	d87b      	bhi.n	800630c <HAL_TIM_ConfigClockSource+0x16c>
 8006214:	2b60      	cmp	r3, #96	; 0x60
 8006216:	d050      	beq.n	80062ba <HAL_TIM_ConfigClockSource+0x11a>
 8006218:	2b60      	cmp	r3, #96	; 0x60
 800621a:	d877      	bhi.n	800630c <HAL_TIM_ConfigClockSource+0x16c>
 800621c:	2b50      	cmp	r3, #80	; 0x50
 800621e:	d03c      	beq.n	800629a <HAL_TIM_ConfigClockSource+0xfa>
 8006220:	2b50      	cmp	r3, #80	; 0x50
 8006222:	d873      	bhi.n	800630c <HAL_TIM_ConfigClockSource+0x16c>
 8006224:	2b40      	cmp	r3, #64	; 0x40
 8006226:	d058      	beq.n	80062da <HAL_TIM_ConfigClockSource+0x13a>
 8006228:	2b40      	cmp	r3, #64	; 0x40
 800622a:	d86f      	bhi.n	800630c <HAL_TIM_ConfigClockSource+0x16c>
 800622c:	2b30      	cmp	r3, #48	; 0x30
 800622e:	d064      	beq.n	80062fa <HAL_TIM_ConfigClockSource+0x15a>
 8006230:	2b30      	cmp	r3, #48	; 0x30
 8006232:	d86b      	bhi.n	800630c <HAL_TIM_ConfigClockSource+0x16c>
 8006234:	2b20      	cmp	r3, #32
 8006236:	d060      	beq.n	80062fa <HAL_TIM_ConfigClockSource+0x15a>
 8006238:	2b20      	cmp	r3, #32
 800623a:	d867      	bhi.n	800630c <HAL_TIM_ConfigClockSource+0x16c>
 800623c:	2b00      	cmp	r3, #0
 800623e:	d05c      	beq.n	80062fa <HAL_TIM_ConfigClockSource+0x15a>
 8006240:	2b10      	cmp	r3, #16
 8006242:	d05a      	beq.n	80062fa <HAL_TIM_ConfigClockSource+0x15a>
 8006244:	e062      	b.n	800630c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6818      	ldr	r0, [r3, #0]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	6899      	ldr	r1, [r3, #8]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f000 f9b7 	bl	80065c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006268:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	609a      	str	r2, [r3, #8]
      break;
 8006272:	e04f      	b.n	8006314 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6818      	ldr	r0, [r3, #0]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	6899      	ldr	r1, [r3, #8]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	f000 f9a0 	bl	80065c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689a      	ldr	r2, [r3, #8]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006296:	609a      	str	r2, [r3, #8]
      break;
 8006298:	e03c      	b.n	8006314 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6818      	ldr	r0, [r3, #0]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	6859      	ldr	r1, [r3, #4]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	461a      	mov	r2, r3
 80062a8:	f000 f914 	bl	80064d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2150      	movs	r1, #80	; 0x50
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 f96d 	bl	8006592 <TIM_ITRx_SetConfig>
      break;
 80062b8:	e02c      	b.n	8006314 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6818      	ldr	r0, [r3, #0]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	6859      	ldr	r1, [r3, #4]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	461a      	mov	r2, r3
 80062c8:	f000 f933 	bl	8006532 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2160      	movs	r1, #96	; 0x60
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 f95d 	bl	8006592 <TIM_ITRx_SetConfig>
      break;
 80062d8:	e01c      	b.n	8006314 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6818      	ldr	r0, [r3, #0]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	6859      	ldr	r1, [r3, #4]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	461a      	mov	r2, r3
 80062e8:	f000 f8f4 	bl	80064d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2140      	movs	r1, #64	; 0x40
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 f94d 	bl	8006592 <TIM_ITRx_SetConfig>
      break;
 80062f8:	e00c      	b.n	8006314 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4619      	mov	r1, r3
 8006304:	4610      	mov	r0, r2
 8006306:	f000 f944 	bl	8006592 <TIM_ITRx_SetConfig>
      break;
 800630a:	e003      	b.n	8006314 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	73fb      	strb	r3, [r7, #15]
      break;
 8006310:	e000      	b.n	8006314 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006312:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006324:	7bfb      	ldrb	r3, [r7, #15]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800632e:	b480      	push	{r7}
 8006330:	b083      	sub	sp, #12
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006336:	bf00      	nop
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006342:	b480      	push	{r7}
 8006344:	b083      	sub	sp, #12
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800634a:	bf00      	nop
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006356:	b480      	push	{r7}
 8006358:	b083      	sub	sp, #12
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800635e:	bf00      	nop
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800636a:	b480      	push	{r7}
 800636c:	b083      	sub	sp, #12
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006372:	bf00      	nop
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800637e:	b480      	push	{r7}
 8006380:	b083      	sub	sp, #12
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006386:	bf00      	nop
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
	...

08006394 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a40      	ldr	r2, [pc, #256]	; (80064a8 <TIM_Base_SetConfig+0x114>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d013      	beq.n	80063d4 <TIM_Base_SetConfig+0x40>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b2:	d00f      	beq.n	80063d4 <TIM_Base_SetConfig+0x40>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a3d      	ldr	r2, [pc, #244]	; (80064ac <TIM_Base_SetConfig+0x118>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d00b      	beq.n	80063d4 <TIM_Base_SetConfig+0x40>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a3c      	ldr	r2, [pc, #240]	; (80064b0 <TIM_Base_SetConfig+0x11c>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d007      	beq.n	80063d4 <TIM_Base_SetConfig+0x40>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a3b      	ldr	r2, [pc, #236]	; (80064b4 <TIM_Base_SetConfig+0x120>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d003      	beq.n	80063d4 <TIM_Base_SetConfig+0x40>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a3a      	ldr	r2, [pc, #232]	; (80064b8 <TIM_Base_SetConfig+0x124>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d108      	bne.n	80063e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a2f      	ldr	r2, [pc, #188]	; (80064a8 <TIM_Base_SetConfig+0x114>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d02b      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063f4:	d027      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a2c      	ldr	r2, [pc, #176]	; (80064ac <TIM_Base_SetConfig+0x118>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d023      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a2b      	ldr	r2, [pc, #172]	; (80064b0 <TIM_Base_SetConfig+0x11c>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d01f      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a2a      	ldr	r2, [pc, #168]	; (80064b4 <TIM_Base_SetConfig+0x120>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d01b      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a29      	ldr	r2, [pc, #164]	; (80064b8 <TIM_Base_SetConfig+0x124>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d017      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a28      	ldr	r2, [pc, #160]	; (80064bc <TIM_Base_SetConfig+0x128>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d013      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a27      	ldr	r2, [pc, #156]	; (80064c0 <TIM_Base_SetConfig+0x12c>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d00f      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a26      	ldr	r2, [pc, #152]	; (80064c4 <TIM_Base_SetConfig+0x130>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d00b      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a25      	ldr	r2, [pc, #148]	; (80064c8 <TIM_Base_SetConfig+0x134>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d007      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a24      	ldr	r2, [pc, #144]	; (80064cc <TIM_Base_SetConfig+0x138>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d003      	beq.n	8006446 <TIM_Base_SetConfig+0xb2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a23      	ldr	r2, [pc, #140]	; (80064d0 <TIM_Base_SetConfig+0x13c>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d108      	bne.n	8006458 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800644c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	4313      	orrs	r3, r2
 8006456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	4313      	orrs	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	689a      	ldr	r2, [r3, #8]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a0a      	ldr	r2, [pc, #40]	; (80064a8 <TIM_Base_SetConfig+0x114>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d003      	beq.n	800648c <TIM_Base_SetConfig+0xf8>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a0c      	ldr	r2, [pc, #48]	; (80064b8 <TIM_Base_SetConfig+0x124>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d103      	bne.n	8006494 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	691a      	ldr	r2, [r3, #16]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	615a      	str	r2, [r3, #20]
}
 800649a:	bf00      	nop
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	40010000 	.word	0x40010000
 80064ac:	40000400 	.word	0x40000400
 80064b0:	40000800 	.word	0x40000800
 80064b4:	40000c00 	.word	0x40000c00
 80064b8:	40010400 	.word	0x40010400
 80064bc:	40014000 	.word	0x40014000
 80064c0:	40014400 	.word	0x40014400
 80064c4:	40014800 	.word	0x40014800
 80064c8:	40001800 	.word	0x40001800
 80064cc:	40001c00 	.word	0x40001c00
 80064d0:	40002000 	.word	0x40002000

080064d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	f023 0201 	bic.w	r2, r3, #1
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	011b      	lsls	r3, r3, #4
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	4313      	orrs	r3, r2
 8006508:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f023 030a 	bic.w	r3, r3, #10
 8006510:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	4313      	orrs	r3, r2
 8006518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	621a      	str	r2, [r3, #32]
}
 8006526:	bf00      	nop
 8006528:	371c      	adds	r7, #28
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006532:	b480      	push	{r7}
 8006534:	b087      	sub	sp, #28
 8006536:	af00      	add	r7, sp, #0
 8006538:	60f8      	str	r0, [r7, #12]
 800653a:	60b9      	str	r1, [r7, #8]
 800653c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	f023 0210 	bic.w	r2, r3, #16
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800655c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	031b      	lsls	r3, r3, #12
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	4313      	orrs	r3, r2
 8006566:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800656e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	011b      	lsls	r3, r3, #4
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	4313      	orrs	r3, r2
 8006578:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	621a      	str	r2, [r3, #32]
}
 8006586:	bf00      	nop
 8006588:	371c      	adds	r7, #28
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006592:	b480      	push	{r7}
 8006594:	b085      	sub	sp, #20
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065aa:	683a      	ldr	r2, [r7, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	f043 0307 	orr.w	r3, r3, #7
 80065b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	609a      	str	r2, [r3, #8]
}
 80065bc:	bf00      	nop
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
 80065d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	021a      	lsls	r2, r3, #8
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	431a      	orrs	r2, r3
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	609a      	str	r2, [r3, #8]
}
 80065fc:	bf00      	nop
 80065fe:	371c      	adds	r7, #28
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006618:	2b01      	cmp	r3, #1
 800661a:	d101      	bne.n	8006620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800661c:	2302      	movs	r3, #2
 800661e:	e05a      	b.n	80066d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006646:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	4313      	orrs	r3, r2
 8006650:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a21      	ldr	r2, [pc, #132]	; (80066e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d022      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800666c:	d01d      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a1d      	ldr	r2, [pc, #116]	; (80066e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d018      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a1b      	ldr	r2, [pc, #108]	; (80066ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d013      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a1a      	ldr	r2, [pc, #104]	; (80066f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d00e      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a18      	ldr	r2, [pc, #96]	; (80066f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d009      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a17      	ldr	r2, [pc, #92]	; (80066f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d004      	beq.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a15      	ldr	r2, [pc, #84]	; (80066fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d10c      	bne.n	80066c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	40010000 	.word	0x40010000
 80066e8:	40000400 	.word	0x40000400
 80066ec:	40000800 	.word	0x40000800
 80066f0:	40000c00 	.word	0x40000c00
 80066f4:	40010400 	.word	0x40010400
 80066f8:	40014000 	.word	0x40014000
 80066fc:	40001800 	.word	0x40001800

08006700 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006728:	b084      	sub	sp, #16
 800672a:	b580      	push	{r7, lr}
 800672c:	b084      	sub	sp, #16
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
 8006732:	f107 001c 	add.w	r0, r7, #28
 8006736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800673a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673c:	2b01      	cmp	r3, #1
 800673e:	d122      	bne.n	8006786 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006744:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006754:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800676a:	2b01      	cmp	r3, #1
 800676c:	d105      	bne.n	800677a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f9c0 	bl	8006b00 <USB_CoreReset>
 8006780:	4603      	mov	r3, r0
 8006782:	73fb      	strb	r3, [r7, #15]
 8006784:	e01a      	b.n	80067bc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f9b4 	bl	8006b00 <USB_CoreReset>
 8006798:	4603      	mov	r3, r0
 800679a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800679c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d106      	bne.n	80067b0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	639a      	str	r2, [r3, #56]	; 0x38
 80067ae:	e005      	b.n	80067bc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80067bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d10b      	bne.n	80067da <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f043 0206 	orr.w	r2, r3, #6
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f043 0220 	orr.w	r2, r3, #32
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80067da:	7bfb      	ldrb	r3, [r7, #15]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067e6:	b004      	add	sp, #16
 80067e8:	4770      	bx	lr

080067ea <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b083      	sub	sp, #12
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f043 0201 	orr.w	r2, r3, #1
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f023 0201 	bic.w	r2, r3, #1
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	460b      	mov	r3, r1
 8006838:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800684a:	78fb      	ldrb	r3, [r7, #3]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d115      	bne.n	800687c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800685c:	2001      	movs	r0, #1
 800685e:	f7fb fb0d 	bl	8001e7c <HAL_Delay>
      ms++;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	3301      	adds	r3, #1
 8006866:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 f93a 	bl	8006ae2 <USB_GetMode>
 800686e:	4603      	mov	r3, r0
 8006870:	2b01      	cmp	r3, #1
 8006872:	d01e      	beq.n	80068b2 <USB_SetCurrentMode+0x84>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2b31      	cmp	r3, #49	; 0x31
 8006878:	d9f0      	bls.n	800685c <USB_SetCurrentMode+0x2e>
 800687a:	e01a      	b.n	80068b2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800687c:	78fb      	ldrb	r3, [r7, #3]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d115      	bne.n	80068ae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800688e:	2001      	movs	r0, #1
 8006890:	f7fb faf4 	bl	8001e7c <HAL_Delay>
      ms++;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	3301      	adds	r3, #1
 8006898:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f921 	bl	8006ae2 <USB_GetMode>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d005      	beq.n	80068b2 <USB_SetCurrentMode+0x84>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2b31      	cmp	r3, #49	; 0x31
 80068aa:	d9f0      	bls.n	800688e <USB_SetCurrentMode+0x60>
 80068ac:	e001      	b.n	80068b2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e005      	b.n	80068be <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2b32      	cmp	r3, #50	; 0x32
 80068b6:	d101      	bne.n	80068bc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e000      	b.n	80068be <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
	...

080068c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80068d2:	2300      	movs	r3, #0
 80068d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	3301      	adds	r3, #1
 80068da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4a13      	ldr	r2, [pc, #76]	; (800692c <USB_FlushTxFifo+0x64>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d901      	bls.n	80068e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e01b      	b.n	8006920 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	daf2      	bge.n	80068d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80068f0:	2300      	movs	r3, #0
 80068f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	019b      	lsls	r3, r3, #6
 80068f8:	f043 0220 	orr.w	r2, r3, #32
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	3301      	adds	r3, #1
 8006904:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	4a08      	ldr	r2, [pc, #32]	; (800692c <USB_FlushTxFifo+0x64>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d901      	bls.n	8006912 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e006      	b.n	8006920 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	f003 0320 	and.w	r3, r3, #32
 800691a:	2b20      	cmp	r3, #32
 800691c:	d0f0      	beq.n	8006900 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	00030d40 	.word	0x00030d40

08006930 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006938:	2300      	movs	r3, #0
 800693a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	3301      	adds	r3, #1
 8006940:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	4a11      	ldr	r2, [pc, #68]	; (800698c <USB_FlushRxFifo+0x5c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d901      	bls.n	800694e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e018      	b.n	8006980 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	2b00      	cmp	r3, #0
 8006954:	daf2      	bge.n	800693c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006956:	2300      	movs	r3, #0
 8006958:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2210      	movs	r2, #16
 800695e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	3301      	adds	r3, #1
 8006964:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	4a08      	ldr	r2, [pc, #32]	; (800698c <USB_FlushRxFifo+0x5c>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d901      	bls.n	8006972 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e006      	b.n	8006980 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	f003 0310 	and.w	r3, r3, #16
 800697a:	2b10      	cmp	r3, #16
 800697c:	d0f0      	beq.n	8006960 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3714      	adds	r7, #20
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	00030d40 	.word	0x00030d40

08006990 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006990:	b480      	push	{r7}
 8006992:	b089      	sub	sp, #36	; 0x24
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	4611      	mov	r1, r2
 800699c:	461a      	mov	r2, r3
 800699e:	460b      	mov	r3, r1
 80069a0:	71fb      	strb	r3, [r7, #7]
 80069a2:	4613      	mov	r3, r2
 80069a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80069ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d123      	bne.n	80069fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80069b6:	88bb      	ldrh	r3, [r7, #4]
 80069b8:	3303      	adds	r3, #3
 80069ba:	089b      	lsrs	r3, r3, #2
 80069bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80069be:	2300      	movs	r3, #0
 80069c0:	61bb      	str	r3, [r7, #24]
 80069c2:	e018      	b.n	80069f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80069c4:	79fb      	ldrb	r3, [r7, #7]
 80069c6:	031a      	lsls	r2, r3, #12
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069d0:	461a      	mov	r2, r3
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	3301      	adds	r3, #1
 80069dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	3301      	adds	r3, #1
 80069e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	3301      	adds	r3, #1
 80069e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	3301      	adds	r3, #1
 80069ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	3301      	adds	r3, #1
 80069f4:	61bb      	str	r3, [r7, #24]
 80069f6:	69ba      	ldr	r2, [r7, #24]
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d3e2      	bcc.n	80069c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3724      	adds	r7, #36	; 0x24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b08b      	sub	sp, #44	; 0x2c
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	4613      	mov	r3, r2
 8006a18:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006a22:	88fb      	ldrh	r3, [r7, #6]
 8006a24:	089b      	lsrs	r3, r3, #2
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006a2a:	88fb      	ldrh	r3, [r7, #6]
 8006a2c:	f003 0303 	and.w	r3, r3, #3
 8006a30:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006a32:	2300      	movs	r3, #0
 8006a34:	623b      	str	r3, [r7, #32]
 8006a36:	e014      	b.n	8006a62 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	601a      	str	r2, [r3, #0]
    pDest++;
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	3301      	adds	r3, #1
 8006a48:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	3301      	adds	r3, #1
 8006a54:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a58:	3301      	adds	r3, #1
 8006a5a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	623b      	str	r3, [r7, #32]
 8006a62:	6a3a      	ldr	r2, [r7, #32]
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d3e6      	bcc.n	8006a38 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006a6a:	8bfb      	ldrh	r3, [r7, #30]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d01e      	beq.n	8006aae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006a70:	2300      	movs	r3, #0
 8006a72:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	f107 0310 	add.w	r3, r7, #16
 8006a80:	6812      	ldr	r2, [r2, #0]
 8006a82:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	00db      	lsls	r3, r3, #3
 8006a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a90:	b2da      	uxtb	r2, r3
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	701a      	strb	r2, [r3, #0]
      i++;
 8006a96:	6a3b      	ldr	r3, [r7, #32]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	623b      	str	r3, [r7, #32]
      pDest++;
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006aa2:	8bfb      	ldrh	r3, [r7, #30]
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006aa8:	8bfb      	ldrh	r3, [r7, #30]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1ea      	bne.n	8006a84 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	372c      	adds	r7, #44	; 0x2c
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b083      	sub	sp, #12
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	f003 0301 	and.w	r3, r3, #1
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
	...

08006b00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4a13      	ldr	r2, [pc, #76]	; (8006b64 <USB_CoreReset+0x64>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d901      	bls.n	8006b1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e01b      	b.n	8006b56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	daf2      	bge.n	8006b0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b26:	2300      	movs	r3, #0
 8006b28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	f043 0201 	orr.w	r2, r3, #1
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	4a09      	ldr	r2, [pc, #36]	; (8006b64 <USB_CoreReset+0x64>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d901      	bls.n	8006b48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e006      	b.n	8006b56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	f003 0301 	and.w	r3, r3, #1
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d0f0      	beq.n	8006b36 <USB_CoreReset+0x36>

  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3714      	adds	r7, #20
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	00030d40 	.word	0x00030d40

08006b68 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b68:	b084      	sub	sp, #16
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b086      	sub	sp, #24
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b88:	461a      	mov	r2, r3
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006baa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d018      	beq.n	8006bf0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d10a      	bne.n	8006bda <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006bd2:	f043 0304 	orr.w	r3, r3, #4
 8006bd6:	6013      	str	r3, [r2, #0]
 8006bd8:	e014      	b.n	8006c04 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006be8:	f023 0304 	bic.w	r3, r3, #4
 8006bec:	6013      	str	r3, [r2, #0]
 8006bee:	e009      	b.n	8006c04 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006bfe:	f023 0304 	bic.w	r3, r3, #4
 8006c02:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c04:	2110      	movs	r1, #16
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f7ff fe5e 	bl	80068c8 <USB_FlushTxFifo>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7ff fe8a 	bl	8006930 <USB_FlushRxFifo>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006c26:	2300      	movs	r3, #0
 8006c28:	613b      	str	r3, [r7, #16]
 8006c2a:	e015      	b.n	8006c58 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c38:	461a      	mov	r2, r3
 8006c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c3e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	2300      	movs	r3, #0
 8006c50:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	3301      	adds	r3, #1
 8006c56:	613b      	str	r3, [r7, #16]
 8006c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5a:	693a      	ldr	r2, [r7, #16]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d3e5      	bcc.n	8006c2c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f04f 32ff 	mov.w	r2, #4294967295
 8006c6c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00b      	beq.n	8006c92 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c80:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a13      	ldr	r2, [pc, #76]	; (8006cd4 <USB_HostInit+0x16c>)
 8006c86:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a13      	ldr	r2, [pc, #76]	; (8006cd8 <USB_HostInit+0x170>)
 8006c8c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006c90:	e009      	b.n	8006ca6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2280      	movs	r2, #128	; 0x80
 8006c96:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a10      	ldr	r2, [pc, #64]	; (8006cdc <USB_HostInit+0x174>)
 8006c9c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a0f      	ldr	r2, [pc, #60]	; (8006ce0 <USB_HostInit+0x178>)
 8006ca2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d105      	bne.n	8006cb8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	f043 0210 	orr.w	r2, r3, #16
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	699a      	ldr	r2, [r3, #24]
 8006cbc:	4b09      	ldr	r3, [pc, #36]	; (8006ce4 <USB_HostInit+0x17c>)
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3718      	adds	r7, #24
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cd0:	b004      	add	sp, #16
 8006cd2:	4770      	bx	lr
 8006cd4:	01000200 	.word	0x01000200
 8006cd8:	00e00300 	.word	0x00e00300
 8006cdc:	00600080 	.word	0x00600080
 8006ce0:	004000e0 	.word	0x004000e0
 8006ce4:	a3200008 	.word	0xa3200008

08006ce8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d06:	f023 0303 	bic.w	r3, r3, #3
 8006d0a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	78fb      	ldrb	r3, [r7, #3]
 8006d16:	f003 0303 	and.w	r3, r3, #3
 8006d1a:	68f9      	ldr	r1, [r7, #12]
 8006d1c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006d20:	4313      	orrs	r3, r2
 8006d22:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006d24:	78fb      	ldrb	r3, [r7, #3]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d107      	bne.n	8006d3a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d30:	461a      	mov	r2, r3
 8006d32:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006d36:	6053      	str	r3, [r2, #4]
 8006d38:	e009      	b.n	8006d4e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006d3a:	78fb      	ldrb	r3, [r7, #3]
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d106      	bne.n	8006d4e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d46:	461a      	mov	r2, r3
 8006d48:	f241 7370 	movw	r3, #6000	; 0x1770
 8006d4c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3714      	adds	r7, #20
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006d7c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d8a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006d8c:	2064      	movs	r0, #100	; 0x64
 8006d8e:	f7fb f875 	bl	8001e7c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006d9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d9e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006da0:	200a      	movs	r0, #10
 8006da2:	f7fb f86b 	bl	8001e7c <HAL_Delay>

  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	460b      	mov	r3, r1
 8006dba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006dd4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d109      	bne.n	8006df4 <USB_DriveVbus+0x44>
 8006de0:	78fb      	ldrb	r3, [r7, #3]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d106      	bne.n	8006df4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006dee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006df2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dfe:	d109      	bne.n	8006e14 <USB_DriveVbus+0x64>
 8006e00:	78fb      	ldrb	r3, [r7, #3]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d106      	bne.n	8006e14 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006e0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e12:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3714      	adds	r7, #20
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006e22:	b480      	push	{r7}
 8006e24:	b085      	sub	sp, #20
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	0c5b      	lsrs	r3, r3, #17
 8006e40:	f003 0303 	and.w	r3, r3, #3
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	b29b      	uxth	r3, r3
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
	...

08006e74 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b088      	sub	sp, #32
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	4608      	mov	r0, r1
 8006e7e:	4611      	mov	r1, r2
 8006e80:	461a      	mov	r2, r3
 8006e82:	4603      	mov	r3, r0
 8006e84:	70fb      	strb	r3, [r7, #3]
 8006e86:	460b      	mov	r3, r1
 8006e88:	70bb      	strb	r3, [r7, #2]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006e96:	78fb      	ldrb	r3, [r7, #3]
 8006e98:	015a      	lsls	r2, r3, #5
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006eaa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	d87e      	bhi.n	8006fb0 <USB_HC_Init+0x13c>
 8006eb2:	a201      	add	r2, pc, #4	; (adr r2, 8006eb8 <USB_HC_Init+0x44>)
 8006eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb8:	08006ec9 	.word	0x08006ec9
 8006ebc:	08006f73 	.word	0x08006f73
 8006ec0:	08006ec9 	.word	0x08006ec9
 8006ec4:	08006f35 	.word	0x08006f35
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006ec8:	78fb      	ldrb	r3, [r7, #3]
 8006eca:	015a      	lsls	r2, r3, #5
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	4413      	add	r3, r2
 8006ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	f240 439d 	movw	r3, #1181	; 0x49d
 8006eda:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006edc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	da10      	bge.n	8006f06 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006ee4:	78fb      	ldrb	r3, [r7, #3]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	78fa      	ldrb	r2, [r7, #3]
 8006ef4:	0151      	lsls	r1, r2, #5
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	440a      	add	r2, r1
 8006efa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f02:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006f04:	e057      	b.n	8006fb6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d051      	beq.n	8006fb6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006f12:	78fb      	ldrb	r3, [r7, #3]
 8006f14:	015a      	lsls	r2, r3, #5
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	78fa      	ldrb	r2, [r7, #3]
 8006f22:	0151      	lsls	r1, r2, #5
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	440a      	add	r2, r1
 8006f28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f2c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006f30:	60d3      	str	r3, [r2, #12]
      break;
 8006f32:	e040      	b.n	8006fb6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006f34:	78fb      	ldrb	r3, [r7, #3]
 8006f36:	015a      	lsls	r2, r3, #5
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f40:	461a      	mov	r2, r3
 8006f42:	f240 639d 	movw	r3, #1693	; 0x69d
 8006f46:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006f48:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	da34      	bge.n	8006fba <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006f50:	78fb      	ldrb	r3, [r7, #3]
 8006f52:	015a      	lsls	r2, r3, #5
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	4413      	add	r3, r2
 8006f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	78fa      	ldrb	r2, [r7, #3]
 8006f60:	0151      	lsls	r1, r2, #5
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	440a      	add	r2, r1
 8006f66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f6e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006f70:	e023      	b.n	8006fba <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006f72:	78fb      	ldrb	r3, [r7, #3]
 8006f74:	015a      	lsls	r2, r3, #5
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	4413      	add	r3, r2
 8006f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f240 2325 	movw	r3, #549	; 0x225
 8006f84:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006f86:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	da17      	bge.n	8006fbe <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006f8e:	78fb      	ldrb	r3, [r7, #3]
 8006f90:	015a      	lsls	r2, r3, #5
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	78fa      	ldrb	r2, [r7, #3]
 8006f9e:	0151      	lsls	r1, r2, #5
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	440a      	add	r2, r1
 8006fa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fa8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006fac:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006fae:	e006      	b.n	8006fbe <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	77fb      	strb	r3, [r7, #31]
      break;
 8006fb4:	e004      	b.n	8006fc0 <USB_HC_Init+0x14c>
      break;
 8006fb6:	bf00      	nop
 8006fb8:	e002      	b.n	8006fc0 <USB_HC_Init+0x14c>
      break;
 8006fba:	bf00      	nop
 8006fbc:	e000      	b.n	8006fc0 <USB_HC_Init+0x14c>
      break;
 8006fbe:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006fc0:	78fb      	ldrb	r3, [r7, #3]
 8006fc2:	015a      	lsls	r2, r3, #5
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	78fa      	ldrb	r2, [r7, #3]
 8006fd0:	0151      	lsls	r1, r2, #5
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	440a      	add	r2, r1
 8006fd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fda:	f043 0302 	orr.w	r3, r3, #2
 8006fde:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fe6:	699a      	ldr	r2, [r3, #24]
 8006fe8:	78fb      	ldrb	r3, [r7, #3]
 8006fea:	f003 030f 	and.w	r3, r3, #15
 8006fee:	2101      	movs	r1, #1
 8006ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ff4:	6939      	ldr	r1, [r7, #16]
 8006ff6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800700a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800700e:	2b00      	cmp	r3, #0
 8007010:	da03      	bge.n	800701a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007016:	61bb      	str	r3, [r7, #24]
 8007018:	e001      	b.n	800701e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800701a:	2300      	movs	r3, #0
 800701c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7ff feff 	bl	8006e22 <USB_GetHostSpeed>
 8007024:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007026:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800702a:	2b02      	cmp	r3, #2
 800702c:	d106      	bne.n	800703c <USB_HC_Init+0x1c8>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2b02      	cmp	r3, #2
 8007032:	d003      	beq.n	800703c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007034:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007038:	617b      	str	r3, [r7, #20]
 800703a:	e001      	b.n	8007040 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007040:	787b      	ldrb	r3, [r7, #1]
 8007042:	059b      	lsls	r3, r3, #22
 8007044:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007048:	78bb      	ldrb	r3, [r7, #2]
 800704a:	02db      	lsls	r3, r3, #11
 800704c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007050:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007052:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007056:	049b      	lsls	r3, r3, #18
 8007058:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800705c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800705e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007060:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007064:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800706a:	78fb      	ldrb	r3, [r7, #3]
 800706c:	0159      	lsls	r1, r3, #5
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	440b      	add	r3, r1
 8007072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007076:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800707c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800707e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007082:	2b03      	cmp	r3, #3
 8007084:	d003      	beq.n	800708e <USB_HC_Init+0x21a>
 8007086:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800708a:	2b01      	cmp	r3, #1
 800708c:	d10f      	bne.n	80070ae <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800708e:	78fb      	ldrb	r3, [r7, #3]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	4413      	add	r3, r2
 8007096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	78fa      	ldrb	r2, [r7, #3]
 800709e:	0151      	lsls	r1, r2, #5
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	440a      	add	r2, r1
 80070a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80070ac:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80070ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3720      	adds	r7, #32
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b08c      	sub	sp, #48	; 0x30
 80070bc:	af02      	add	r7, sp, #8
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	4613      	mov	r3, r2
 80070c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	785b      	ldrb	r3, [r3, #1]
 80070ce:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80070d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070d4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d02d      	beq.n	800713e <USB_HC_StartXfer+0x86>
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	791b      	ldrb	r3, [r3, #4]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d129      	bne.n	800713e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80070ea:	79fb      	ldrb	r3, [r7, #7]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d117      	bne.n	8007120 <USB_HC_StartXfer+0x68>
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	79db      	ldrb	r3, [r3, #7]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d003      	beq.n	8007100 <USB_HC_StartXfer+0x48>
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	79db      	ldrb	r3, [r3, #7]
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d10f      	bne.n	8007120 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	4413      	add	r3, r2
 8007108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	69fa      	ldr	r2, [r7, #28]
 8007110:	0151      	lsls	r1, r2, #5
 8007112:	6a3a      	ldr	r2, [r7, #32]
 8007114:	440a      	add	r2, r1
 8007116:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800711a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800711e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007120:	79fb      	ldrb	r3, [r7, #7]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10b      	bne.n	800713e <USB_HC_StartXfer+0x86>
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	795b      	ldrb	r3, [r3, #5]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d107      	bne.n	800713e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	785b      	ldrb	r3, [r3, #1]
 8007132:	4619      	mov	r1, r3
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 fa0f 	bl	8007558 <USB_DoPing>
      return HAL_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	e0f8      	b.n	8007330 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d018      	beq.n	8007178 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	8912      	ldrh	r2, [r2, #8]
 800714e:	4413      	add	r3, r2
 8007150:	3b01      	subs	r3, #1
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	8912      	ldrh	r2, [r2, #8]
 8007156:	fbb3 f3f2 	udiv	r3, r3, r2
 800715a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800715c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800715e:	8b7b      	ldrh	r3, [r7, #26]
 8007160:	429a      	cmp	r2, r3
 8007162:	d90b      	bls.n	800717c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007164:	8b7b      	ldrh	r3, [r7, #26]
 8007166:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007168:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	8912      	ldrh	r2, [r2, #8]
 800716e:	fb03 f202 	mul.w	r2, r3, r2
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	611a      	str	r2, [r3, #16]
 8007176:	e001      	b.n	800717c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007178:	2301      	movs	r3, #1
 800717a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	78db      	ldrb	r3, [r3, #3]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d007      	beq.n	8007194 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007184:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	8912      	ldrh	r2, [r2, #8]
 800718a:	fb03 f202 	mul.w	r2, r3, r2
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	611a      	str	r2, [r3, #16]
 8007192:	e003      	b.n	800719c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	695a      	ldr	r2, [r3, #20]
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80071a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80071a6:	04d9      	lsls	r1, r3, #19
 80071a8:	4b63      	ldr	r3, [pc, #396]	; (8007338 <USB_HC_StartXfer+0x280>)
 80071aa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80071ac:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	7a9b      	ldrb	r3, [r3, #10]
 80071b2:	075b      	lsls	r3, r3, #29
 80071b4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80071b8:	69f9      	ldr	r1, [r7, #28]
 80071ba:	0148      	lsls	r0, r1, #5
 80071bc:	6a39      	ldr	r1, [r7, #32]
 80071be:	4401      	add	r1, r0
 80071c0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80071c4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80071c6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80071c8:	79fb      	ldrb	r3, [r7, #7]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d009      	beq.n	80071e2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	68d9      	ldr	r1, [r3, #12]
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	015a      	lsls	r2, r3, #5
 80071d6:	6a3b      	ldr	r3, [r7, #32]
 80071d8:	4413      	add	r3, r2
 80071da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071de:	460a      	mov	r2, r1
 80071e0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80071e2:	6a3b      	ldr	r3, [r7, #32]
 80071e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	bf0c      	ite	eq
 80071f2:	2301      	moveq	r3, #1
 80071f4:	2300      	movne	r3, #0
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	015a      	lsls	r2, r3, #5
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	4413      	add	r3, r2
 8007202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	69fa      	ldr	r2, [r7, #28]
 800720a:	0151      	lsls	r1, r2, #5
 800720c:	6a3a      	ldr	r2, [r7, #32]
 800720e:	440a      	add	r2, r1
 8007210:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007214:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007218:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	015a      	lsls	r2, r3, #5
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	4413      	add	r3, r2
 8007222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	7e7b      	ldrb	r3, [r7, #25]
 800722a:	075b      	lsls	r3, r3, #29
 800722c:	69f9      	ldr	r1, [r7, #28]
 800722e:	0148      	lsls	r0, r1, #5
 8007230:	6a39      	ldr	r1, [r7, #32]
 8007232:	4401      	add	r1, r0
 8007234:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007238:	4313      	orrs	r3, r2
 800723a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	6a3b      	ldr	r3, [r7, #32]
 8007242:	4413      	add	r3, r2
 8007244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007252:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	78db      	ldrb	r3, [r3, #3]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d004      	beq.n	8007266 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007262:	613b      	str	r3, [r7, #16]
 8007264:	e003      	b.n	800726e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800726c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007274:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	015a      	lsls	r2, r3, #5
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	4413      	add	r3, r2
 800727e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007282:	461a      	mov	r2, r3
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007288:	79fb      	ldrb	r3, [r7, #7]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800728e:	2300      	movs	r3, #0
 8007290:	e04e      	b.n	8007330 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	78db      	ldrb	r3, [r3, #3]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d149      	bne.n	800732e <USB_HC_StartXfer+0x276>
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d045      	beq.n	800732e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	79db      	ldrb	r3, [r3, #7]
 80072a6:	2b03      	cmp	r3, #3
 80072a8:	d830      	bhi.n	800730c <USB_HC_StartXfer+0x254>
 80072aa:	a201      	add	r2, pc, #4	; (adr r2, 80072b0 <USB_HC_StartXfer+0x1f8>)
 80072ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b0:	080072c1 	.word	0x080072c1
 80072b4:	080072e5 	.word	0x080072e5
 80072b8:	080072c1 	.word	0x080072c1
 80072bc:	080072e5 	.word	0x080072e5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	3303      	adds	r3, #3
 80072c6:	089b      	lsrs	r3, r3, #2
 80072c8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80072ca:	8afa      	ldrh	r2, [r7, #22]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d91c      	bls.n	8007310 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	f043 0220 	orr.w	r2, r3, #32
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	619a      	str	r2, [r3, #24]
        }
        break;
 80072e2:	e015      	b.n	8007310 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	695b      	ldr	r3, [r3, #20]
 80072e8:	3303      	adds	r3, #3
 80072ea:	089b      	lsrs	r3, r3, #2
 80072ec:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80072ee:	8afa      	ldrh	r2, [r7, #22]
 80072f0:	6a3b      	ldr	r3, [r7, #32]
 80072f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072f6:	691b      	ldr	r3, [r3, #16]
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d90a      	bls.n	8007314 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	619a      	str	r2, [r3, #24]
        }
        break;
 800730a:	e003      	b.n	8007314 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800730c:	bf00      	nop
 800730e:	e002      	b.n	8007316 <USB_HC_StartXfer+0x25e>
        break;
 8007310:	bf00      	nop
 8007312:	e000      	b.n	8007316 <USB_HC_StartXfer+0x25e>
        break;
 8007314:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	68d9      	ldr	r1, [r3, #12]
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	785a      	ldrb	r2, [r3, #1]
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	b29b      	uxth	r3, r3
 8007324:	2000      	movs	r0, #0
 8007326:	9000      	str	r0, [sp, #0]
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f7ff fb31 	bl	8006990 <USB_WritePacket>
  }

  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3728      	adds	r7, #40	; 0x28
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	1ff80000 	.word	0x1ff80000

0800733c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800734e:	695b      	ldr	r3, [r3, #20]
 8007350:	b29b      	uxth	r3, r3
}
 8007352:	4618      	mov	r0, r3
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800735e:	b480      	push	{r7}
 8007360:	b089      	sub	sp, #36	; 0x24
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	460b      	mov	r3, r1
 8007368:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800736e:	78fb      	ldrb	r3, [r7, #3]
 8007370:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	4413      	add	r3, r2
 800737e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	0c9b      	lsrs	r3, r3, #18
 8007386:	f003 0303 	and.w	r3, r3, #3
 800738a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	4413      	add	r3, r2
 8007394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	0fdb      	lsrs	r3, r3, #31
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f003 0320 	and.w	r3, r3, #32
 80073aa:	2b20      	cmp	r3, #32
 80073ac:	d104      	bne.n	80073b8 <USB_HC_Halt+0x5a>
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80073b4:	2300      	movs	r3, #0
 80073b6:	e0c8      	b.n	800754a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d002      	beq.n	80073c4 <USB_HC_Halt+0x66>
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d163      	bne.n	800748c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	015a      	lsls	r2, r3, #5
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	4413      	add	r3, r2
 80073cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	69ba      	ldr	r2, [r7, #24]
 80073d4:	0151      	lsls	r1, r2, #5
 80073d6:	69fa      	ldr	r2, [r7, #28]
 80073d8:	440a      	add	r2, r1
 80073da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073e2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f003 0320 	and.w	r3, r3, #32
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f040 80ab 	bne.w	8007548 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d133      	bne.n	8007466 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	015a      	lsls	r2, r3, #5
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	4413      	add	r3, r2
 8007406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	69ba      	ldr	r2, [r7, #24]
 800740e:	0151      	lsls	r1, r2, #5
 8007410:	69fa      	ldr	r2, [r7, #28]
 8007412:	440a      	add	r2, r1
 8007414:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007418:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800741c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	015a      	lsls	r2, r3, #5
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	4413      	add	r3, r2
 8007426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	69ba      	ldr	r2, [r7, #24]
 800742e:	0151      	lsls	r1, r2, #5
 8007430:	69fa      	ldr	r2, [r7, #28]
 8007432:	440a      	add	r2, r1
 8007434:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007438:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800743c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3301      	adds	r3, #1
 8007442:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800744a:	d81d      	bhi.n	8007488 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	015a      	lsls	r2, r3, #5
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	4413      	add	r3, r2
 8007454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800745e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007462:	d0ec      	beq.n	800743e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007464:	e070      	b.n	8007548 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	015a      	lsls	r2, r3, #5
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	4413      	add	r3, r2
 800746e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	69ba      	ldr	r2, [r7, #24]
 8007476:	0151      	lsls	r1, r2, #5
 8007478:	69fa      	ldr	r2, [r7, #28]
 800747a:	440a      	add	r2, r1
 800747c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007480:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007484:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007486:	e05f      	b.n	8007548 <USB_HC_Halt+0x1ea>
            break;
 8007488:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800748a:	e05d      	b.n	8007548 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	015a      	lsls	r2, r3, #5
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	4413      	add	r3, r2
 8007494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	69ba      	ldr	r2, [r7, #24]
 800749c:	0151      	lsls	r1, r2, #5
 800749e:	69fa      	ldr	r2, [r7, #28]
 80074a0:	440a      	add	r2, r1
 80074a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074aa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d133      	bne.n	8007524 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	015a      	lsls	r2, r3, #5
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	4413      	add	r3, r2
 80074c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	69ba      	ldr	r2, [r7, #24]
 80074cc:	0151      	lsls	r1, r2, #5
 80074ce:	69fa      	ldr	r2, [r7, #28]
 80074d0:	440a      	add	r2, r1
 80074d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074da:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	015a      	lsls	r2, r3, #5
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	4413      	add	r3, r2
 80074e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	69ba      	ldr	r2, [r7, #24]
 80074ec:	0151      	lsls	r1, r2, #5
 80074ee:	69fa      	ldr	r2, [r7, #28]
 80074f0:	440a      	add	r2, r1
 80074f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074fa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	3301      	adds	r3, #1
 8007500:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007508:	d81d      	bhi.n	8007546 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	015a      	lsls	r2, r3, #5
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	4413      	add	r3, r2
 8007512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800751c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007520:	d0ec      	beq.n	80074fc <USB_HC_Halt+0x19e>
 8007522:	e011      	b.n	8007548 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	4413      	add	r3, r2
 800752c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	69ba      	ldr	r2, [r7, #24]
 8007534:	0151      	lsls	r1, r2, #5
 8007536:	69fa      	ldr	r2, [r7, #28]
 8007538:	440a      	add	r2, r1
 800753a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800753e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007542:	6013      	str	r3, [r2, #0]
 8007544:	e000      	b.n	8007548 <USB_HC_Halt+0x1ea>
          break;
 8007546:	bf00      	nop
    }
  }

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3724      	adds	r7, #36	; 0x24
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
	...

08007558 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007558:	b480      	push	{r7}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	460b      	mov	r3, r1
 8007562:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007568:	78fb      	ldrb	r3, [r7, #3]
 800756a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800756c:	2301      	movs	r3, #1
 800756e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	04da      	lsls	r2, r3, #19
 8007574:	4b15      	ldr	r3, [pc, #84]	; (80075cc <USB_DoPing+0x74>)
 8007576:	4013      	ands	r3, r2
 8007578:	693a      	ldr	r2, [r7, #16]
 800757a:	0151      	lsls	r1, r2, #5
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	440a      	add	r2, r1
 8007580:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007584:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007588:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	015a      	lsls	r2, r3, #5
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	4413      	add	r3, r2
 8007592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80075a0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075a8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	015a      	lsls	r2, r3, #5
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	4413      	add	r3, r2
 80075b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075b6:	461a      	mov	r2, r3
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	371c      	adds	r7, #28
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	1ff80000 	.word	0x1ff80000

080075d0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b088      	sub	sp, #32
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80075d8:	2300      	movs	r3, #0
 80075da:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80075e0:	2300      	movs	r3, #0
 80075e2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f7ff f911 	bl	800680c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80075ea:	2110      	movs	r1, #16
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f7ff f96b 	bl	80068c8 <USB_FlushTxFifo>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d001      	beq.n	80075fc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7ff f997 	bl	8006930 <USB_FlushRxFifo>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d001      	beq.n	800760c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800760c:	2300      	movs	r3, #0
 800760e:	61bb      	str	r3, [r7, #24]
 8007610:	e01f      	b.n	8007652 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	015a      	lsls	r2, r3, #5
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	4413      	add	r3, r2
 800761a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007628:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007630:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007638:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	015a      	lsls	r2, r3, #5
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	4413      	add	r3, r2
 8007642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007646:	461a      	mov	r2, r3
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	3301      	adds	r3, #1
 8007650:	61bb      	str	r3, [r7, #24]
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	2b0f      	cmp	r3, #15
 8007656:	d9dc      	bls.n	8007612 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007658:	2300      	movs	r3, #0
 800765a:	61bb      	str	r3, [r7, #24]
 800765c:	e034      	b.n	80076c8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	015a      	lsls	r2, r3, #5
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	4413      	add	r3, r2
 8007666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007674:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800767c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007684:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	015a      	lsls	r2, r3, #5
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	4413      	add	r3, r2
 800768e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007692:	461a      	mov	r2, r3
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	3301      	adds	r3, #1
 800769c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076a4:	d80c      	bhi.n	80076c0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076bc:	d0ec      	beq.n	8007698 <USB_StopHost+0xc8>
 80076be:	e000      	b.n	80076c2 <USB_StopHost+0xf2>
        break;
 80076c0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	3301      	adds	r3, #1
 80076c6:	61bb      	str	r3, [r7, #24]
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	2b0f      	cmp	r3, #15
 80076cc:	d9c7      	bls.n	800765e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076d4:	461a      	mov	r2, r3
 80076d6:	f04f 33ff 	mov.w	r3, #4294967295
 80076da:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f04f 32ff 	mov.w	r2, #4294967295
 80076e2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7ff f880 	bl	80067ea <USB_EnableGlobalInt>

  return ret;
 80076ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3720      	adds	r7, #32
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80076f4:	b590      	push	{r4, r7, lr}
 80076f6:	b089      	sub	sp, #36	; 0x24
 80076f8:	af04      	add	r7, sp, #16
 80076fa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80076fc:	2301      	movs	r3, #1
 80076fe:	2202      	movs	r2, #2
 8007700:	2102      	movs	r1, #2
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fc66 	bl	8007fd4 <USBH_FindInterface>
 8007708:	4603      	mov	r3, r0
 800770a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800770c:	7bfb      	ldrb	r3, [r7, #15]
 800770e:	2bff      	cmp	r3, #255	; 0xff
 8007710:	d002      	beq.n	8007718 <USBH_CDC_InterfaceInit+0x24>
 8007712:	7bfb      	ldrb	r3, [r7, #15]
 8007714:	2b01      	cmp	r3, #1
 8007716:	d901      	bls.n	800771c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007718:	2302      	movs	r3, #2
 800771a:	e13d      	b.n	8007998 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800771c:	7bfb      	ldrb	r3, [r7, #15]
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fc3b 	bl	8007f9c <USBH_SelectInterface>
 8007726:	4603      	mov	r3, r0
 8007728:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800772a:	7bbb      	ldrb	r3, [r7, #14]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d001      	beq.n	8007734 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007730:	2302      	movs	r3, #2
 8007732:	e131      	b.n	8007998 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800773a:	2050      	movs	r0, #80	; 0x50
 800773c:	f002 fb14 	bl	8009d68 <malloc>
 8007740:	4603      	mov	r3, r0
 8007742:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800774a:	69db      	ldr	r3, [r3, #28]
 800774c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d101      	bne.n	8007758 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007754:	2302      	movs	r3, #2
 8007756:	e11f      	b.n	8007998 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007758:	2250      	movs	r2, #80	; 0x50
 800775a:	2100      	movs	r1, #0
 800775c:	68b8      	ldr	r0, [r7, #8]
 800775e:	f002 fb13 	bl	8009d88 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007762:	7bfb      	ldrb	r3, [r7, #15]
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	211a      	movs	r1, #26
 8007768:	fb01 f303 	mul.w	r3, r1, r3
 800776c:	4413      	add	r3, r2
 800776e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	b25b      	sxtb	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	da15      	bge.n	80077a6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800777a:	7bfb      	ldrb	r3, [r7, #15]
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	211a      	movs	r1, #26
 8007780:	fb01 f303 	mul.w	r3, r1, r3
 8007784:	4413      	add	r3, r2
 8007786:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800778a:	781a      	ldrb	r2, [r3, #0]
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007790:	7bfb      	ldrb	r3, [r7, #15]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	211a      	movs	r1, #26
 8007796:	fb01 f303 	mul.w	r3, r1, r3
 800779a:	4413      	add	r3, r2
 800779c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80077a0:	881a      	ldrh	r2, [r3, #0]
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	785b      	ldrb	r3, [r3, #1]
 80077aa:	4619      	mov	r1, r3
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f001 ff2c 	bl	800960a <USBH_AllocPipe>
 80077b2:	4603      	mov	r3, r0
 80077b4:	461a      	mov	r2, r3
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	7819      	ldrb	r1, [r3, #0]
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	7858      	ldrb	r0, [r3, #1]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	8952      	ldrh	r2, [r2, #10]
 80077d2:	9202      	str	r2, [sp, #8]
 80077d4:	2203      	movs	r2, #3
 80077d6:	9201      	str	r2, [sp, #4]
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	4623      	mov	r3, r4
 80077dc:	4602      	mov	r2, r0
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f001 fee4 	bl	80095ac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	2200      	movs	r2, #0
 80077ea:	4619      	mov	r1, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f002 f9f3 	bl	8009bd8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80077f2:	2300      	movs	r3, #0
 80077f4:	2200      	movs	r2, #0
 80077f6:	210a      	movs	r1, #10
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fbeb 	bl	8007fd4 <USBH_FindInterface>
 80077fe:	4603      	mov	r3, r0
 8007800:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007802:	7bfb      	ldrb	r3, [r7, #15]
 8007804:	2bff      	cmp	r3, #255	; 0xff
 8007806:	d002      	beq.n	800780e <USBH_CDC_InterfaceInit+0x11a>
 8007808:	7bfb      	ldrb	r3, [r7, #15]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d901      	bls.n	8007812 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800780e:	2302      	movs	r3, #2
 8007810:	e0c2      	b.n	8007998 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007812:	7bfb      	ldrb	r3, [r7, #15]
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	211a      	movs	r1, #26
 8007818:	fb01 f303 	mul.w	r3, r1, r3
 800781c:	4413      	add	r3, r2
 800781e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	b25b      	sxtb	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	da16      	bge.n	8007858 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800782a:	7bfb      	ldrb	r3, [r7, #15]
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	211a      	movs	r1, #26
 8007830:	fb01 f303 	mul.w	r3, r1, r3
 8007834:	4413      	add	r3, r2
 8007836:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800783a:	781a      	ldrb	r2, [r3, #0]
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007840:	7bfb      	ldrb	r3, [r7, #15]
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	211a      	movs	r1, #26
 8007846:	fb01 f303 	mul.w	r3, r1, r3
 800784a:	4413      	add	r3, r2
 800784c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007850:	881a      	ldrh	r2, [r3, #0]
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	835a      	strh	r2, [r3, #26]
 8007856:	e015      	b.n	8007884 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007858:	7bfb      	ldrb	r3, [r7, #15]
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	211a      	movs	r1, #26
 800785e:	fb01 f303 	mul.w	r3, r1, r3
 8007862:	4413      	add	r3, r2
 8007864:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007868:	781a      	ldrb	r2, [r3, #0]
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800786e:	7bfb      	ldrb	r3, [r7, #15]
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	211a      	movs	r1, #26
 8007874:	fb01 f303 	mul.w	r3, r1, r3
 8007878:	4413      	add	r3, r2
 800787a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800787e:	881a      	ldrh	r2, [r3, #0]
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007884:	7bfb      	ldrb	r3, [r7, #15]
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	211a      	movs	r1, #26
 800788a:	fb01 f303 	mul.w	r3, r1, r3
 800788e:	4413      	add	r3, r2
 8007890:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	b25b      	sxtb	r3, r3
 8007898:	2b00      	cmp	r3, #0
 800789a:	da16      	bge.n	80078ca <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800789c:	7bfb      	ldrb	r3, [r7, #15]
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	211a      	movs	r1, #26
 80078a2:	fb01 f303 	mul.w	r3, r1, r3
 80078a6:	4413      	add	r3, r2
 80078a8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80078ac:	781a      	ldrb	r2, [r3, #0]
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80078b2:	7bfb      	ldrb	r3, [r7, #15]
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	211a      	movs	r1, #26
 80078b8:	fb01 f303 	mul.w	r3, r1, r3
 80078bc:	4413      	add	r3, r2
 80078be:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80078c2:	881a      	ldrh	r2, [r3, #0]
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	835a      	strh	r2, [r3, #26]
 80078c8:	e015      	b.n	80078f6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	211a      	movs	r1, #26
 80078d0:	fb01 f303 	mul.w	r3, r1, r3
 80078d4:	4413      	add	r3, r2
 80078d6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80078da:	781a      	ldrb	r2, [r3, #0]
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	211a      	movs	r1, #26
 80078e6:	fb01 f303 	mul.w	r3, r1, r3
 80078ea:	4413      	add	r3, r2
 80078ec:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80078f0:	881a      	ldrh	r2, [r3, #0]
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	7b9b      	ldrb	r3, [r3, #14]
 80078fa:	4619      	mov	r1, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f001 fe84 	bl	800960a <USBH_AllocPipe>
 8007902:	4603      	mov	r3, r0
 8007904:	461a      	mov	r2, r3
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	7bdb      	ldrb	r3, [r3, #15]
 800790e:	4619      	mov	r1, r3
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f001 fe7a 	bl	800960a <USBH_AllocPipe>
 8007916:	4603      	mov	r3, r0
 8007918:	461a      	mov	r2, r3
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	7b59      	ldrb	r1, [r3, #13]
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	7b98      	ldrb	r0, [r3, #14]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	8b12      	ldrh	r2, [r2, #24]
 8007936:	9202      	str	r2, [sp, #8]
 8007938:	2202      	movs	r2, #2
 800793a:	9201      	str	r2, [sp, #4]
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	4623      	mov	r3, r4
 8007940:	4602      	mov	r2, r0
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f001 fe32 	bl	80095ac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	7b19      	ldrb	r1, [r3, #12]
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	7bd8      	ldrb	r0, [r3, #15]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	8b52      	ldrh	r2, [r2, #26]
 8007960:	9202      	str	r2, [sp, #8]
 8007962:	2202      	movs	r2, #2
 8007964:	9201      	str	r2, [sp, #4]
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	4623      	mov	r3, r4
 800796a:	4602      	mov	r2, r0
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f001 fe1d 	bl	80095ac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	7b5b      	ldrb	r3, [r3, #13]
 800797e:	2200      	movs	r2, #0
 8007980:	4619      	mov	r1, r3
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f002 f928 	bl	8009bd8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	7b1b      	ldrb	r3, [r3, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	4619      	mov	r1, r3
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f002 f921 	bl	8009bd8 <USBH_LL_SetToggle>

  return USBH_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	bd90      	pop	{r4, r7, pc}

080079a0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079ae:	69db      	ldr	r3, [r3, #28]
 80079b0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00e      	beq.n	80079d8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	4619      	mov	r1, r3
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f001 fe12 	bl	80095ea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f001 fe3d 	bl	800964c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	7b1b      	ldrb	r3, [r3, #12]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00e      	beq.n	80079fe <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	7b1b      	ldrb	r3, [r3, #12]
 80079e4:	4619      	mov	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f001 fdff 	bl	80095ea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	7b1b      	ldrb	r3, [r3, #12]
 80079f0:	4619      	mov	r1, r3
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f001 fe2a 	bl	800964c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	7b5b      	ldrb	r3, [r3, #13]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00e      	beq.n	8007a24 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	7b5b      	ldrb	r3, [r3, #13]
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f001 fdec 	bl	80095ea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	7b5b      	ldrb	r3, [r3, #13]
 8007a16:	4619      	mov	r1, r3
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f001 fe17 	bl	800964c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a2a:	69db      	ldr	r3, [r3, #28]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00b      	beq.n	8007a48 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a36:	69db      	ldr	r3, [r3, #28]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f002 f99d 	bl	8009d78 <free>
    phost->pActiveClass->pData = 0U;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a44:	2200      	movs	r2, #0
 8007a46:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b084      	sub	sp, #16
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a60:	69db      	ldr	r3, [r3, #28]
 8007a62:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	3340      	adds	r3, #64	; 0x40
 8007a68:	4619      	mov	r1, r3
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f8b1 	bl	8007bd2 <GetLineCoding>
 8007a70:	4603      	mov	r3, r0
 8007a72:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007a74:	7afb      	ldrb	r3, [r7, #11]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d105      	bne.n	8007a86 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a80:	2102      	movs	r1, #2
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007a86:	7afb      	ldrb	r3, [r7, #11]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007aa6:	69db      	ldr	r3, [r3, #28]
 8007aa8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007ab0:	2b04      	cmp	r3, #4
 8007ab2:	d877      	bhi.n	8007ba4 <USBH_CDC_Process+0x114>
 8007ab4:	a201      	add	r2, pc, #4	; (adr r2, 8007abc <USBH_CDC_Process+0x2c>)
 8007ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aba:	bf00      	nop
 8007abc:	08007ad1 	.word	0x08007ad1
 8007ac0:	08007ad7 	.word	0x08007ad7
 8007ac4:	08007b07 	.word	0x08007b07
 8007ac8:	08007b7b 	.word	0x08007b7b
 8007acc:	08007b89 	.word	0x08007b89
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ad4:	e06d      	b.n	8007bb2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ada:	4619      	mov	r1, r3
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f897 	bl	8007c10 <SetLineCoding>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007ae6:	7bbb      	ldrb	r3, [r7, #14]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d104      	bne.n	8007af6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	2202      	movs	r2, #2
 8007af0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007af4:	e058      	b.n	8007ba8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007af6:	7bbb      	ldrb	r3, [r7, #14]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d055      	beq.n	8007ba8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	2204      	movs	r2, #4
 8007b00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007b04:	e050      	b.n	8007ba8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	3340      	adds	r3, #64	; 0x40
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f860 	bl	8007bd2 <GetLineCoding>
 8007b12:	4603      	mov	r3, r0
 8007b14:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007b16:	7bbb      	ldrb	r3, [r7, #14]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d126      	bne.n	8007b6a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b2e:	791b      	ldrb	r3, [r3, #4]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d13b      	bne.n	8007bac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b3e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d133      	bne.n	8007bac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b4e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d12b      	bne.n	8007bac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b5c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d124      	bne.n	8007bac <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f958 	bl	8007e18 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007b68:	e020      	b.n	8007bac <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007b6a:	7bbb      	ldrb	r3, [r7, #14]
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d01d      	beq.n	8007bac <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	2204      	movs	r2, #4
 8007b74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007b78:	e018      	b.n	8007bac <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f867 	bl	8007c4e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 f8da 	bl	8007d3a <CDC_ProcessReception>
      break;
 8007b86:	e014      	b.n	8007bb2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007b88:	2100      	movs	r1, #0
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 ffef 	bl	8008b6e <USBH_ClrFeature>
 8007b90:	4603      	mov	r3, r0
 8007b92:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007b94:	7bbb      	ldrb	r3, [r7, #14]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d10a      	bne.n	8007bb0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007ba2:	e005      	b.n	8007bb0 <USBH_CDC_Process+0x120>

    default:
      break;
 8007ba4:	bf00      	nop
 8007ba6:	e004      	b.n	8007bb2 <USBH_CDC_Process+0x122>
      break;
 8007ba8:	bf00      	nop
 8007baa:	e002      	b.n	8007bb2 <USBH_CDC_Process+0x122>
      break;
 8007bac:	bf00      	nop
 8007bae:	e000      	b.n	8007bb2 <USBH_CDC_Process+0x122>
      break;
 8007bb0:	bf00      	nop

  }

  return status;
 8007bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b082      	sub	sp, #8
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	22a1      	movs	r2, #161	; 0xa1
 8007be0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2221      	movs	r2, #33	; 0x21
 8007be6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2207      	movs	r2, #7
 8007bf8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	2207      	movs	r2, #7
 8007bfe:	4619      	mov	r1, r3
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f001 fa81 	bl	8009108 <USBH_CtlReq>
 8007c06:	4603      	mov	r3, r0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3708      	adds	r7, #8
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2221      	movs	r2, #33	; 0x21
 8007c1e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2220      	movs	r2, #32
 8007c24:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2207      	movs	r2, #7
 8007c36:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	2207      	movs	r2, #7
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f001 fa62 	bl	8009108 <USBH_CtlReq>
 8007c44:	4603      	mov	r3, r0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b086      	sub	sp, #24
 8007c52:	af02      	add	r7, sp, #8
 8007c54:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007c60:	2300      	movs	r3, #0
 8007c62:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d002      	beq.n	8007c74 <CDC_ProcessTransmission+0x26>
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d023      	beq.n	8007cba <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007c72:	e05e      	b.n	8007d32 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	8b12      	ldrh	r2, [r2, #24]
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d90b      	bls.n	8007c98 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	69d9      	ldr	r1, [r3, #28]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	8b1a      	ldrh	r2, [r3, #24]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	7b5b      	ldrb	r3, [r3, #13]
 8007c8c:	2001      	movs	r0, #1
 8007c8e:	9000      	str	r0, [sp, #0]
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f001 fc48 	bl	8009526 <USBH_BulkSendData>
 8007c96:	e00b      	b.n	8007cb0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	7b5b      	ldrb	r3, [r3, #13]
 8007ca6:	2001      	movs	r0, #1
 8007ca8:	9000      	str	r0, [sp, #0]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f001 fc3b 	bl	8009526 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2202      	movs	r2, #2
 8007cb4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007cb8:	e03b      	b.n	8007d32 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	7b5b      	ldrb	r3, [r3, #13]
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f001 ff5f 	bl	8009b84 <USBH_LL_GetURBState>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007cca:	7afb      	ldrb	r3, [r7, #11]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d128      	bne.n	8007d22 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	8b12      	ldrh	r2, [r2, #24]
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d90e      	bls.n	8007cfa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	8b12      	ldrh	r2, [r2, #24]
 8007ce4:	1a9a      	subs	r2, r3, r2
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	69db      	ldr	r3, [r3, #28]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	8b12      	ldrh	r2, [r2, #24]
 8007cf2:	441a      	add	r2, r3
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	61da      	str	r2, [r3, #28]
 8007cf8:	e002      	b.n	8007d00 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d004      	beq.n	8007d12 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007d10:	e00e      	b.n	8007d30 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f868 	bl	8007df0 <USBH_CDC_TransmitCallback>
      break;
 8007d20:	e006      	b.n	8007d30 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007d22:	7afb      	ldrb	r3, [r7, #11]
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d103      	bne.n	8007d30 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007d30:	bf00      	nop
  }
}
 8007d32:	bf00      	nop
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b086      	sub	sp, #24
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007d56:	2b03      	cmp	r3, #3
 8007d58:	d002      	beq.n	8007d60 <CDC_ProcessReception+0x26>
 8007d5a:	2b04      	cmp	r3, #4
 8007d5c:	d00e      	beq.n	8007d7c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007d5e:	e043      	b.n	8007de8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	6a19      	ldr	r1, [r3, #32]
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	8b5a      	ldrh	r2, [r3, #26]
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	7b1b      	ldrb	r3, [r3, #12]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f001 fbff 	bl	8009570 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	2204      	movs	r2, #4
 8007d76:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007d7a:	e035      	b.n	8007de8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	7b1b      	ldrb	r3, [r3, #12]
 8007d80:	4619      	mov	r1, r3
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f001 fefe 	bl	8009b84 <USBH_LL_GetURBState>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007d8c:	7cfb      	ldrb	r3, [r7, #19]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d129      	bne.n	8007de6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	7b1b      	ldrb	r3, [r3, #12]
 8007d96:	4619      	mov	r1, r3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f001 fe61 	bl	8009a60 <USBH_LL_GetLastXferSize>
 8007d9e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d016      	beq.n	8007dd8 <CDC_ProcessReception+0x9e>
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	8b5b      	ldrh	r3, [r3, #26]
 8007dae:	461a      	mov	r2, r3
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d910      	bls.n	8007dd8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	1ad2      	subs	r2, r2, r3
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	6a1a      	ldr	r2, [r3, #32]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	441a      	add	r2, r3
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	2203      	movs	r2, #3
 8007dd2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007dd6:	e006      	b.n	8007de6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 f80f 	bl	8007e04 <USBH_CDC_ReceiveCallback>
      break;
 8007de6:	bf00      	nop
  }
}
 8007de8:	bf00      	nop
 8007dea:	3718      	adds	r7, #24
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007df8:	bf00      	nop
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007e20:	bf00      	nop
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	4613      	mov	r3, r2
 8007e38:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d101      	bne.n	8007e44 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007e40:	2302      	movs	r3, #2
 8007e42:	e029      	b.n	8007e98 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	79fa      	ldrb	r2, [r7, #7]
 8007e48:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 f81f 	bl	8007ea0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d003      	beq.n	8007e90 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f001 fd31 	bl	80098f8 <USBH_LL_Init>

  return USBH_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007eac:	2300      	movs	r3, #0
 8007eae:	60fb      	str	r3, [r7, #12]
 8007eb0:	e009      	b.n	8007ec6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	33e0      	adds	r3, #224	; 0xe0
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4413      	add	r3, r2
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	60fb      	str	r3, [r7, #12]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2b0f      	cmp	r3, #15
 8007eca:	d9f2      	bls.n	8007eb2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007ecc:	2300      	movs	r3, #0
 8007ece:	60fb      	str	r3, [r7, #12]
 8007ed0:	e009      	b.n	8007ee6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007edc:	2200      	movs	r2, #0
 8007ede:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	60fb      	str	r3, [r7, #12]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eec:	d3f1      	bcc.n	8007ed2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2201      	movs	r2, #1
 8007efe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2240      	movs	r2, #64	; 0x40
 8007f12:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007f52:	2300      	movs	r3, #0
 8007f54:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d016      	beq.n	8007f8a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10e      	bne.n	8007f84 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007f6c:	1c59      	adds	r1, r3, #1
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	33de      	adds	r3, #222	; 0xde
 8007f78:	6839      	ldr	r1, [r7, #0]
 8007f7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	73fb      	strb	r3, [r7, #15]
 8007f82:	e004      	b.n	8007f8e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007f84:	2302      	movs	r3, #2
 8007f86:	73fb      	strb	r3, [r7, #15]
 8007f88:	e001      	b.n	8007f8e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007f8a:	2302      	movs	r3, #2
 8007f8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3714      	adds	r7, #20
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007fb2:	78fa      	ldrb	r2, [r7, #3]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d204      	bcs.n	8007fc2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	78fa      	ldrb	r2, [r7, #3]
 8007fbc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007fc0:	e001      	b.n	8007fc6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3714      	adds	r7, #20
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b087      	sub	sp, #28
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	4608      	mov	r0, r1
 8007fde:	4611      	mov	r1, r2
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	70fb      	strb	r3, [r7, #3]
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	70bb      	strb	r3, [r7, #2]
 8007fea:	4613      	mov	r3, r2
 8007fec:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007ffc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007ffe:	e025      	b.n	800804c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008000:	7dfb      	ldrb	r3, [r7, #23]
 8008002:	221a      	movs	r2, #26
 8008004:	fb02 f303 	mul.w	r3, r2, r3
 8008008:	3308      	adds	r3, #8
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	4413      	add	r3, r2
 800800e:	3302      	adds	r3, #2
 8008010:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	795b      	ldrb	r3, [r3, #5]
 8008016:	78fa      	ldrb	r2, [r7, #3]
 8008018:	429a      	cmp	r2, r3
 800801a:	d002      	beq.n	8008022 <USBH_FindInterface+0x4e>
 800801c:	78fb      	ldrb	r3, [r7, #3]
 800801e:	2bff      	cmp	r3, #255	; 0xff
 8008020:	d111      	bne.n	8008046 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008026:	78ba      	ldrb	r2, [r7, #2]
 8008028:	429a      	cmp	r2, r3
 800802a:	d002      	beq.n	8008032 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800802c:	78bb      	ldrb	r3, [r7, #2]
 800802e:	2bff      	cmp	r3, #255	; 0xff
 8008030:	d109      	bne.n	8008046 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008036:	787a      	ldrb	r2, [r7, #1]
 8008038:	429a      	cmp	r2, r3
 800803a:	d002      	beq.n	8008042 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800803c:	787b      	ldrb	r3, [r7, #1]
 800803e:	2bff      	cmp	r3, #255	; 0xff
 8008040:	d101      	bne.n	8008046 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008042:	7dfb      	ldrb	r3, [r7, #23]
 8008044:	e006      	b.n	8008054 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008046:	7dfb      	ldrb	r3, [r7, #23]
 8008048:	3301      	adds	r3, #1
 800804a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800804c:	7dfb      	ldrb	r3, [r7, #23]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d9d6      	bls.n	8008000 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008052:	23ff      	movs	r3, #255	; 0xff
}
 8008054:	4618      	mov	r0, r3
 8008056:	371c      	adds	r7, #28
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f001 fc81 	bl	8009970 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800806e:	2101      	movs	r1, #1
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f001 fd9a 	bl	8009baa <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3708      	adds	r7, #8
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b088      	sub	sp, #32
 8008084:	af04      	add	r7, sp, #16
 8008086:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008088:	2302      	movs	r3, #2
 800808a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800808c:	2300      	movs	r3, #0
 800808e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008096:	b2db      	uxtb	r3, r3
 8008098:	2b01      	cmp	r3, #1
 800809a:	d102      	bne.n	80080a2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2203      	movs	r2, #3
 80080a0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b0b      	cmp	r3, #11
 80080aa:	f200 81be 	bhi.w	800842a <USBH_Process+0x3aa>
 80080ae:	a201      	add	r2, pc, #4	; (adr r2, 80080b4 <USBH_Process+0x34>)
 80080b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b4:	080080e5 	.word	0x080080e5
 80080b8:	08008117 	.word	0x08008117
 80080bc:	0800817f 	.word	0x0800817f
 80080c0:	080083c5 	.word	0x080083c5
 80080c4:	0800842b 	.word	0x0800842b
 80080c8:	08008223 	.word	0x08008223
 80080cc:	0800836b 	.word	0x0800836b
 80080d0:	08008259 	.word	0x08008259
 80080d4:	08008279 	.word	0x08008279
 80080d8:	08008299 	.word	0x08008299
 80080dc:	080082dd 	.word	0x080082dd
 80080e0:	080083ad 	.word	0x080083ad
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f000 819e 	beq.w	800842e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80080f8:	20c8      	movs	r0, #200	; 0xc8
 80080fa:	f001 fd9d 	bl	8009c38 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f001 fc93 	bl	8009a2a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008114:	e18b      	b.n	800842e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800811c:	2b01      	cmp	r3, #1
 800811e:	d107      	bne.n	8008130 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2202      	movs	r2, #2
 800812c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800812e:	e18d      	b.n	800844c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008136:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800813a:	d914      	bls.n	8008166 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008142:	3301      	adds	r3, #1
 8008144:	b2da      	uxtb	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008152:	2b03      	cmp	r3, #3
 8008154:	d903      	bls.n	800815e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	220d      	movs	r2, #13
 800815a:	701a      	strb	r2, [r3, #0]
      break;
 800815c:	e176      	b.n	800844c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	701a      	strb	r2, [r3, #0]
      break;
 8008164:	e172      	b.n	800844c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800816c:	f103 020a 	add.w	r2, r3, #10
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008176:	200a      	movs	r0, #10
 8008178:	f001 fd5e 	bl	8009c38 <USBH_Delay>
      break;
 800817c:	e166      	b.n	800844c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008184:	2b00      	cmp	r3, #0
 8008186:	d005      	beq.n	8008194 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800818e:	2104      	movs	r1, #4
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008194:	2064      	movs	r0, #100	; 0x64
 8008196:	f001 fd4f 	bl	8009c38 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f001 fc1e 	bl	80099dc <USBH_LL_GetSpeed>
 80081a0:	4603      	mov	r3, r0
 80081a2:	461a      	mov	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2205      	movs	r2, #5
 80081ae:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80081b0:	2100      	movs	r1, #0
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f001 fa29 	bl	800960a <USBH_AllocPipe>
 80081b8:	4603      	mov	r3, r0
 80081ba:	461a      	mov	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80081c0:	2180      	movs	r1, #128	; 0x80
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f001 fa21 	bl	800960a <USBH_AllocPipe>
 80081c8:	4603      	mov	r3, r0
 80081ca:	461a      	mov	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	7919      	ldrb	r1, [r3, #4]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80081e4:	b292      	uxth	r2, r2
 80081e6:	9202      	str	r2, [sp, #8]
 80081e8:	2200      	movs	r2, #0
 80081ea:	9201      	str	r2, [sp, #4]
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	4603      	mov	r3, r0
 80081f0:	2280      	movs	r2, #128	; 0x80
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f001 f9da 	bl	80095ac <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	7959      	ldrb	r1, [r3, #5]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800820c:	b292      	uxth	r2, r2
 800820e:	9202      	str	r2, [sp, #8]
 8008210:	2200      	movs	r2, #0
 8008212:	9201      	str	r2, [sp, #4]
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	4603      	mov	r3, r0
 8008218:	2200      	movs	r2, #0
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f001 f9c6 	bl	80095ac <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008220:	e114      	b.n	800844c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f918 	bl	8008458 <USBH_HandleEnum>
 8008228:	4603      	mov	r3, r0
 800822a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800822c:	7bbb      	ldrb	r3, [r7, #14]
 800822e:	b2db      	uxtb	r3, r3
 8008230:	2b00      	cmp	r3, #0
 8008232:	f040 80fe 	bne.w	8008432 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008244:	2b01      	cmp	r3, #1
 8008246:	d103      	bne.n	8008250 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2208      	movs	r2, #8
 800824c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800824e:	e0f0      	b.n	8008432 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2207      	movs	r2, #7
 8008254:	701a      	strb	r2, [r3, #0]
      break;
 8008256:	e0ec      	b.n	8008432 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800825e:	2b00      	cmp	r3, #0
 8008260:	f000 80e9 	beq.w	8008436 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800826a:	2101      	movs	r1, #1
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2208      	movs	r2, #8
 8008274:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008276:	e0de      	b.n	8008436 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800827e:	b29b      	uxth	r3, r3
 8008280:	4619      	mov	r1, r3
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fc2c 	bl	8008ae0 <USBH_SetCfg>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	f040 80d5 	bne.w	800843a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2209      	movs	r2, #9
 8008294:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008296:	e0d0      	b.n	800843a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800829e:	f003 0320 	and.w	r3, r3, #32
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d016      	beq.n	80082d4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80082a6:	2101      	movs	r1, #1
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fc3c 	bl	8008b26 <USBH_SetFeature>
 80082ae:	4603      	mov	r3, r0
 80082b0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80082b2:	7bbb      	ldrb	r3, [r7, #14]
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d103      	bne.n	80082c2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	220a      	movs	r2, #10
 80082be:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80082c0:	e0bd      	b.n	800843e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80082c2:	7bbb      	ldrb	r3, [r7, #14]
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	f040 80b9 	bne.w	800843e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	220a      	movs	r2, #10
 80082d0:	701a      	strb	r2, [r3, #0]
      break;
 80082d2:	e0b4      	b.n	800843e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	220a      	movs	r2, #10
 80082d8:	701a      	strb	r2, [r3, #0]
      break;
 80082da:	e0b0      	b.n	800843e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f000 80ad 	beq.w	8008442 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80082f0:	2300      	movs	r3, #0
 80082f2:	73fb      	strb	r3, [r7, #15]
 80082f4:	e016      	b.n	8008324 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80082f6:	7bfa      	ldrb	r2, [r7, #15]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	32de      	adds	r2, #222	; 0xde
 80082fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008300:	791a      	ldrb	r2, [r3, #4]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008308:	429a      	cmp	r2, r3
 800830a:	d108      	bne.n	800831e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800830c:	7bfa      	ldrb	r2, [r7, #15]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	32de      	adds	r2, #222	; 0xde
 8008312:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800831c:	e005      	b.n	800832a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800831e:	7bfb      	ldrb	r3, [r7, #15]
 8008320:	3301      	adds	r3, #1
 8008322:	73fb      	strb	r3, [r7, #15]
 8008324:	7bfb      	ldrb	r3, [r7, #15]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d0e5      	beq.n	80082f6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008330:	2b00      	cmp	r3, #0
 8008332:	d016      	beq.n	8008362 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	4798      	blx	r3
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d109      	bne.n	800835a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2206      	movs	r2, #6
 800834a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008352:	2103      	movs	r1, #3
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008358:	e073      	b.n	8008442 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	220d      	movs	r2, #13
 800835e:	701a      	strb	r2, [r3, #0]
      break;
 8008360:	e06f      	b.n	8008442 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	220d      	movs	r2, #13
 8008366:	701a      	strb	r2, [r3, #0]
      break;
 8008368:	e06b      	b.n	8008442 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008370:	2b00      	cmp	r3, #0
 8008372:	d017      	beq.n	80083a4 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	4798      	blx	r3
 8008380:	4603      	mov	r3, r0
 8008382:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008384:	7bbb      	ldrb	r3, [r7, #14]
 8008386:	b2db      	uxtb	r3, r3
 8008388:	2b00      	cmp	r3, #0
 800838a:	d103      	bne.n	8008394 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	220b      	movs	r2, #11
 8008390:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008392:	e058      	b.n	8008446 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8008394:	7bbb      	ldrb	r3, [r7, #14]
 8008396:	b2db      	uxtb	r3, r3
 8008398:	2b02      	cmp	r3, #2
 800839a:	d154      	bne.n	8008446 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	220d      	movs	r2, #13
 80083a0:	701a      	strb	r2, [r3, #0]
      break;
 80083a2:	e050      	b.n	8008446 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	220d      	movs	r2, #13
 80083a8:	701a      	strb	r2, [r3, #0]
      break;
 80083aa:	e04c      	b.n	8008446 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d049      	beq.n	800844a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	4798      	blx	r3
      }
      break;
 80083c2:	e042      	b.n	800844a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f7ff fd67 	bl	8007ea0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d009      	beq.n	80083f0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d005      	beq.n	8008406 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008400:	2105      	movs	r1, #5
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800840c:	b2db      	uxtb	r3, r3
 800840e:	2b01      	cmp	r3, #1
 8008410:	d107      	bne.n	8008422 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f7ff fe20 	bl	8008060 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008420:	e014      	b.n	800844c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f001 faa4 	bl	8009970 <USBH_LL_Start>
      break;
 8008428:	e010      	b.n	800844c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800842a:	bf00      	nop
 800842c:	e00e      	b.n	800844c <USBH_Process+0x3cc>
      break;
 800842e:	bf00      	nop
 8008430:	e00c      	b.n	800844c <USBH_Process+0x3cc>
      break;
 8008432:	bf00      	nop
 8008434:	e00a      	b.n	800844c <USBH_Process+0x3cc>
    break;
 8008436:	bf00      	nop
 8008438:	e008      	b.n	800844c <USBH_Process+0x3cc>
      break;
 800843a:	bf00      	nop
 800843c:	e006      	b.n	800844c <USBH_Process+0x3cc>
      break;
 800843e:	bf00      	nop
 8008440:	e004      	b.n	800844c <USBH_Process+0x3cc>
      break;
 8008442:	bf00      	nop
 8008444:	e002      	b.n	800844c <USBH_Process+0x3cc>
      break;
 8008446:	bf00      	nop
 8008448:	e000      	b.n	800844c <USBH_Process+0x3cc>
      break;
 800844a:	bf00      	nop
  }
  return USBH_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop

08008458 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b088      	sub	sp, #32
 800845c:	af04      	add	r7, sp, #16
 800845e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008460:	2301      	movs	r3, #1
 8008462:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008464:	2301      	movs	r3, #1
 8008466:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	785b      	ldrb	r3, [r3, #1]
 800846c:	2b07      	cmp	r3, #7
 800846e:	f200 81c1 	bhi.w	80087f4 <USBH_HandleEnum+0x39c>
 8008472:	a201      	add	r2, pc, #4	; (adr r2, 8008478 <USBH_HandleEnum+0x20>)
 8008474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008478:	08008499 	.word	0x08008499
 800847c:	08008557 	.word	0x08008557
 8008480:	080085c1 	.word	0x080085c1
 8008484:	0800864f 	.word	0x0800864f
 8008488:	080086b9 	.word	0x080086b9
 800848c:	08008729 	.word	0x08008729
 8008490:	0800876f 	.word	0x0800876f
 8008494:	080087b5 	.word	0x080087b5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008498:	2108      	movs	r1, #8
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fa50 	bl	8008940 <USBH_Get_DevDesc>
 80084a0:	4603      	mov	r3, r0
 80084a2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80084a4:	7bbb      	ldrb	r3, [r7, #14]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d130      	bne.n	800850c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	7919      	ldrb	r1, [r3, #4]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80084ce:	b292      	uxth	r2, r2
 80084d0:	9202      	str	r2, [sp, #8]
 80084d2:	2200      	movs	r2, #0
 80084d4:	9201      	str	r2, [sp, #4]
 80084d6:	9300      	str	r3, [sp, #0]
 80084d8:	4603      	mov	r3, r0
 80084da:	2280      	movs	r2, #128	; 0x80
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f001 f865 	bl	80095ac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	7959      	ldrb	r1, [r3, #5]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80084f6:	b292      	uxth	r2, r2
 80084f8:	9202      	str	r2, [sp, #8]
 80084fa:	2200      	movs	r2, #0
 80084fc:	9201      	str	r2, [sp, #4]
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	4603      	mov	r3, r0
 8008502:	2200      	movs	r2, #0
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f001 f851 	bl	80095ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800850a:	e175      	b.n	80087f8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800850c:	7bbb      	ldrb	r3, [r7, #14]
 800850e:	2b03      	cmp	r3, #3
 8008510:	f040 8172 	bne.w	80087f8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800851a:	3301      	adds	r3, #1
 800851c:	b2da      	uxtb	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800852a:	2b03      	cmp	r3, #3
 800852c:	d903      	bls.n	8008536 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	220d      	movs	r2, #13
 8008532:	701a      	strb	r2, [r3, #0]
      break;
 8008534:	e160      	b.n	80087f8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	795b      	ldrb	r3, [r3, #5]
 800853a:	4619      	mov	r1, r3
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f001 f885 	bl	800964c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	791b      	ldrb	r3, [r3, #4]
 8008546:	4619      	mov	r1, r3
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f001 f87f 	bl	800964c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	701a      	strb	r2, [r3, #0]
      break;
 8008554:	e150      	b.n	80087f8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008556:	2112      	movs	r1, #18
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 f9f1 	bl	8008940 <USBH_Get_DevDesc>
 800855e:	4603      	mov	r3, r0
 8008560:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008562:	7bbb      	ldrb	r3, [r7, #14]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d103      	bne.n	8008570 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2202      	movs	r2, #2
 800856c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800856e:	e145      	b.n	80087fc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008570:	7bbb      	ldrb	r3, [r7, #14]
 8008572:	2b03      	cmp	r3, #3
 8008574:	f040 8142 	bne.w	80087fc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800857e:	3301      	adds	r3, #1
 8008580:	b2da      	uxtb	r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800858e:	2b03      	cmp	r3, #3
 8008590:	d903      	bls.n	800859a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	220d      	movs	r2, #13
 8008596:	701a      	strb	r2, [r3, #0]
      break;
 8008598:	e130      	b.n	80087fc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	795b      	ldrb	r3, [r3, #5]
 800859e:	4619      	mov	r1, r3
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f001 f853 	bl	800964c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	791b      	ldrb	r3, [r3, #4]
 80085aa:	4619      	mov	r1, r3
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f001 f84d 	bl	800964c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	701a      	strb	r2, [r3, #0]
      break;
 80085be:	e11d      	b.n	80087fc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80085c0:	2101      	movs	r1, #1
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fa68 	bl	8008a98 <USBH_SetAddress>
 80085c8:	4603      	mov	r3, r0
 80085ca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80085cc:	7bbb      	ldrb	r3, [r7, #14]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d132      	bne.n	8008638 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80085d2:	2002      	movs	r0, #2
 80085d4:	f001 fb30 	bl	8009c38 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2203      	movs	r2, #3
 80085e4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	7919      	ldrb	r1, [r3, #4]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80085fa:	b292      	uxth	r2, r2
 80085fc:	9202      	str	r2, [sp, #8]
 80085fe:	2200      	movs	r2, #0
 8008600:	9201      	str	r2, [sp, #4]
 8008602:	9300      	str	r3, [sp, #0]
 8008604:	4603      	mov	r3, r0
 8008606:	2280      	movs	r2, #128	; 0x80
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 ffcf 	bl	80095ac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	7959      	ldrb	r1, [r3, #5]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008622:	b292      	uxth	r2, r2
 8008624:	9202      	str	r2, [sp, #8]
 8008626:	2200      	movs	r2, #0
 8008628:	9201      	str	r2, [sp, #4]
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	4603      	mov	r3, r0
 800862e:	2200      	movs	r2, #0
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 ffbb 	bl	80095ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008636:	e0e3      	b.n	8008800 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008638:	7bbb      	ldrb	r3, [r7, #14]
 800863a:	2b03      	cmp	r3, #3
 800863c:	f040 80e0 	bne.w	8008800 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	220d      	movs	r2, #13
 8008644:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	705a      	strb	r2, [r3, #1]
      break;
 800864c:	e0d8      	b.n	8008800 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800864e:	2109      	movs	r1, #9
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f99d 	bl	8008990 <USBH_Get_CfgDesc>
 8008656:	4603      	mov	r3, r0
 8008658:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800865a:	7bbb      	ldrb	r3, [r7, #14]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d103      	bne.n	8008668 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2204      	movs	r2, #4
 8008664:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008666:	e0cd      	b.n	8008804 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008668:	7bbb      	ldrb	r3, [r7, #14]
 800866a:	2b03      	cmp	r3, #3
 800866c:	f040 80ca 	bne.w	8008804 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008676:	3301      	adds	r3, #1
 8008678:	b2da      	uxtb	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008686:	2b03      	cmp	r3, #3
 8008688:	d903      	bls.n	8008692 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	220d      	movs	r2, #13
 800868e:	701a      	strb	r2, [r3, #0]
      break;
 8008690:	e0b8      	b.n	8008804 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	795b      	ldrb	r3, [r3, #5]
 8008696:	4619      	mov	r1, r3
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 ffd7 	bl	800964c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	791b      	ldrb	r3, [r3, #4]
 80086a2:	4619      	mov	r1, r3
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 ffd1 	bl	800964c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	701a      	strb	r2, [r3, #0]
      break;
 80086b6:	e0a5      	b.n	8008804 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80086be:	4619      	mov	r1, r3
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 f965 	bl	8008990 <USBH_Get_CfgDesc>
 80086c6:	4603      	mov	r3, r0
 80086c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80086ca:	7bbb      	ldrb	r3, [r7, #14]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d103      	bne.n	80086d8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2205      	movs	r2, #5
 80086d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80086d6:	e097      	b.n	8008808 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086d8:	7bbb      	ldrb	r3, [r7, #14]
 80086da:	2b03      	cmp	r3, #3
 80086dc:	f040 8094 	bne.w	8008808 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80086e6:	3301      	adds	r3, #1
 80086e8:	b2da      	uxtb	r2, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80086f6:	2b03      	cmp	r3, #3
 80086f8:	d903      	bls.n	8008702 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	220d      	movs	r2, #13
 80086fe:	701a      	strb	r2, [r3, #0]
      break;
 8008700:	e082      	b.n	8008808 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	795b      	ldrb	r3, [r3, #5]
 8008706:	4619      	mov	r1, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 ff9f 	bl	800964c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	791b      	ldrb	r3, [r3, #4]
 8008712:	4619      	mov	r1, r3
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 ff99 	bl	800964c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	701a      	strb	r2, [r3, #0]
      break;
 8008726:	e06f      	b.n	8008808 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800872e:	2b00      	cmp	r3, #0
 8008730:	d019      	beq.n	8008766 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800873e:	23ff      	movs	r3, #255	; 0xff
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 f949 	bl	80089d8 <USBH_Get_StringDesc>
 8008746:	4603      	mov	r3, r0
 8008748:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800874a:	7bbb      	ldrb	r3, [r7, #14]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d103      	bne.n	8008758 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2206      	movs	r2, #6
 8008754:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008756:	e059      	b.n	800880c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008758:	7bbb      	ldrb	r3, [r7, #14]
 800875a:	2b03      	cmp	r3, #3
 800875c:	d156      	bne.n	800880c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2206      	movs	r2, #6
 8008762:	705a      	strb	r2, [r3, #1]
      break;
 8008764:	e052      	b.n	800880c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2206      	movs	r2, #6
 800876a:	705a      	strb	r2, [r3, #1]
      break;
 800876c:	e04e      	b.n	800880c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008774:	2b00      	cmp	r3, #0
 8008776:	d019      	beq.n	80087ac <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008784:	23ff      	movs	r3, #255	; 0xff
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 f926 	bl	80089d8 <USBH_Get_StringDesc>
 800878c:	4603      	mov	r3, r0
 800878e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008790:	7bbb      	ldrb	r3, [r7, #14]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d103      	bne.n	800879e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2207      	movs	r2, #7
 800879a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800879c:	e038      	b.n	8008810 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800879e:	7bbb      	ldrb	r3, [r7, #14]
 80087a0:	2b03      	cmp	r3, #3
 80087a2:	d135      	bne.n	8008810 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2207      	movs	r2, #7
 80087a8:	705a      	strb	r2, [r3, #1]
      break;
 80087aa:	e031      	b.n	8008810 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2207      	movs	r2, #7
 80087b0:	705a      	strb	r2, [r3, #1]
      break;
 80087b2:	e02d      	b.n	8008810 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d017      	beq.n	80087ee <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80087ca:	23ff      	movs	r3, #255	; 0xff
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 f903 	bl	80089d8 <USBH_Get_StringDesc>
 80087d2:	4603      	mov	r3, r0
 80087d4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80087d6:	7bbb      	ldrb	r3, [r7, #14]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d102      	bne.n	80087e2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80087dc:	2300      	movs	r3, #0
 80087de:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80087e0:	e018      	b.n	8008814 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80087e2:	7bbb      	ldrb	r3, [r7, #14]
 80087e4:	2b03      	cmp	r3, #3
 80087e6:	d115      	bne.n	8008814 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80087e8:	2300      	movs	r3, #0
 80087ea:	73fb      	strb	r3, [r7, #15]
      break;
 80087ec:	e012      	b.n	8008814 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	73fb      	strb	r3, [r7, #15]
      break;
 80087f2:	e00f      	b.n	8008814 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80087f4:	bf00      	nop
 80087f6:	e00e      	b.n	8008816 <USBH_HandleEnum+0x3be>
      break;
 80087f8:	bf00      	nop
 80087fa:	e00c      	b.n	8008816 <USBH_HandleEnum+0x3be>
      break;
 80087fc:	bf00      	nop
 80087fe:	e00a      	b.n	8008816 <USBH_HandleEnum+0x3be>
      break;
 8008800:	bf00      	nop
 8008802:	e008      	b.n	8008816 <USBH_HandleEnum+0x3be>
      break;
 8008804:	bf00      	nop
 8008806:	e006      	b.n	8008816 <USBH_HandleEnum+0x3be>
      break;
 8008808:	bf00      	nop
 800880a:	e004      	b.n	8008816 <USBH_HandleEnum+0x3be>
      break;
 800880c:	bf00      	nop
 800880e:	e002      	b.n	8008816 <USBH_HandleEnum+0x3be>
      break;
 8008810:	bf00      	nop
 8008812:	e000      	b.n	8008816 <USBH_HandleEnum+0x3be>
      break;
 8008814:	bf00      	nop
  }
  return Status;
 8008816:	7bfb      	ldrb	r3, [r7, #15]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008832:	bf00      	nop
 8008834:	370c      	adds	r7, #12
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr

0800883e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b082      	sub	sp, #8
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800884c:	1c5a      	adds	r2, r3, #1
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 f804 	bl	8008862 <USBH_HandleSof>
}
 800885a:	bf00      	nop
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b082      	sub	sp, #8
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	b2db      	uxtb	r3, r3
 8008870:	2b0b      	cmp	r3, #11
 8008872:	d10a      	bne.n	800888a <USBH_HandleSof+0x28>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800887a:	2b00      	cmp	r3, #0
 800887c:	d005      	beq.n	800888a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008884:	699b      	ldr	r3, [r3, #24]
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	4798      	blx	r3
  }
}
 800888a:	bf00      	nop
 800888c:	3708      	adds	r7, #8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008892:	b480      	push	{r7}
 8008894:	b083      	sub	sp, #12
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2201      	movs	r2, #1
 800889e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80088a2:	bf00      	nop
}
 80088a4:	370c      	adds	r7, #12
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr

080088ae <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80088ae:	b480      	push	{r7}
 80088b0:	b083      	sub	sp, #12
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80088be:	bf00      	nop
}
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr

080088ca <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80088ca:	b480      	push	{r7}
 80088cc:	b083      	sub	sp, #12
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f001 f844 	bl	80099a6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	791b      	ldrb	r3, [r3, #4]
 8008922:	4619      	mov	r1, r3
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 fe91 	bl	800964c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	795b      	ldrb	r3, [r3, #5]
 800892e:	4619      	mov	r1, r3
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 fe8b 	bl	800964c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	3708      	adds	r7, #8
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b086      	sub	sp, #24
 8008944:	af02      	add	r7, sp, #8
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	460b      	mov	r3, r1
 800894a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008952:	78fb      	ldrb	r3, [r7, #3]
 8008954:	b29b      	uxth	r3, r3
 8008956:	9300      	str	r3, [sp, #0]
 8008958:	4613      	mov	r3, r2
 800895a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800895e:	2100      	movs	r1, #0
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 f864 	bl	8008a2e <USBH_GetDescriptor>
 8008966:	4603      	mov	r3, r0
 8008968:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800896a:	7bfb      	ldrb	r3, [r7, #15]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10a      	bne.n	8008986 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800897c:	78fa      	ldrb	r2, [r7, #3]
 800897e:	b292      	uxth	r2, r2
 8008980:	4619      	mov	r1, r3
 8008982:	f000 f918 	bl	8008bb6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008986:	7bfb      	ldrb	r3, [r7, #15]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af02      	add	r7, sp, #8
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	460b      	mov	r3, r1
 800899a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	331c      	adds	r3, #28
 80089a0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80089a2:	887b      	ldrh	r3, [r7, #2]
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089ac:	2100      	movs	r1, #0
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 f83d 	bl	8008a2e <USBH_GetDescriptor>
 80089b4:	4603      	mov	r3, r0
 80089b6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80089b8:	7bfb      	ldrb	r3, [r7, #15]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d107      	bne.n	80089ce <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80089be:	887b      	ldrh	r3, [r7, #2]
 80089c0:	461a      	mov	r2, r3
 80089c2:	68b9      	ldr	r1, [r7, #8]
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f987 	bl	8008cd8 <USBH_ParseCfgDesc>
 80089ca:	4603      	mov	r3, r0
 80089cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80089ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b088      	sub	sp, #32
 80089dc:	af02      	add	r7, sp, #8
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	607a      	str	r2, [r7, #4]
 80089e2:	461a      	mov	r2, r3
 80089e4:	460b      	mov	r3, r1
 80089e6:	72fb      	strb	r3, [r7, #11]
 80089e8:	4613      	mov	r3, r2
 80089ea:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80089ec:	7afb      	ldrb	r3, [r7, #11]
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80089f4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80089fc:	893b      	ldrh	r3, [r7, #8]
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	460b      	mov	r3, r1
 8008a02:	2100      	movs	r1, #0
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f000 f812 	bl	8008a2e <USBH_GetDescriptor>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008a0e:	7dfb      	ldrb	r3, [r7, #23]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d107      	bne.n	8008a24 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008a1a:	893a      	ldrh	r2, [r7, #8]
 8008a1c:	6879      	ldr	r1, [r7, #4]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f000 fb24 	bl	800906c <USBH_ParseStringDesc>
  }

  return status;
 8008a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3718      	adds	r7, #24
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b084      	sub	sp, #16
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	60f8      	str	r0, [r7, #12]
 8008a36:	607b      	str	r3, [r7, #4]
 8008a38:	460b      	mov	r3, r1
 8008a3a:	72fb      	strb	r3, [r7, #11]
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	789b      	ldrb	r3, [r3, #2]
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d11c      	bne.n	8008a82 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008a48:	7afb      	ldrb	r3, [r7, #11]
 8008a4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008a4e:	b2da      	uxtb	r2, r3
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2206      	movs	r2, #6
 8008a58:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	893a      	ldrh	r2, [r7, #8]
 8008a5e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008a60:	893b      	ldrh	r3, [r7, #8]
 8008a62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008a66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a6a:	d104      	bne.n	8008a76 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f240 4209 	movw	r2, #1033	; 0x409
 8008a72:	829a      	strh	r2, [r3, #20]
 8008a74:	e002      	b.n	8008a7c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	8b3a      	ldrh	r2, [r7, #24]
 8008a80:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008a82:	8b3b      	ldrh	r3, [r7, #24]
 8008a84:	461a      	mov	r2, r3
 8008a86:	6879      	ldr	r1, [r7, #4]
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f000 fb3d 	bl	8009108 <USBH_CtlReq>
 8008a8e:	4603      	mov	r3, r0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	789b      	ldrb	r3, [r3, #2]
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d10f      	bne.n	8008acc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2205      	movs	r2, #5
 8008ab6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008ab8:	78fb      	ldrb	r3, [r7, #3]
 8008aba:	b29a      	uxth	r2, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008acc:	2200      	movs	r2, #0
 8008ace:	2100      	movs	r1, #0
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 fb19 	bl	8009108 <USBH_CtlReq>
 8008ad6:	4603      	mov	r3, r0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3708      	adds	r7, #8
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	789b      	ldrb	r3, [r3, #2]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d10e      	bne.n	8008b12 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2209      	movs	r2, #9
 8008afe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	887a      	ldrh	r2, [r7, #2]
 8008b04:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008b12:	2200      	movs	r2, #0
 8008b14:	2100      	movs	r1, #0
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 faf6 	bl	8009108 <USBH_CtlReq>
 8008b1c:	4603      	mov	r3, r0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b082      	sub	sp, #8
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
 8008b2e:	460b      	mov	r3, r1
 8008b30:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	789b      	ldrb	r3, [r3, #2]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d10f      	bne.n	8008b5a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2203      	movs	r2, #3
 8008b44:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008b46:	78fb      	ldrb	r3, [r7, #3]
 8008b48:	b29a      	uxth	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 fad2 	bl	8009108 <USBH_CtlReq>
 8008b64:	4603      	mov	r3, r0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3708      	adds	r7, #8
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b082      	sub	sp, #8
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
 8008b76:	460b      	mov	r3, r1
 8008b78:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	789b      	ldrb	r3, [r3, #2]
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d10f      	bne.n	8008ba2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2202      	movs	r2, #2
 8008b86:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008b94:	78fb      	ldrb	r3, [r7, #3]
 8008b96:	b29a      	uxth	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 faae 	bl	8009108 <USBH_CtlReq>
 8008bac:	4603      	mov	r3, r0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b085      	sub	sp, #20
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	60f8      	str	r0, [r7, #12]
 8008bbe:	60b9      	str	r1, [r7, #8]
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	781a      	ldrb	r2, [r3, #0]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	785a      	ldrb	r2, [r3, #1]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	3302      	adds	r3, #2
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	3303      	adds	r3, #3
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	021b      	lsls	r3, r3, #8
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	4313      	orrs	r3, r2
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	791a      	ldrb	r2, [r3, #4]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	795a      	ldrb	r2, [r3, #5]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	799a      	ldrb	r2, [r3, #6]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	79da      	ldrb	r2, [r3, #7]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	79db      	ldrb	r3, [r3, #7]
 8008c14:	2b20      	cmp	r3, #32
 8008c16:	dc11      	bgt.n	8008c3c <USBH_ParseDevDesc+0x86>
 8008c18:	2b08      	cmp	r3, #8
 8008c1a:	db16      	blt.n	8008c4a <USBH_ParseDevDesc+0x94>
 8008c1c:	3b08      	subs	r3, #8
 8008c1e:	2201      	movs	r2, #1
 8008c20:	fa02 f303 	lsl.w	r3, r2, r3
 8008c24:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	bf14      	ite	ne
 8008c30:	2301      	movne	r3, #1
 8008c32:	2300      	moveq	r3, #0
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d102      	bne.n	8008c40 <USBH_ParseDevDesc+0x8a>
 8008c3a:	e006      	b.n	8008c4a <USBH_ParseDevDesc+0x94>
 8008c3c:	2b40      	cmp	r3, #64	; 0x40
 8008c3e:	d104      	bne.n	8008c4a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	79da      	ldrb	r2, [r3, #7]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	71da      	strb	r2, [r3, #7]
      break;
 8008c48:	e003      	b.n	8008c52 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2240      	movs	r2, #64	; 0x40
 8008c4e:	71da      	strb	r2, [r3, #7]
      break;
 8008c50:	bf00      	nop
  }

  if (length > 8U)
 8008c52:	88fb      	ldrh	r3, [r7, #6]
 8008c54:	2b08      	cmp	r3, #8
 8008c56:	d939      	bls.n	8008ccc <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	3308      	adds	r3, #8
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	3309      	adds	r3, #9
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	021b      	lsls	r3, r3, #8
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	b29a      	uxth	r2, r3
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	330a      	adds	r3, #10
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	330b      	adds	r3, #11
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	021b      	lsls	r3, r3, #8
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	b29a      	uxth	r2, r3
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	330c      	adds	r3, #12
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	330d      	adds	r3, #13
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	021b      	lsls	r3, r3, #8
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	7b9a      	ldrb	r2, [r3, #14]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	7bda      	ldrb	r2, [r3, #15]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	7c1a      	ldrb	r2, [r3, #16]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	7c5a      	ldrb	r2, [r3, #17]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	745a      	strb	r2, [r3, #17]
  }
}
 8008ccc:	bf00      	nop
 8008cce:	3714      	adds	r7, #20
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b08c      	sub	sp, #48	; 0x30
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008cec:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	781a      	ldrb	r2, [r3, #0]
 8008d0c:	6a3b      	ldr	r3, [r7, #32]
 8008d0e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	785a      	ldrb	r2, [r3, #1]
 8008d14:	6a3b      	ldr	r3, [r7, #32]
 8008d16:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	3302      	adds	r3, #2
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	3303      	adds	r3, #3
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	021b      	lsls	r3, r3, #8
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d34:	bf28      	it	cs
 8008d36:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008d3a:	b29a      	uxth	r2, r3
 8008d3c:	6a3b      	ldr	r3, [r7, #32]
 8008d3e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	791a      	ldrb	r2, [r3, #4]
 8008d44:	6a3b      	ldr	r3, [r7, #32]
 8008d46:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	795a      	ldrb	r2, [r3, #5]
 8008d4c:	6a3b      	ldr	r3, [r7, #32]
 8008d4e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	799a      	ldrb	r2, [r3, #6]
 8008d54:	6a3b      	ldr	r3, [r7, #32]
 8008d56:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	79da      	ldrb	r2, [r3, #7]
 8008d5c:	6a3b      	ldr	r3, [r7, #32]
 8008d5e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	7a1a      	ldrb	r2, [r3, #8]
 8008d64:	6a3b      	ldr	r3, [r7, #32]
 8008d66:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008d68:	6a3b      	ldr	r3, [r7, #32]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	2b09      	cmp	r3, #9
 8008d6e:	d002      	beq.n	8008d76 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008d70:	6a3b      	ldr	r3, [r7, #32]
 8008d72:	2209      	movs	r2, #9
 8008d74:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008d76:	88fb      	ldrh	r3, [r7, #6]
 8008d78:	2b09      	cmp	r3, #9
 8008d7a:	f240 809d 	bls.w	8008eb8 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008d7e:	2309      	movs	r3, #9
 8008d80:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008d82:	2300      	movs	r3, #0
 8008d84:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008d86:	e081      	b.n	8008e8c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008d88:	f107 0316 	add.w	r3, r7, #22
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d90:	f000 f99f 	bl	80090d2 <USBH_GetNextDesc>
 8008d94:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d98:	785b      	ldrb	r3, [r3, #1]
 8008d9a:	2b04      	cmp	r3, #4
 8008d9c:	d176      	bne.n	8008e8c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	2b09      	cmp	r3, #9
 8008da4:	d002      	beq.n	8008dac <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da8:	2209      	movs	r2, #9
 8008daa:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008dac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008db0:	221a      	movs	r2, #26
 8008db2:	fb02 f303 	mul.w	r3, r2, r3
 8008db6:	3308      	adds	r3, #8
 8008db8:	6a3a      	ldr	r2, [r7, #32]
 8008dba:	4413      	add	r3, r2
 8008dbc:	3302      	adds	r3, #2
 8008dbe:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008dc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008dc2:	69f8      	ldr	r0, [r7, #28]
 8008dc4:	f000 f87e 	bl	8008ec4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008dd2:	e043      	b.n	8008e5c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008dd4:	f107 0316 	add.w	r3, r7, #22
 8008dd8:	4619      	mov	r1, r3
 8008dda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ddc:	f000 f979 	bl	80090d2 <USBH_GetNextDesc>
 8008de0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de4:	785b      	ldrb	r3, [r3, #1]
 8008de6:	2b05      	cmp	r3, #5
 8008de8:	d138      	bne.n	8008e5c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	795b      	ldrb	r3, [r3, #5]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d10f      	bne.n	8008e12 <USBH_ParseCfgDesc+0x13a>
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	799b      	ldrb	r3, [r3, #6]
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	d10b      	bne.n	8008e12 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	79db      	ldrb	r3, [r3, #7]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d10f      	bne.n	8008e22 <USBH_ParseCfgDesc+0x14a>
 8008e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	2b09      	cmp	r3, #9
 8008e08:	d00b      	beq.n	8008e22 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0c:	2209      	movs	r2, #9
 8008e0e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008e10:	e007      	b.n	8008e22 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	2b07      	cmp	r3, #7
 8008e18:	d004      	beq.n	8008e24 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1c:	2207      	movs	r2, #7
 8008e1e:	701a      	strb	r2, [r3, #0]
 8008e20:	e000      	b.n	8008e24 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008e22:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008e24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e28:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008e2c:	3201      	adds	r2, #1
 8008e2e:	00d2      	lsls	r2, r2, #3
 8008e30:	211a      	movs	r1, #26
 8008e32:	fb01 f303 	mul.w	r3, r1, r3
 8008e36:	4413      	add	r3, r2
 8008e38:	3308      	adds	r3, #8
 8008e3a:	6a3a      	ldr	r2, [r7, #32]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	3304      	adds	r3, #4
 8008e40:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008e42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e44:	69b9      	ldr	r1, [r7, #24]
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f000 f86b 	bl	8008f22 <USBH_ParseEPDesc>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008e52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e56:	3301      	adds	r3, #1
 8008e58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	791b      	ldrb	r3, [r3, #4]
 8008e60:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d204      	bcs.n	8008e72 <USBH_ParseCfgDesc+0x19a>
 8008e68:	6a3b      	ldr	r3, [r7, #32]
 8008e6a:	885a      	ldrh	r2, [r3, #2]
 8008e6c:	8afb      	ldrh	r3, [r7, #22]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d8b0      	bhi.n	8008dd4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	791b      	ldrb	r3, [r3, #4]
 8008e76:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d201      	bcs.n	8008e82 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008e7e:	2303      	movs	r3, #3
 8008e80:	e01c      	b.n	8008ebc <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008e82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e86:	3301      	adds	r3, #1
 8008e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d805      	bhi.n	8008ea0 <USBH_ParseCfgDesc+0x1c8>
 8008e94:	6a3b      	ldr	r3, [r7, #32]
 8008e96:	885a      	ldrh	r2, [r3, #2]
 8008e98:	8afb      	ldrh	r3, [r7, #22]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	f63f af74 	bhi.w	8008d88 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008ea0:	6a3b      	ldr	r3, [r7, #32]
 8008ea2:	791b      	ldrb	r3, [r3, #4]
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	bf28      	it	cs
 8008ea8:	2302      	movcs	r3, #2
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d201      	bcs.n	8008eb8 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	e001      	b.n	8008ebc <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008eb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3730      	adds	r7, #48	; 0x30
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	781a      	ldrb	r2, [r3, #0]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	785a      	ldrb	r2, [r3, #1]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	789a      	ldrb	r2, [r3, #2]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	78da      	ldrb	r2, [r3, #3]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	791a      	ldrb	r2, [r3, #4]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	795a      	ldrb	r2, [r3, #5]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	799a      	ldrb	r2, [r3, #6]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	79da      	ldrb	r2, [r3, #7]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	7a1a      	ldrb	r2, [r3, #8]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	721a      	strb	r2, [r3, #8]
}
 8008f16:	bf00      	nop
 8008f18:	370c      	adds	r7, #12
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr

08008f22 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008f22:	b480      	push	{r7}
 8008f24:	b087      	sub	sp, #28
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	60f8      	str	r0, [r7, #12]
 8008f2a:	60b9      	str	r1, [r7, #8]
 8008f2c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	781a      	ldrb	r2, [r3, #0]
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	785a      	ldrb	r2, [r3, #1]
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	789a      	ldrb	r2, [r3, #2]
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	78da      	ldrb	r2, [r3, #3]
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	3304      	adds	r3, #4
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	b29a      	uxth	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	3305      	adds	r3, #5
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	021b      	lsls	r3, r3, #8
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	4313      	orrs	r3, r2
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	799a      	ldrb	r2, [r3, #6]
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	889b      	ldrh	r3, [r3, #4]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d102      	bne.n	8008f84 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008f7e:	2303      	movs	r3, #3
 8008f80:	75fb      	strb	r3, [r7, #23]
 8008f82:	e033      	b.n	8008fec <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	889b      	ldrh	r3, [r3, #4]
 8008f88:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008f8c:	f023 0307 	bic.w	r3, r3, #7
 8008f90:	b29a      	uxth	r2, r3
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	889b      	ldrh	r3, [r3, #4]
 8008f9a:	b21a      	sxth	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	3304      	adds	r3, #4
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	b299      	uxth	r1, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	3305      	adds	r3, #5
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	021b      	lsls	r3, r3, #8
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	430b      	orrs	r3, r1
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d110      	bne.n	8008fde <USBH_ParseEPDesc+0xbc>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	3304      	adds	r3, #4
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	b299      	uxth	r1, r3
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	3305      	adds	r3, #5
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	021b      	lsls	r3, r3, #8
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	430b      	orrs	r3, r1
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	b21b      	sxth	r3, r3
 8008fd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008fda:	b21b      	sxth	r3, r3
 8008fdc:	e001      	b.n	8008fe2 <USBH_ParseEPDesc+0xc0>
 8008fde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	b21b      	sxth	r3, r3
 8008fe6:	b29a      	uxth	r2, r3
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d116      	bne.n	8009024 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	78db      	ldrb	r3, [r3, #3]
 8008ffa:	f003 0303 	and.w	r3, r3, #3
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d005      	beq.n	800900e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	78db      	ldrb	r3, [r3, #3]
 8009006:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800900a:	2b03      	cmp	r3, #3
 800900c:	d127      	bne.n	800905e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	799b      	ldrb	r3, [r3, #6]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d003      	beq.n	800901e <USBH_ParseEPDesc+0xfc>
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	799b      	ldrb	r3, [r3, #6]
 800901a:	2b10      	cmp	r3, #16
 800901c:	d91f      	bls.n	800905e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800901e:	2303      	movs	r3, #3
 8009020:	75fb      	strb	r3, [r7, #23]
 8009022:	e01c      	b.n	800905e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	78db      	ldrb	r3, [r3, #3]
 8009028:	f003 0303 	and.w	r3, r3, #3
 800902c:	2b01      	cmp	r3, #1
 800902e:	d10a      	bne.n	8009046 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	799b      	ldrb	r3, [r3, #6]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d003      	beq.n	8009040 <USBH_ParseEPDesc+0x11e>
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	799b      	ldrb	r3, [r3, #6]
 800903c:	2b10      	cmp	r3, #16
 800903e:	d90e      	bls.n	800905e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009040:	2303      	movs	r3, #3
 8009042:	75fb      	strb	r3, [r7, #23]
 8009044:	e00b      	b.n	800905e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	78db      	ldrb	r3, [r3, #3]
 800904a:	f003 0303 	and.w	r3, r3, #3
 800904e:	2b03      	cmp	r3, #3
 8009050:	d105      	bne.n	800905e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	799b      	ldrb	r3, [r3, #6]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d101      	bne.n	800905e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800905a:	2303      	movs	r3, #3
 800905c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800905e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009060:	4618      	mov	r0, r3
 8009062:	371c      	adds	r7, #28
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800906c:	b480      	push	{r7}
 800906e:	b087      	sub	sp, #28
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	4613      	mov	r3, r2
 8009078:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	3301      	adds	r3, #1
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	2b03      	cmp	r3, #3
 8009082:	d120      	bne.n	80090c6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	1e9a      	subs	r2, r3, #2
 800908a:	88fb      	ldrh	r3, [r7, #6]
 800908c:	4293      	cmp	r3, r2
 800908e:	bf28      	it	cs
 8009090:	4613      	movcs	r3, r2
 8009092:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	3302      	adds	r3, #2
 8009098:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800909a:	2300      	movs	r3, #0
 800909c:	82fb      	strh	r3, [r7, #22]
 800909e:	e00b      	b.n	80090b8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80090a0:	8afb      	ldrh	r3, [r7, #22]
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	4413      	add	r3, r2
 80090a6:	781a      	ldrb	r2, [r3, #0]
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	701a      	strb	r2, [r3, #0]
      pdest++;
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	3301      	adds	r3, #1
 80090b0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80090b2:	8afb      	ldrh	r3, [r7, #22]
 80090b4:	3302      	adds	r3, #2
 80090b6:	82fb      	strh	r3, [r7, #22]
 80090b8:	8afa      	ldrh	r2, [r7, #22]
 80090ba:	8abb      	ldrh	r3, [r7, #20]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d3ef      	bcc.n	80090a0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	2200      	movs	r2, #0
 80090c4:	701a      	strb	r2, [r3, #0]
  }
}
 80090c6:	bf00      	nop
 80090c8:	371c      	adds	r7, #28
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr

080090d2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80090d2:	b480      	push	{r7}
 80090d4:	b085      	sub	sp, #20
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	881a      	ldrh	r2, [r3, #0]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	4413      	add	r3, r2
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4413      	add	r3, r2
 80090f8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80090fa:	68fb      	ldr	r3, [r7, #12]
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3714      	adds	r7, #20
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b086      	sub	sp, #24
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	4613      	mov	r3, r2
 8009114:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009116:	2301      	movs	r3, #1
 8009118:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	789b      	ldrb	r3, [r3, #2]
 800911e:	2b01      	cmp	r3, #1
 8009120:	d002      	beq.n	8009128 <USBH_CtlReq+0x20>
 8009122:	2b02      	cmp	r3, #2
 8009124:	d00f      	beq.n	8009146 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009126:	e027      	b.n	8009178 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	88fa      	ldrh	r2, [r7, #6]
 8009132:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2201      	movs	r2, #1
 8009138:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2202      	movs	r2, #2
 800913e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009140:	2301      	movs	r3, #1
 8009142:	75fb      	strb	r3, [r7, #23]
      break;
 8009144:	e018      	b.n	8009178 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009146:	68f8      	ldr	r0, [r7, #12]
 8009148:	f000 f81c 	bl	8009184 <USBH_HandleControl>
 800914c:	4603      	mov	r3, r0
 800914e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009150:	7dfb      	ldrb	r3, [r7, #23]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d002      	beq.n	800915c <USBH_CtlReq+0x54>
 8009156:	7dfb      	ldrb	r3, [r7, #23]
 8009158:	2b03      	cmp	r3, #3
 800915a:	d106      	bne.n	800916a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2201      	movs	r2, #1
 8009160:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2200      	movs	r2, #0
 8009166:	761a      	strb	r2, [r3, #24]
      break;
 8009168:	e005      	b.n	8009176 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800916a:	7dfb      	ldrb	r3, [r7, #23]
 800916c:	2b02      	cmp	r3, #2
 800916e:	d102      	bne.n	8009176 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2201      	movs	r2, #1
 8009174:	709a      	strb	r2, [r3, #2]
      break;
 8009176:	bf00      	nop
  }
  return status;
 8009178:	7dfb      	ldrb	r3, [r7, #23]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3718      	adds	r7, #24
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
	...

08009184 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b086      	sub	sp, #24
 8009188:	af02      	add	r7, sp, #8
 800918a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800918c:	2301      	movs	r3, #1
 800918e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009190:	2300      	movs	r3, #0
 8009192:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	7e1b      	ldrb	r3, [r3, #24]
 8009198:	3b01      	subs	r3, #1
 800919a:	2b0a      	cmp	r3, #10
 800919c:	f200 8156 	bhi.w	800944c <USBH_HandleControl+0x2c8>
 80091a0:	a201      	add	r2, pc, #4	; (adr r2, 80091a8 <USBH_HandleControl+0x24>)
 80091a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a6:	bf00      	nop
 80091a8:	080091d5 	.word	0x080091d5
 80091ac:	080091ef 	.word	0x080091ef
 80091b0:	08009259 	.word	0x08009259
 80091b4:	0800927f 	.word	0x0800927f
 80091b8:	080092b7 	.word	0x080092b7
 80091bc:	080092e1 	.word	0x080092e1
 80091c0:	08009333 	.word	0x08009333
 80091c4:	08009355 	.word	0x08009355
 80091c8:	08009391 	.word	0x08009391
 80091cc:	080093b7 	.word	0x080093b7
 80091d0:	080093f5 	.word	0x080093f5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f103 0110 	add.w	r1, r3, #16
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	795b      	ldrb	r3, [r3, #5]
 80091de:	461a      	mov	r2, r3
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 f943 	bl	800946c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2202      	movs	r2, #2
 80091ea:	761a      	strb	r2, [r3, #24]
      break;
 80091ec:	e139      	b.n	8009462 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	795b      	ldrb	r3, [r3, #5]
 80091f2:	4619      	mov	r1, r3
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 fcc5 	bl	8009b84 <USBH_LL_GetURBState>
 80091fa:	4603      	mov	r3, r0
 80091fc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80091fe:	7bbb      	ldrb	r3, [r7, #14]
 8009200:	2b01      	cmp	r3, #1
 8009202:	d11e      	bne.n	8009242 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	7c1b      	ldrb	r3, [r3, #16]
 8009208:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800920c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	8adb      	ldrh	r3, [r3, #22]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00a      	beq.n	800922c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009216:	7b7b      	ldrb	r3, [r7, #13]
 8009218:	2b80      	cmp	r3, #128	; 0x80
 800921a:	d103      	bne.n	8009224 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2203      	movs	r2, #3
 8009220:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009222:	e115      	b.n	8009450 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2205      	movs	r2, #5
 8009228:	761a      	strb	r2, [r3, #24]
      break;
 800922a:	e111      	b.n	8009450 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800922c:	7b7b      	ldrb	r3, [r7, #13]
 800922e:	2b80      	cmp	r3, #128	; 0x80
 8009230:	d103      	bne.n	800923a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2209      	movs	r2, #9
 8009236:	761a      	strb	r2, [r3, #24]
      break;
 8009238:	e10a      	b.n	8009450 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2207      	movs	r2, #7
 800923e:	761a      	strb	r2, [r3, #24]
      break;
 8009240:	e106      	b.n	8009450 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009242:	7bbb      	ldrb	r3, [r7, #14]
 8009244:	2b04      	cmp	r3, #4
 8009246:	d003      	beq.n	8009250 <USBH_HandleControl+0xcc>
 8009248:	7bbb      	ldrb	r3, [r7, #14]
 800924a:	2b02      	cmp	r3, #2
 800924c:	f040 8100 	bne.w	8009450 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	220b      	movs	r2, #11
 8009254:	761a      	strb	r2, [r3, #24]
      break;
 8009256:	e0fb      	b.n	8009450 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800925e:	b29a      	uxth	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6899      	ldr	r1, [r3, #8]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	899a      	ldrh	r2, [r3, #12]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	791b      	ldrb	r3, [r3, #4]
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 f93a 	bl	80094ea <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2204      	movs	r2, #4
 800927a:	761a      	strb	r2, [r3, #24]
      break;
 800927c:	e0f1      	b.n	8009462 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	791b      	ldrb	r3, [r3, #4]
 8009282:	4619      	mov	r1, r3
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 fc7d 	bl	8009b84 <USBH_LL_GetURBState>
 800928a:	4603      	mov	r3, r0
 800928c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800928e:	7bbb      	ldrb	r3, [r7, #14]
 8009290:	2b01      	cmp	r3, #1
 8009292:	d102      	bne.n	800929a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2209      	movs	r2, #9
 8009298:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800929a:	7bbb      	ldrb	r3, [r7, #14]
 800929c:	2b05      	cmp	r3, #5
 800929e:	d102      	bne.n	80092a6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80092a0:	2303      	movs	r3, #3
 80092a2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80092a4:	e0d6      	b.n	8009454 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80092a6:	7bbb      	ldrb	r3, [r7, #14]
 80092a8:	2b04      	cmp	r3, #4
 80092aa:	f040 80d3 	bne.w	8009454 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	220b      	movs	r2, #11
 80092b2:	761a      	strb	r2, [r3, #24]
      break;
 80092b4:	e0ce      	b.n	8009454 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6899      	ldr	r1, [r3, #8]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	899a      	ldrh	r2, [r3, #12]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	795b      	ldrb	r3, [r3, #5]
 80092c2:	2001      	movs	r0, #1
 80092c4:	9000      	str	r0, [sp, #0]
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 f8ea 	bl	80094a0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80092d2:	b29a      	uxth	r2, r3
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2206      	movs	r2, #6
 80092dc:	761a      	strb	r2, [r3, #24]
      break;
 80092de:	e0c0      	b.n	8009462 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	795b      	ldrb	r3, [r3, #5]
 80092e4:	4619      	mov	r1, r3
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 fc4c 	bl	8009b84 <USBH_LL_GetURBState>
 80092ec:	4603      	mov	r3, r0
 80092ee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80092f0:	7bbb      	ldrb	r3, [r7, #14]
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d103      	bne.n	80092fe <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2207      	movs	r2, #7
 80092fa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80092fc:	e0ac      	b.n	8009458 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80092fe:	7bbb      	ldrb	r3, [r7, #14]
 8009300:	2b05      	cmp	r3, #5
 8009302:	d105      	bne.n	8009310 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	220c      	movs	r2, #12
 8009308:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800930a:	2303      	movs	r3, #3
 800930c:	73fb      	strb	r3, [r7, #15]
      break;
 800930e:	e0a3      	b.n	8009458 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009310:	7bbb      	ldrb	r3, [r7, #14]
 8009312:	2b02      	cmp	r3, #2
 8009314:	d103      	bne.n	800931e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2205      	movs	r2, #5
 800931a:	761a      	strb	r2, [r3, #24]
      break;
 800931c:	e09c      	b.n	8009458 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800931e:	7bbb      	ldrb	r3, [r7, #14]
 8009320:	2b04      	cmp	r3, #4
 8009322:	f040 8099 	bne.w	8009458 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	220b      	movs	r2, #11
 800932a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800932c:	2302      	movs	r3, #2
 800932e:	73fb      	strb	r3, [r7, #15]
      break;
 8009330:	e092      	b.n	8009458 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	791b      	ldrb	r3, [r3, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	2100      	movs	r1, #0
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 f8d5 	bl	80094ea <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009346:	b29a      	uxth	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2208      	movs	r2, #8
 8009350:	761a      	strb	r2, [r3, #24]

      break;
 8009352:	e086      	b.n	8009462 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	791b      	ldrb	r3, [r3, #4]
 8009358:	4619      	mov	r1, r3
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 fc12 	bl	8009b84 <USBH_LL_GetURBState>
 8009360:	4603      	mov	r3, r0
 8009362:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009364:	7bbb      	ldrb	r3, [r7, #14]
 8009366:	2b01      	cmp	r3, #1
 8009368:	d105      	bne.n	8009376 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	220d      	movs	r2, #13
 800936e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009370:	2300      	movs	r3, #0
 8009372:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009374:	e072      	b.n	800945c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009376:	7bbb      	ldrb	r3, [r7, #14]
 8009378:	2b04      	cmp	r3, #4
 800937a:	d103      	bne.n	8009384 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	220b      	movs	r2, #11
 8009380:	761a      	strb	r2, [r3, #24]
      break;
 8009382:	e06b      	b.n	800945c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009384:	7bbb      	ldrb	r3, [r7, #14]
 8009386:	2b05      	cmp	r3, #5
 8009388:	d168      	bne.n	800945c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800938a:	2303      	movs	r3, #3
 800938c:	73fb      	strb	r3, [r7, #15]
      break;
 800938e:	e065      	b.n	800945c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	795b      	ldrb	r3, [r3, #5]
 8009394:	2201      	movs	r2, #1
 8009396:	9200      	str	r2, [sp, #0]
 8009398:	2200      	movs	r2, #0
 800939a:	2100      	movs	r1, #0
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 f87f 	bl	80094a0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80093a8:	b29a      	uxth	r2, r3
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	220a      	movs	r2, #10
 80093b2:	761a      	strb	r2, [r3, #24]
      break;
 80093b4:	e055      	b.n	8009462 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	795b      	ldrb	r3, [r3, #5]
 80093ba:	4619      	mov	r1, r3
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 fbe1 	bl	8009b84 <USBH_LL_GetURBState>
 80093c2:	4603      	mov	r3, r0
 80093c4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80093c6:	7bbb      	ldrb	r3, [r7, #14]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d105      	bne.n	80093d8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80093cc:	2300      	movs	r3, #0
 80093ce:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	220d      	movs	r2, #13
 80093d4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80093d6:	e043      	b.n	8009460 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80093d8:	7bbb      	ldrb	r3, [r7, #14]
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d103      	bne.n	80093e6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2209      	movs	r2, #9
 80093e2:	761a      	strb	r2, [r3, #24]
      break;
 80093e4:	e03c      	b.n	8009460 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80093e6:	7bbb      	ldrb	r3, [r7, #14]
 80093e8:	2b04      	cmp	r3, #4
 80093ea:	d139      	bne.n	8009460 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	220b      	movs	r2, #11
 80093f0:	761a      	strb	r2, [r3, #24]
      break;
 80093f2:	e035      	b.n	8009460 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	7e5b      	ldrb	r3, [r3, #25]
 80093f8:	3301      	adds	r3, #1
 80093fa:	b2da      	uxtb	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	765a      	strb	r2, [r3, #25]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	7e5b      	ldrb	r3, [r3, #25]
 8009404:	2b02      	cmp	r3, #2
 8009406:	d806      	bhi.n	8009416 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2201      	movs	r2, #1
 8009412:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009414:	e025      	b.n	8009462 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800941c:	2106      	movs	r1, #6
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	795b      	ldrb	r3, [r3, #5]
 800942c:	4619      	mov	r1, r3
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 f90c 	bl	800964c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	791b      	ldrb	r3, [r3, #4]
 8009438:	4619      	mov	r1, r3
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 f906 	bl	800964c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009446:	2302      	movs	r3, #2
 8009448:	73fb      	strb	r3, [r7, #15]
      break;
 800944a:	e00a      	b.n	8009462 <USBH_HandleControl+0x2de>

    default:
      break;
 800944c:	bf00      	nop
 800944e:	e008      	b.n	8009462 <USBH_HandleControl+0x2de>
      break;
 8009450:	bf00      	nop
 8009452:	e006      	b.n	8009462 <USBH_HandleControl+0x2de>
      break;
 8009454:	bf00      	nop
 8009456:	e004      	b.n	8009462 <USBH_HandleControl+0x2de>
      break;
 8009458:	bf00      	nop
 800945a:	e002      	b.n	8009462 <USBH_HandleControl+0x2de>
      break;
 800945c:	bf00      	nop
 800945e:	e000      	b.n	8009462 <USBH_HandleControl+0x2de>
      break;
 8009460:	bf00      	nop
  }

  return status;
 8009462:	7bfb      	ldrb	r3, [r7, #15]
}
 8009464:	4618      	mov	r0, r3
 8009466:	3710      	adds	r7, #16
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b088      	sub	sp, #32
 8009470:	af04      	add	r7, sp, #16
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	4613      	mov	r3, r2
 8009478:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800947a:	79f9      	ldrb	r1, [r7, #7]
 800947c:	2300      	movs	r3, #0
 800947e:	9303      	str	r3, [sp, #12]
 8009480:	2308      	movs	r3, #8
 8009482:	9302      	str	r3, [sp, #8]
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	9301      	str	r3, [sp, #4]
 8009488:	2300      	movs	r3, #0
 800948a:	9300      	str	r3, [sp, #0]
 800948c:	2300      	movs	r3, #0
 800948e:	2200      	movs	r2, #0
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f000 fb46 	bl	8009b22 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3710      	adds	r7, #16
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b088      	sub	sp, #32
 80094a4:	af04      	add	r7, sp, #16
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	4611      	mov	r1, r2
 80094ac:	461a      	mov	r2, r3
 80094ae:	460b      	mov	r3, r1
 80094b0:	80fb      	strh	r3, [r7, #6]
 80094b2:	4613      	mov	r3, r2
 80094b4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d001      	beq.n	80094c4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80094c0:	2300      	movs	r3, #0
 80094c2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80094c4:	7979      	ldrb	r1, [r7, #5]
 80094c6:	7e3b      	ldrb	r3, [r7, #24]
 80094c8:	9303      	str	r3, [sp, #12]
 80094ca:	88fb      	ldrh	r3, [r7, #6]
 80094cc:	9302      	str	r3, [sp, #8]
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	9301      	str	r3, [sp, #4]
 80094d2:	2301      	movs	r3, #1
 80094d4:	9300      	str	r3, [sp, #0]
 80094d6:	2300      	movs	r3, #0
 80094d8:	2200      	movs	r2, #0
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f000 fb21 	bl	8009b22 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80094e0:	2300      	movs	r3, #0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b088      	sub	sp, #32
 80094ee:	af04      	add	r7, sp, #16
 80094f0:	60f8      	str	r0, [r7, #12]
 80094f2:	60b9      	str	r1, [r7, #8]
 80094f4:	4611      	mov	r1, r2
 80094f6:	461a      	mov	r2, r3
 80094f8:	460b      	mov	r3, r1
 80094fa:	80fb      	strh	r3, [r7, #6]
 80094fc:	4613      	mov	r3, r2
 80094fe:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009500:	7979      	ldrb	r1, [r7, #5]
 8009502:	2300      	movs	r3, #0
 8009504:	9303      	str	r3, [sp, #12]
 8009506:	88fb      	ldrh	r3, [r7, #6]
 8009508:	9302      	str	r3, [sp, #8]
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	9301      	str	r3, [sp, #4]
 800950e:	2301      	movs	r3, #1
 8009510:	9300      	str	r3, [sp, #0]
 8009512:	2300      	movs	r3, #0
 8009514:	2201      	movs	r2, #1
 8009516:	68f8      	ldr	r0, [r7, #12]
 8009518:	f000 fb03 	bl	8009b22 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800951c:	2300      	movs	r3, #0

}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b088      	sub	sp, #32
 800952a:	af04      	add	r7, sp, #16
 800952c:	60f8      	str	r0, [r7, #12]
 800952e:	60b9      	str	r1, [r7, #8]
 8009530:	4611      	mov	r1, r2
 8009532:	461a      	mov	r2, r3
 8009534:	460b      	mov	r3, r1
 8009536:	80fb      	strh	r3, [r7, #6]
 8009538:	4613      	mov	r3, r2
 800953a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009542:	2b00      	cmp	r3, #0
 8009544:	d001      	beq.n	800954a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009546:	2300      	movs	r3, #0
 8009548:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800954a:	7979      	ldrb	r1, [r7, #5]
 800954c:	7e3b      	ldrb	r3, [r7, #24]
 800954e:	9303      	str	r3, [sp, #12]
 8009550:	88fb      	ldrh	r3, [r7, #6]
 8009552:	9302      	str	r3, [sp, #8]
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	9301      	str	r3, [sp, #4]
 8009558:	2301      	movs	r3, #1
 800955a:	9300      	str	r3, [sp, #0]
 800955c:	2302      	movs	r3, #2
 800955e:	2200      	movs	r2, #0
 8009560:	68f8      	ldr	r0, [r7, #12]
 8009562:	f000 fade 	bl	8009b22 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	3710      	adds	r7, #16
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b088      	sub	sp, #32
 8009574:	af04      	add	r7, sp, #16
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	4611      	mov	r1, r2
 800957c:	461a      	mov	r2, r3
 800957e:	460b      	mov	r3, r1
 8009580:	80fb      	strh	r3, [r7, #6]
 8009582:	4613      	mov	r3, r2
 8009584:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009586:	7979      	ldrb	r1, [r7, #5]
 8009588:	2300      	movs	r3, #0
 800958a:	9303      	str	r3, [sp, #12]
 800958c:	88fb      	ldrh	r3, [r7, #6]
 800958e:	9302      	str	r3, [sp, #8]
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	9301      	str	r3, [sp, #4]
 8009594:	2301      	movs	r3, #1
 8009596:	9300      	str	r3, [sp, #0]
 8009598:	2302      	movs	r3, #2
 800959a:	2201      	movs	r2, #1
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f000 fac0 	bl	8009b22 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80095a2:	2300      	movs	r3, #0
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b086      	sub	sp, #24
 80095b0:	af04      	add	r7, sp, #16
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	4608      	mov	r0, r1
 80095b6:	4611      	mov	r1, r2
 80095b8:	461a      	mov	r2, r3
 80095ba:	4603      	mov	r3, r0
 80095bc:	70fb      	strb	r3, [r7, #3]
 80095be:	460b      	mov	r3, r1
 80095c0:	70bb      	strb	r3, [r7, #2]
 80095c2:	4613      	mov	r3, r2
 80095c4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80095c6:	7878      	ldrb	r0, [r7, #1]
 80095c8:	78ba      	ldrb	r2, [r7, #2]
 80095ca:	78f9      	ldrb	r1, [r7, #3]
 80095cc:	8b3b      	ldrh	r3, [r7, #24]
 80095ce:	9302      	str	r3, [sp, #8]
 80095d0:	7d3b      	ldrb	r3, [r7, #20]
 80095d2:	9301      	str	r3, [sp, #4]
 80095d4:	7c3b      	ldrb	r3, [r7, #16]
 80095d6:	9300      	str	r3, [sp, #0]
 80095d8:	4603      	mov	r3, r0
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 fa53 	bl	8009a86 <USBH_LL_OpenPipe>

  return USBH_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3708      	adds	r7, #8
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b082      	sub	sp, #8
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	460b      	mov	r3, r1
 80095f4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80095f6:	78fb      	ldrb	r3, [r7, #3]
 80095f8:	4619      	mov	r1, r3
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 fa72 	bl	8009ae4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b084      	sub	sp, #16
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
 8009612:	460b      	mov	r3, r1
 8009614:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f836 	bl	8009688 <USBH_GetFreePipe>
 800961c:	4603      	mov	r3, r0
 800961e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009620:	89fb      	ldrh	r3, [r7, #14]
 8009622:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009626:	4293      	cmp	r3, r2
 8009628:	d00a      	beq.n	8009640 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800962a:	78fa      	ldrb	r2, [r7, #3]
 800962c:	89fb      	ldrh	r3, [r7, #14]
 800962e:	f003 030f 	and.w	r3, r3, #15
 8009632:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009636:	6879      	ldr	r1, [r7, #4]
 8009638:	33e0      	adds	r3, #224	; 0xe0
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	440b      	add	r3, r1
 800963e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009640:	89fb      	ldrh	r3, [r7, #14]
 8009642:	b2db      	uxtb	r3, r3
}
 8009644:	4618      	mov	r0, r3
 8009646:	3710      	adds	r7, #16
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	460b      	mov	r3, r1
 8009656:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009658:	78fb      	ldrb	r3, [r7, #3]
 800965a:	2b0f      	cmp	r3, #15
 800965c:	d80d      	bhi.n	800967a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800965e:	78fb      	ldrb	r3, [r7, #3]
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	33e0      	adds	r3, #224	; 0xe0
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	4413      	add	r3, r2
 8009668:	685a      	ldr	r2, [r3, #4]
 800966a:	78fb      	ldrb	r3, [r7, #3]
 800966c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009670:	6879      	ldr	r1, [r7, #4]
 8009672:	33e0      	adds	r3, #224	; 0xe0
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	440b      	add	r3, r1
 8009678:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009690:	2300      	movs	r3, #0
 8009692:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009694:	2300      	movs	r3, #0
 8009696:	73fb      	strb	r3, [r7, #15]
 8009698:	e00f      	b.n	80096ba <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800969a:	7bfb      	ldrb	r3, [r7, #15]
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	33e0      	adds	r3, #224	; 0xe0
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	4413      	add	r3, r2
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d102      	bne.n	80096b4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80096ae:	7bfb      	ldrb	r3, [r7, #15]
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	e007      	b.n	80096c4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80096b4:	7bfb      	ldrb	r3, [r7, #15]
 80096b6:	3301      	adds	r3, #1
 80096b8:	73fb      	strb	r3, [r7, #15]
 80096ba:	7bfb      	ldrb	r3, [r7, #15]
 80096bc:	2b0f      	cmp	r3, #15
 80096be:	d9ec      	bls.n	800969a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80096c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3714      	adds	r7, #20
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80096d4:	2201      	movs	r2, #1
 80096d6:	490e      	ldr	r1, [pc, #56]	; (8009710 <MX_USB_HOST_Init+0x40>)
 80096d8:	480e      	ldr	r0, [pc, #56]	; (8009714 <MX_USB_HOST_Init+0x44>)
 80096da:	f7fe fba7 	bl	8007e2c <USBH_Init>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d001      	beq.n	80096e8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80096e4:	f7f8 f908 	bl	80018f8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80096e8:	490b      	ldr	r1, [pc, #44]	; (8009718 <MX_USB_HOST_Init+0x48>)
 80096ea:	480a      	ldr	r0, [pc, #40]	; (8009714 <MX_USB_HOST_Init+0x44>)
 80096ec:	f7fe fc2c 	bl	8007f48 <USBH_RegisterClass>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d001      	beq.n	80096fa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80096f6:	f7f8 f8ff 	bl	80018f8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80096fa:	4806      	ldr	r0, [pc, #24]	; (8009714 <MX_USB_HOST_Init+0x44>)
 80096fc:	f7fe fcb0 	bl	8008060 <USBH_Start>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d001      	beq.n	800970a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009706:	f7f8 f8f7 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800970a:	bf00      	nop
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	08009731 	.word	0x08009731
 8009714:	2000058c 	.word	0x2000058c
 8009718:	2000000c 	.word	0x2000000c

0800971c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009720:	4802      	ldr	r0, [pc, #8]	; (800972c <MX_USB_HOST_Process+0x10>)
 8009722:	f7fe fcad 	bl	8008080 <USBH_Process>
}
 8009726:	bf00      	nop
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	2000058c 	.word	0x2000058c

08009730 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	460b      	mov	r3, r1
 800973a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800973c:	78fb      	ldrb	r3, [r7, #3]
 800973e:	3b01      	subs	r3, #1
 8009740:	2b04      	cmp	r3, #4
 8009742:	d819      	bhi.n	8009778 <USBH_UserProcess+0x48>
 8009744:	a201      	add	r2, pc, #4	; (adr r2, 800974c <USBH_UserProcess+0x1c>)
 8009746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800974a:	bf00      	nop
 800974c:	08009779 	.word	0x08009779
 8009750:	08009769 	.word	0x08009769
 8009754:	08009779 	.word	0x08009779
 8009758:	08009771 	.word	0x08009771
 800975c:	08009761 	.word	0x08009761
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009760:	4b09      	ldr	r3, [pc, #36]	; (8009788 <USBH_UserProcess+0x58>)
 8009762:	2203      	movs	r2, #3
 8009764:	701a      	strb	r2, [r3, #0]
  break;
 8009766:	e008      	b.n	800977a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009768:	4b07      	ldr	r3, [pc, #28]	; (8009788 <USBH_UserProcess+0x58>)
 800976a:	2202      	movs	r2, #2
 800976c:	701a      	strb	r2, [r3, #0]
  break;
 800976e:	e004      	b.n	800977a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009770:	4b05      	ldr	r3, [pc, #20]	; (8009788 <USBH_UserProcess+0x58>)
 8009772:	2201      	movs	r2, #1
 8009774:	701a      	strb	r2, [r3, #0]
  break;
 8009776:	e000      	b.n	800977a <USBH_UserProcess+0x4a>

  default:
  break;
 8009778:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800977a:	bf00      	nop
 800977c:	370c      	adds	r7, #12
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	20000964 	.word	0x20000964

0800978c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b08a      	sub	sp, #40	; 0x28
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009794:	f107 0314 	add.w	r3, r7, #20
 8009798:	2200      	movs	r2, #0
 800979a:	601a      	str	r2, [r3, #0]
 800979c:	605a      	str	r2, [r3, #4]
 800979e:	609a      	str	r2, [r3, #8]
 80097a0:	60da      	str	r2, [r3, #12]
 80097a2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097ac:	d147      	bne.n	800983e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80097ae:	2300      	movs	r3, #0
 80097b0:	613b      	str	r3, [r7, #16]
 80097b2:	4b25      	ldr	r3, [pc, #148]	; (8009848 <HAL_HCD_MspInit+0xbc>)
 80097b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b6:	4a24      	ldr	r2, [pc, #144]	; (8009848 <HAL_HCD_MspInit+0xbc>)
 80097b8:	f043 0301 	orr.w	r3, r3, #1
 80097bc:	6313      	str	r3, [r2, #48]	; 0x30
 80097be:	4b22      	ldr	r3, [pc, #136]	; (8009848 <HAL_HCD_MspInit+0xbc>)
 80097c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c2:	f003 0301 	and.w	r3, r3, #1
 80097c6:	613b      	str	r3, [r7, #16]
 80097c8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80097ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80097d0:	2300      	movs	r3, #0
 80097d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097d4:	2300      	movs	r3, #0
 80097d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80097d8:	f107 0314 	add.w	r3, r7, #20
 80097dc:	4619      	mov	r1, r3
 80097de:	481b      	ldr	r0, [pc, #108]	; (800984c <HAL_HCD_MspInit+0xc0>)
 80097e0:	f7f9 ff96 	bl	8003710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80097e4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80097e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097ea:	2302      	movs	r3, #2
 80097ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097ee:	2300      	movs	r3, #0
 80097f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097f2:	2300      	movs	r3, #0
 80097f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80097f6:	230a      	movs	r3, #10
 80097f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097fa:	f107 0314 	add.w	r3, r7, #20
 80097fe:	4619      	mov	r1, r3
 8009800:	4812      	ldr	r0, [pc, #72]	; (800984c <HAL_HCD_MspInit+0xc0>)
 8009802:	f7f9 ff85 	bl	8003710 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009806:	4b10      	ldr	r3, [pc, #64]	; (8009848 <HAL_HCD_MspInit+0xbc>)
 8009808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800980a:	4a0f      	ldr	r2, [pc, #60]	; (8009848 <HAL_HCD_MspInit+0xbc>)
 800980c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009810:	6353      	str	r3, [r2, #52]	; 0x34
 8009812:	2300      	movs	r3, #0
 8009814:	60fb      	str	r3, [r7, #12]
 8009816:	4b0c      	ldr	r3, [pc, #48]	; (8009848 <HAL_HCD_MspInit+0xbc>)
 8009818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800981a:	4a0b      	ldr	r2, [pc, #44]	; (8009848 <HAL_HCD_MspInit+0xbc>)
 800981c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009820:	6453      	str	r3, [r2, #68]	; 0x44
 8009822:	4b09      	ldr	r3, [pc, #36]	; (8009848 <HAL_HCD_MspInit+0xbc>)
 8009824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800982a:	60fb      	str	r3, [r7, #12]
 800982c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800982e:	2200      	movs	r2, #0
 8009830:	2100      	movs	r1, #0
 8009832:	2043      	movs	r0, #67	; 0x43
 8009834:	f7f9 f96d 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009838:	2043      	movs	r0, #67	; 0x43
 800983a:	f7f9 f986 	bl	8002b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800983e:	bf00      	nop
 8009840:	3728      	adds	r7, #40	; 0x28
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	40023800 	.word	0x40023800
 800984c:	40020000 	.word	0x40020000

08009850 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800985e:	4618      	mov	r0, r3
 8009860:	f7fe ffed 	bl	800883e <USBH_LL_IncTimer>
}
 8009864:	bf00      	nop
 8009866:	3708      	adds	r7, #8
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800987a:	4618      	mov	r0, r3
 800987c:	f7ff f825 	bl	80088ca <USBH_LL_Connect>
}
 8009880:	bf00      	nop
 8009882:	3708      	adds	r7, #8
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009896:	4618      	mov	r0, r3
 8009898:	f7ff f82e 	bl	80088f8 <USBH_LL_Disconnect>
}
 800989c:	bf00      	nop
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	460b      	mov	r3, r1
 80098ae:	70fb      	strb	r3, [r7, #3]
 80098b0:	4613      	mov	r3, r2
 80098b2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80098b4:	bf00      	nop
 80098b6:	370c      	adds	r7, #12
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fe ffdf 	bl	8008892 <USBH_LL_PortEnabled>
}
 80098d4:	bf00      	nop
 80098d6:	3708      	adds	r7, #8
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7fe ffdf 	bl	80088ae <USBH_LL_PortDisabled>
}
 80098f0:	bf00      	nop
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009906:	2b01      	cmp	r3, #1
 8009908:	d12a      	bne.n	8009960 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800990a:	4a18      	ldr	r2, [pc, #96]	; (800996c <USBH_LL_Init+0x74>)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a15      	ldr	r2, [pc, #84]	; (800996c <USBH_LL_Init+0x74>)
 8009916:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800991a:	4b14      	ldr	r3, [pc, #80]	; (800996c <USBH_LL_Init+0x74>)
 800991c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009920:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009922:	4b12      	ldr	r3, [pc, #72]	; (800996c <USBH_LL_Init+0x74>)
 8009924:	2208      	movs	r2, #8
 8009926:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009928:	4b10      	ldr	r3, [pc, #64]	; (800996c <USBH_LL_Init+0x74>)
 800992a:	2201      	movs	r2, #1
 800992c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800992e:	4b0f      	ldr	r3, [pc, #60]	; (800996c <USBH_LL_Init+0x74>)
 8009930:	2200      	movs	r2, #0
 8009932:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009934:	4b0d      	ldr	r3, [pc, #52]	; (800996c <USBH_LL_Init+0x74>)
 8009936:	2202      	movs	r2, #2
 8009938:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800993a:	4b0c      	ldr	r3, [pc, #48]	; (800996c <USBH_LL_Init+0x74>)
 800993c:	2200      	movs	r2, #0
 800993e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009940:	480a      	ldr	r0, [pc, #40]	; (800996c <USBH_LL_Init+0x74>)
 8009942:	f7fa f89a 	bl	8003a7a <HAL_HCD_Init>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d001      	beq.n	8009950 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800994c:	f7f7 ffd4 	bl	80018f8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009950:	4806      	ldr	r0, [pc, #24]	; (800996c <USBH_LL_Init+0x74>)
 8009952:	f7fa fc7e 	bl	8004252 <HAL_HCD_GetCurrentFrame>
 8009956:	4603      	mov	r3, r0
 8009958:	4619      	mov	r1, r3
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f7fe ff60 	bl	8008820 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	20000968 	.word	0x20000968

08009970 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009978:	2300      	movs	r3, #0
 800997a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800997c:	2300      	movs	r3, #0
 800997e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009986:	4618      	mov	r0, r3
 8009988:	f7fa fbed 	bl	8004166 <HAL_HCD_Start>
 800998c:	4603      	mov	r3, r0
 800998e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009990:	7bfb      	ldrb	r3, [r7, #15]
 8009992:	4618      	mov	r0, r3
 8009994:	f000 f95c 	bl	8009c50 <USBH_Get_USB_Status>
 8009998:	4603      	mov	r3, r0
 800999a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800999c:	7bbb      	ldrb	r3, [r7, #14]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b084      	sub	sp, #16
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099ae:	2300      	movs	r3, #0
 80099b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099b2:	2300      	movs	r3, #0
 80099b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80099bc:	4618      	mov	r0, r3
 80099be:	f7fa fbf5 	bl	80041ac <HAL_HCD_Stop>
 80099c2:	4603      	mov	r3, r0
 80099c4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80099c6:	7bfb      	ldrb	r3, [r7, #15]
 80099c8:	4618      	mov	r0, r3
 80099ca:	f000 f941 	bl	8009c50 <USBH_Get_USB_Status>
 80099ce:	4603      	mov	r3, r0
 80099d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80099e4:	2301      	movs	r3, #1
 80099e6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7fa fc3d 	bl	800426e <HAL_HCD_GetCurrentSpeed>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b02      	cmp	r3, #2
 80099f8:	d00c      	beq.n	8009a14 <USBH_LL_GetSpeed+0x38>
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d80d      	bhi.n	8009a1a <USBH_LL_GetSpeed+0x3e>
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d002      	beq.n	8009a08 <USBH_LL_GetSpeed+0x2c>
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d003      	beq.n	8009a0e <USBH_LL_GetSpeed+0x32>
 8009a06:	e008      	b.n	8009a1a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a0c:	e008      	b.n	8009a20 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	73fb      	strb	r3, [r7, #15]
    break;
 8009a12:	e005      	b.n	8009a20 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009a14:	2302      	movs	r3, #2
 8009a16:	73fb      	strb	r3, [r7, #15]
    break;
 8009a18:	e002      	b.n	8009a20 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a1e:	bf00      	nop
  }
  return  speed;
 8009a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3710      	adds	r7, #16
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}

08009a2a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009a2a:	b580      	push	{r7, lr}
 8009a2c:	b084      	sub	sp, #16
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a36:	2300      	movs	r3, #0
 8009a38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7fa fbd0 	bl	80041e6 <HAL_HCD_ResetPort>
 8009a46:	4603      	mov	r3, r0
 8009a48:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a4a:	7bfb      	ldrb	r3, [r7, #15]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f000 f8ff 	bl	8009c50 <USBH_Get_USB_Status>
 8009a52:	4603      	mov	r3, r0
 8009a54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a56:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3710      	adds	r7, #16
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	460b      	mov	r3, r1
 8009a6a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a72:	78fa      	ldrb	r2, [r7, #3]
 8009a74:	4611      	mov	r1, r2
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fa fbd7 	bl	800422a <HAL_HCD_HC_GetXferCount>
 8009a7c:	4603      	mov	r3, r0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3708      	adds	r7, #8
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}

08009a86 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009a86:	b590      	push	{r4, r7, lr}
 8009a88:	b089      	sub	sp, #36	; 0x24
 8009a8a:	af04      	add	r7, sp, #16
 8009a8c:	6078      	str	r0, [r7, #4]
 8009a8e:	4608      	mov	r0, r1
 8009a90:	4611      	mov	r1, r2
 8009a92:	461a      	mov	r2, r3
 8009a94:	4603      	mov	r3, r0
 8009a96:	70fb      	strb	r3, [r7, #3]
 8009a98:	460b      	mov	r3, r1
 8009a9a:	70bb      	strb	r3, [r7, #2]
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009aae:	787c      	ldrb	r4, [r7, #1]
 8009ab0:	78ba      	ldrb	r2, [r7, #2]
 8009ab2:	78f9      	ldrb	r1, [r7, #3]
 8009ab4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009ab6:	9302      	str	r3, [sp, #8]
 8009ab8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009abc:	9301      	str	r3, [sp, #4]
 8009abe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009ac2:	9300      	str	r3, [sp, #0]
 8009ac4:	4623      	mov	r3, r4
 8009ac6:	f7fa f83a 	bl	8003b3e <HAL_HCD_HC_Init>
 8009aca:	4603      	mov	r3, r0
 8009acc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ace:	7bfb      	ldrb	r3, [r7, #15]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f000 f8bd 	bl	8009c50 <USBH_Get_USB_Status>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ada:	7bbb      	ldrb	r3, [r7, #14]
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3714      	adds	r7, #20
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd90      	pop	{r4, r7, pc}

08009ae4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	460b      	mov	r3, r1
 8009aee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009af0:	2300      	movs	r3, #0
 8009af2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009af4:	2300      	movs	r3, #0
 8009af6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009afe:	78fa      	ldrb	r2, [r7, #3]
 8009b00:	4611      	mov	r1, r2
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7fa f8aa 	bl	8003c5c <HAL_HCD_HC_Halt>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009b0c:	7bfb      	ldrb	r3, [r7, #15]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 f89e 	bl	8009c50 <USBH_Get_USB_Status>
 8009b14:	4603      	mov	r3, r0
 8009b16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b18:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009b22:	b590      	push	{r4, r7, lr}
 8009b24:	b089      	sub	sp, #36	; 0x24
 8009b26:	af04      	add	r7, sp, #16
 8009b28:	6078      	str	r0, [r7, #4]
 8009b2a:	4608      	mov	r0, r1
 8009b2c:	4611      	mov	r1, r2
 8009b2e:	461a      	mov	r2, r3
 8009b30:	4603      	mov	r3, r0
 8009b32:	70fb      	strb	r3, [r7, #3]
 8009b34:	460b      	mov	r3, r1
 8009b36:	70bb      	strb	r3, [r7, #2]
 8009b38:	4613      	mov	r3, r2
 8009b3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b40:	2300      	movs	r3, #0
 8009b42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009b4a:	787c      	ldrb	r4, [r7, #1]
 8009b4c:	78ba      	ldrb	r2, [r7, #2]
 8009b4e:	78f9      	ldrb	r1, [r7, #3]
 8009b50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009b54:	9303      	str	r3, [sp, #12]
 8009b56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009b58:	9302      	str	r3, [sp, #8]
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5c:	9301      	str	r3, [sp, #4]
 8009b5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009b62:	9300      	str	r3, [sp, #0]
 8009b64:	4623      	mov	r3, r4
 8009b66:	f7fa f89d 	bl	8003ca4 <HAL_HCD_HC_SubmitRequest>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009b6e:	7bfb      	ldrb	r3, [r7, #15]
 8009b70:	4618      	mov	r0, r3
 8009b72:	f000 f86d 	bl	8009c50 <USBH_Get_USB_Status>
 8009b76:	4603      	mov	r3, r0
 8009b78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3714      	adds	r7, #20
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd90      	pop	{r4, r7, pc}

08009b84 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009b96:	78fa      	ldrb	r2, [r7, #3]
 8009b98:	4611      	mov	r1, r2
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7fa fb31 	bl	8004202 <HAL_HCD_HC_GetURBState>
 8009ba0:	4603      	mov	r3, r0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3708      	adds	r7, #8
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b082      	sub	sp, #8
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d103      	bne.n	8009bc8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009bc0:	78fb      	ldrb	r3, [r7, #3]
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f000 f870 	bl	8009ca8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009bc8:	20c8      	movs	r0, #200	; 0xc8
 8009bca:	f7f8 f957 	bl	8001e7c <HAL_Delay>
  return USBH_OK;
 8009bce:	2300      	movs	r3, #0
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3708      	adds	r7, #8
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	460b      	mov	r3, r1
 8009be2:	70fb      	strb	r3, [r7, #3]
 8009be4:	4613      	mov	r3, r2
 8009be6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009bee:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009bf0:	78fb      	ldrb	r3, [r7, #3]
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	212c      	movs	r1, #44	; 0x2c
 8009bf6:	fb01 f303 	mul.w	r3, r1, r3
 8009bfa:	4413      	add	r3, r2
 8009bfc:	333b      	adds	r3, #59	; 0x3b
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d009      	beq.n	8009c18 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009c04:	78fb      	ldrb	r3, [r7, #3]
 8009c06:	68fa      	ldr	r2, [r7, #12]
 8009c08:	212c      	movs	r1, #44	; 0x2c
 8009c0a:	fb01 f303 	mul.w	r3, r1, r3
 8009c0e:	4413      	add	r3, r2
 8009c10:	3354      	adds	r3, #84	; 0x54
 8009c12:	78ba      	ldrb	r2, [r7, #2]
 8009c14:	701a      	strb	r2, [r3, #0]
 8009c16:	e008      	b.n	8009c2a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009c18:	78fb      	ldrb	r3, [r7, #3]
 8009c1a:	68fa      	ldr	r2, [r7, #12]
 8009c1c:	212c      	movs	r1, #44	; 0x2c
 8009c1e:	fb01 f303 	mul.w	r3, r1, r3
 8009c22:	4413      	add	r3, r2
 8009c24:	3355      	adds	r3, #85	; 0x55
 8009c26:	78ba      	ldrb	r2, [r7, #2]
 8009c28:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3714      	adds	r7, #20
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f7f8 f91b 	bl	8001e7c <HAL_Delay>
}
 8009c46:	bf00      	nop
 8009c48:	3708      	adds	r7, #8
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
	...

08009c50 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	4603      	mov	r3, r0
 8009c58:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c5e:	79fb      	ldrb	r3, [r7, #7]
 8009c60:	2b03      	cmp	r3, #3
 8009c62:	d817      	bhi.n	8009c94 <USBH_Get_USB_Status+0x44>
 8009c64:	a201      	add	r2, pc, #4	; (adr r2, 8009c6c <USBH_Get_USB_Status+0x1c>)
 8009c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6a:	bf00      	nop
 8009c6c:	08009c7d 	.word	0x08009c7d
 8009c70:	08009c83 	.word	0x08009c83
 8009c74:	08009c89 	.word	0x08009c89
 8009c78:	08009c8f 	.word	0x08009c8f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	73fb      	strb	r3, [r7, #15]
    break;
 8009c80:	e00b      	b.n	8009c9a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009c82:	2302      	movs	r3, #2
 8009c84:	73fb      	strb	r3, [r7, #15]
    break;
 8009c86:	e008      	b.n	8009c9a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c8c:	e005      	b.n	8009c9a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009c8e:	2302      	movs	r3, #2
 8009c90:	73fb      	strb	r3, [r7, #15]
    break;
 8009c92:	e002      	b.n	8009c9a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009c94:	2302      	movs	r3, #2
 8009c96:	73fb      	strb	r3, [r7, #15]
    break;
 8009c98:	bf00      	nop
  }
  return usb_status;
 8009c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3714      	adds	r7, #20
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	4603      	mov	r3, r0
 8009cb0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009cb2:	79fb      	ldrb	r3, [r7, #7]
 8009cb4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009cb6:	79fb      	ldrb	r3, [r7, #7]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d102      	bne.n	8009cc2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	73fb      	strb	r3, [r7, #15]
 8009cc0:	e001      	b.n	8009cc6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009cc6:	7bfb      	ldrb	r3, [r7, #15]
 8009cc8:	461a      	mov	r2, r3
 8009cca:	2101      	movs	r1, #1
 8009ccc:	4803      	ldr	r0, [pc, #12]	; (8009cdc <MX_DriverVbusFS+0x34>)
 8009cce:	f7f9 febb 	bl	8003a48 <HAL_GPIO_WritePin>
}
 8009cd2:	bf00      	nop
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	40020800 	.word	0x40020800

08009ce0 <__errno>:
 8009ce0:	4b01      	ldr	r3, [pc, #4]	; (8009ce8 <__errno+0x8>)
 8009ce2:	6818      	ldr	r0, [r3, #0]
 8009ce4:	4770      	bx	lr
 8009ce6:	bf00      	nop
 8009ce8:	2000002c 	.word	0x2000002c

08009cec <__libc_init_array>:
 8009cec:	b570      	push	{r4, r5, r6, lr}
 8009cee:	4d0d      	ldr	r5, [pc, #52]	; (8009d24 <__libc_init_array+0x38>)
 8009cf0:	4c0d      	ldr	r4, [pc, #52]	; (8009d28 <__libc_init_array+0x3c>)
 8009cf2:	1b64      	subs	r4, r4, r5
 8009cf4:	10a4      	asrs	r4, r4, #2
 8009cf6:	2600      	movs	r6, #0
 8009cf8:	42a6      	cmp	r6, r4
 8009cfa:	d109      	bne.n	8009d10 <__libc_init_array+0x24>
 8009cfc:	4d0b      	ldr	r5, [pc, #44]	; (8009d2c <__libc_init_array+0x40>)
 8009cfe:	4c0c      	ldr	r4, [pc, #48]	; (8009d30 <__libc_init_array+0x44>)
 8009d00:	f001 f9d4 	bl	800b0ac <_init>
 8009d04:	1b64      	subs	r4, r4, r5
 8009d06:	10a4      	asrs	r4, r4, #2
 8009d08:	2600      	movs	r6, #0
 8009d0a:	42a6      	cmp	r6, r4
 8009d0c:	d105      	bne.n	8009d1a <__libc_init_array+0x2e>
 8009d0e:	bd70      	pop	{r4, r5, r6, pc}
 8009d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d14:	4798      	blx	r3
 8009d16:	3601      	adds	r6, #1
 8009d18:	e7ee      	b.n	8009cf8 <__libc_init_array+0xc>
 8009d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d1e:	4798      	blx	r3
 8009d20:	3601      	adds	r6, #1
 8009d22:	e7f2      	b.n	8009d0a <__libc_init_array+0x1e>
 8009d24:	0800b2f8 	.word	0x0800b2f8
 8009d28:	0800b2f8 	.word	0x0800b2f8
 8009d2c:	0800b2f8 	.word	0x0800b2f8
 8009d30:	0800b2fc 	.word	0x0800b2fc

08009d34 <__itoa>:
 8009d34:	1e93      	subs	r3, r2, #2
 8009d36:	2b22      	cmp	r3, #34	; 0x22
 8009d38:	b510      	push	{r4, lr}
 8009d3a:	460c      	mov	r4, r1
 8009d3c:	d904      	bls.n	8009d48 <__itoa+0x14>
 8009d3e:	2300      	movs	r3, #0
 8009d40:	700b      	strb	r3, [r1, #0]
 8009d42:	461c      	mov	r4, r3
 8009d44:	4620      	mov	r0, r4
 8009d46:	bd10      	pop	{r4, pc}
 8009d48:	2a0a      	cmp	r2, #10
 8009d4a:	d109      	bne.n	8009d60 <__itoa+0x2c>
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	da07      	bge.n	8009d60 <__itoa+0x2c>
 8009d50:	232d      	movs	r3, #45	; 0x2d
 8009d52:	700b      	strb	r3, [r1, #0]
 8009d54:	4240      	negs	r0, r0
 8009d56:	2101      	movs	r1, #1
 8009d58:	4421      	add	r1, r4
 8009d5a:	f000 f90d 	bl	8009f78 <__utoa>
 8009d5e:	e7f1      	b.n	8009d44 <__itoa+0x10>
 8009d60:	2100      	movs	r1, #0
 8009d62:	e7f9      	b.n	8009d58 <__itoa+0x24>

08009d64 <itoa>:
 8009d64:	f7ff bfe6 	b.w	8009d34 <__itoa>

08009d68 <malloc>:
 8009d68:	4b02      	ldr	r3, [pc, #8]	; (8009d74 <malloc+0xc>)
 8009d6a:	4601      	mov	r1, r0
 8009d6c:	6818      	ldr	r0, [r3, #0]
 8009d6e:	f000 b87f 	b.w	8009e70 <_malloc_r>
 8009d72:	bf00      	nop
 8009d74:	2000002c 	.word	0x2000002c

08009d78 <free>:
 8009d78:	4b02      	ldr	r3, [pc, #8]	; (8009d84 <free+0xc>)
 8009d7a:	4601      	mov	r1, r0
 8009d7c:	6818      	ldr	r0, [r3, #0]
 8009d7e:	f000 b80b 	b.w	8009d98 <_free_r>
 8009d82:	bf00      	nop
 8009d84:	2000002c 	.word	0x2000002c

08009d88 <memset>:
 8009d88:	4402      	add	r2, r0
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d100      	bne.n	8009d92 <memset+0xa>
 8009d90:	4770      	bx	lr
 8009d92:	f803 1b01 	strb.w	r1, [r3], #1
 8009d96:	e7f9      	b.n	8009d8c <memset+0x4>

08009d98 <_free_r>:
 8009d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d9a:	2900      	cmp	r1, #0
 8009d9c:	d044      	beq.n	8009e28 <_free_r+0x90>
 8009d9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009da2:	9001      	str	r0, [sp, #4]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	f1a1 0404 	sub.w	r4, r1, #4
 8009daa:	bfb8      	it	lt
 8009dac:	18e4      	addlt	r4, r4, r3
 8009dae:	f000 f925 	bl	8009ffc <__malloc_lock>
 8009db2:	4a1e      	ldr	r2, [pc, #120]	; (8009e2c <_free_r+0x94>)
 8009db4:	9801      	ldr	r0, [sp, #4]
 8009db6:	6813      	ldr	r3, [r2, #0]
 8009db8:	b933      	cbnz	r3, 8009dc8 <_free_r+0x30>
 8009dba:	6063      	str	r3, [r4, #4]
 8009dbc:	6014      	str	r4, [r2, #0]
 8009dbe:	b003      	add	sp, #12
 8009dc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009dc4:	f000 b920 	b.w	800a008 <__malloc_unlock>
 8009dc8:	42a3      	cmp	r3, r4
 8009dca:	d908      	bls.n	8009dde <_free_r+0x46>
 8009dcc:	6825      	ldr	r5, [r4, #0]
 8009dce:	1961      	adds	r1, r4, r5
 8009dd0:	428b      	cmp	r3, r1
 8009dd2:	bf01      	itttt	eq
 8009dd4:	6819      	ldreq	r1, [r3, #0]
 8009dd6:	685b      	ldreq	r3, [r3, #4]
 8009dd8:	1949      	addeq	r1, r1, r5
 8009dda:	6021      	streq	r1, [r4, #0]
 8009ddc:	e7ed      	b.n	8009dba <_free_r+0x22>
 8009dde:	461a      	mov	r2, r3
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	b10b      	cbz	r3, 8009de8 <_free_r+0x50>
 8009de4:	42a3      	cmp	r3, r4
 8009de6:	d9fa      	bls.n	8009dde <_free_r+0x46>
 8009de8:	6811      	ldr	r1, [r2, #0]
 8009dea:	1855      	adds	r5, r2, r1
 8009dec:	42a5      	cmp	r5, r4
 8009dee:	d10b      	bne.n	8009e08 <_free_r+0x70>
 8009df0:	6824      	ldr	r4, [r4, #0]
 8009df2:	4421      	add	r1, r4
 8009df4:	1854      	adds	r4, r2, r1
 8009df6:	42a3      	cmp	r3, r4
 8009df8:	6011      	str	r1, [r2, #0]
 8009dfa:	d1e0      	bne.n	8009dbe <_free_r+0x26>
 8009dfc:	681c      	ldr	r4, [r3, #0]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	6053      	str	r3, [r2, #4]
 8009e02:	4421      	add	r1, r4
 8009e04:	6011      	str	r1, [r2, #0]
 8009e06:	e7da      	b.n	8009dbe <_free_r+0x26>
 8009e08:	d902      	bls.n	8009e10 <_free_r+0x78>
 8009e0a:	230c      	movs	r3, #12
 8009e0c:	6003      	str	r3, [r0, #0]
 8009e0e:	e7d6      	b.n	8009dbe <_free_r+0x26>
 8009e10:	6825      	ldr	r5, [r4, #0]
 8009e12:	1961      	adds	r1, r4, r5
 8009e14:	428b      	cmp	r3, r1
 8009e16:	bf04      	itt	eq
 8009e18:	6819      	ldreq	r1, [r3, #0]
 8009e1a:	685b      	ldreq	r3, [r3, #4]
 8009e1c:	6063      	str	r3, [r4, #4]
 8009e1e:	bf04      	itt	eq
 8009e20:	1949      	addeq	r1, r1, r5
 8009e22:	6021      	streq	r1, [r4, #0]
 8009e24:	6054      	str	r4, [r2, #4]
 8009e26:	e7ca      	b.n	8009dbe <_free_r+0x26>
 8009e28:	b003      	add	sp, #12
 8009e2a:	bd30      	pop	{r4, r5, pc}
 8009e2c:	20000c6c 	.word	0x20000c6c

08009e30 <sbrk_aligned>:
 8009e30:	b570      	push	{r4, r5, r6, lr}
 8009e32:	4e0e      	ldr	r6, [pc, #56]	; (8009e6c <sbrk_aligned+0x3c>)
 8009e34:	460c      	mov	r4, r1
 8009e36:	6831      	ldr	r1, [r6, #0]
 8009e38:	4605      	mov	r5, r0
 8009e3a:	b911      	cbnz	r1, 8009e42 <sbrk_aligned+0x12>
 8009e3c:	f000 f88c 	bl	8009f58 <_sbrk_r>
 8009e40:	6030      	str	r0, [r6, #0]
 8009e42:	4621      	mov	r1, r4
 8009e44:	4628      	mov	r0, r5
 8009e46:	f000 f887 	bl	8009f58 <_sbrk_r>
 8009e4a:	1c43      	adds	r3, r0, #1
 8009e4c:	d00a      	beq.n	8009e64 <sbrk_aligned+0x34>
 8009e4e:	1cc4      	adds	r4, r0, #3
 8009e50:	f024 0403 	bic.w	r4, r4, #3
 8009e54:	42a0      	cmp	r0, r4
 8009e56:	d007      	beq.n	8009e68 <sbrk_aligned+0x38>
 8009e58:	1a21      	subs	r1, r4, r0
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	f000 f87c 	bl	8009f58 <_sbrk_r>
 8009e60:	3001      	adds	r0, #1
 8009e62:	d101      	bne.n	8009e68 <sbrk_aligned+0x38>
 8009e64:	f04f 34ff 	mov.w	r4, #4294967295
 8009e68:	4620      	mov	r0, r4
 8009e6a:	bd70      	pop	{r4, r5, r6, pc}
 8009e6c:	20000c70 	.word	0x20000c70

08009e70 <_malloc_r>:
 8009e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e74:	1ccd      	adds	r5, r1, #3
 8009e76:	f025 0503 	bic.w	r5, r5, #3
 8009e7a:	3508      	adds	r5, #8
 8009e7c:	2d0c      	cmp	r5, #12
 8009e7e:	bf38      	it	cc
 8009e80:	250c      	movcc	r5, #12
 8009e82:	2d00      	cmp	r5, #0
 8009e84:	4607      	mov	r7, r0
 8009e86:	db01      	blt.n	8009e8c <_malloc_r+0x1c>
 8009e88:	42a9      	cmp	r1, r5
 8009e8a:	d905      	bls.n	8009e98 <_malloc_r+0x28>
 8009e8c:	230c      	movs	r3, #12
 8009e8e:	603b      	str	r3, [r7, #0]
 8009e90:	2600      	movs	r6, #0
 8009e92:	4630      	mov	r0, r6
 8009e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e98:	4e2e      	ldr	r6, [pc, #184]	; (8009f54 <_malloc_r+0xe4>)
 8009e9a:	f000 f8af 	bl	8009ffc <__malloc_lock>
 8009e9e:	6833      	ldr	r3, [r6, #0]
 8009ea0:	461c      	mov	r4, r3
 8009ea2:	bb34      	cbnz	r4, 8009ef2 <_malloc_r+0x82>
 8009ea4:	4629      	mov	r1, r5
 8009ea6:	4638      	mov	r0, r7
 8009ea8:	f7ff ffc2 	bl	8009e30 <sbrk_aligned>
 8009eac:	1c43      	adds	r3, r0, #1
 8009eae:	4604      	mov	r4, r0
 8009eb0:	d14d      	bne.n	8009f4e <_malloc_r+0xde>
 8009eb2:	6834      	ldr	r4, [r6, #0]
 8009eb4:	4626      	mov	r6, r4
 8009eb6:	2e00      	cmp	r6, #0
 8009eb8:	d140      	bne.n	8009f3c <_malloc_r+0xcc>
 8009eba:	6823      	ldr	r3, [r4, #0]
 8009ebc:	4631      	mov	r1, r6
 8009ebe:	4638      	mov	r0, r7
 8009ec0:	eb04 0803 	add.w	r8, r4, r3
 8009ec4:	f000 f848 	bl	8009f58 <_sbrk_r>
 8009ec8:	4580      	cmp	r8, r0
 8009eca:	d13a      	bne.n	8009f42 <_malloc_r+0xd2>
 8009ecc:	6821      	ldr	r1, [r4, #0]
 8009ece:	3503      	adds	r5, #3
 8009ed0:	1a6d      	subs	r5, r5, r1
 8009ed2:	f025 0503 	bic.w	r5, r5, #3
 8009ed6:	3508      	adds	r5, #8
 8009ed8:	2d0c      	cmp	r5, #12
 8009eda:	bf38      	it	cc
 8009edc:	250c      	movcc	r5, #12
 8009ede:	4629      	mov	r1, r5
 8009ee0:	4638      	mov	r0, r7
 8009ee2:	f7ff ffa5 	bl	8009e30 <sbrk_aligned>
 8009ee6:	3001      	adds	r0, #1
 8009ee8:	d02b      	beq.n	8009f42 <_malloc_r+0xd2>
 8009eea:	6823      	ldr	r3, [r4, #0]
 8009eec:	442b      	add	r3, r5
 8009eee:	6023      	str	r3, [r4, #0]
 8009ef0:	e00e      	b.n	8009f10 <_malloc_r+0xa0>
 8009ef2:	6822      	ldr	r2, [r4, #0]
 8009ef4:	1b52      	subs	r2, r2, r5
 8009ef6:	d41e      	bmi.n	8009f36 <_malloc_r+0xc6>
 8009ef8:	2a0b      	cmp	r2, #11
 8009efa:	d916      	bls.n	8009f2a <_malloc_r+0xba>
 8009efc:	1961      	adds	r1, r4, r5
 8009efe:	42a3      	cmp	r3, r4
 8009f00:	6025      	str	r5, [r4, #0]
 8009f02:	bf18      	it	ne
 8009f04:	6059      	strne	r1, [r3, #4]
 8009f06:	6863      	ldr	r3, [r4, #4]
 8009f08:	bf08      	it	eq
 8009f0a:	6031      	streq	r1, [r6, #0]
 8009f0c:	5162      	str	r2, [r4, r5]
 8009f0e:	604b      	str	r3, [r1, #4]
 8009f10:	4638      	mov	r0, r7
 8009f12:	f104 060b 	add.w	r6, r4, #11
 8009f16:	f000 f877 	bl	800a008 <__malloc_unlock>
 8009f1a:	f026 0607 	bic.w	r6, r6, #7
 8009f1e:	1d23      	adds	r3, r4, #4
 8009f20:	1af2      	subs	r2, r6, r3
 8009f22:	d0b6      	beq.n	8009e92 <_malloc_r+0x22>
 8009f24:	1b9b      	subs	r3, r3, r6
 8009f26:	50a3      	str	r3, [r4, r2]
 8009f28:	e7b3      	b.n	8009e92 <_malloc_r+0x22>
 8009f2a:	6862      	ldr	r2, [r4, #4]
 8009f2c:	42a3      	cmp	r3, r4
 8009f2e:	bf0c      	ite	eq
 8009f30:	6032      	streq	r2, [r6, #0]
 8009f32:	605a      	strne	r2, [r3, #4]
 8009f34:	e7ec      	b.n	8009f10 <_malloc_r+0xa0>
 8009f36:	4623      	mov	r3, r4
 8009f38:	6864      	ldr	r4, [r4, #4]
 8009f3a:	e7b2      	b.n	8009ea2 <_malloc_r+0x32>
 8009f3c:	4634      	mov	r4, r6
 8009f3e:	6876      	ldr	r6, [r6, #4]
 8009f40:	e7b9      	b.n	8009eb6 <_malloc_r+0x46>
 8009f42:	230c      	movs	r3, #12
 8009f44:	603b      	str	r3, [r7, #0]
 8009f46:	4638      	mov	r0, r7
 8009f48:	f000 f85e 	bl	800a008 <__malloc_unlock>
 8009f4c:	e7a1      	b.n	8009e92 <_malloc_r+0x22>
 8009f4e:	6025      	str	r5, [r4, #0]
 8009f50:	e7de      	b.n	8009f10 <_malloc_r+0xa0>
 8009f52:	bf00      	nop
 8009f54:	20000c6c 	.word	0x20000c6c

08009f58 <_sbrk_r>:
 8009f58:	b538      	push	{r3, r4, r5, lr}
 8009f5a:	4d06      	ldr	r5, [pc, #24]	; (8009f74 <_sbrk_r+0x1c>)
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	4604      	mov	r4, r0
 8009f60:	4608      	mov	r0, r1
 8009f62:	602b      	str	r3, [r5, #0]
 8009f64:	f7f7 fea6 	bl	8001cb4 <_sbrk>
 8009f68:	1c43      	adds	r3, r0, #1
 8009f6a:	d102      	bne.n	8009f72 <_sbrk_r+0x1a>
 8009f6c:	682b      	ldr	r3, [r5, #0]
 8009f6e:	b103      	cbz	r3, 8009f72 <_sbrk_r+0x1a>
 8009f70:	6023      	str	r3, [r4, #0]
 8009f72:	bd38      	pop	{r3, r4, r5, pc}
 8009f74:	20000c74 	.word	0x20000c74

08009f78 <__utoa>:
 8009f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f7a:	4c1f      	ldr	r4, [pc, #124]	; (8009ff8 <__utoa+0x80>)
 8009f7c:	b08b      	sub	sp, #44	; 0x2c
 8009f7e:	4605      	mov	r5, r0
 8009f80:	460b      	mov	r3, r1
 8009f82:	466e      	mov	r6, sp
 8009f84:	f104 0c20 	add.w	ip, r4, #32
 8009f88:	6820      	ldr	r0, [r4, #0]
 8009f8a:	6861      	ldr	r1, [r4, #4]
 8009f8c:	4637      	mov	r7, r6
 8009f8e:	c703      	stmia	r7!, {r0, r1}
 8009f90:	3408      	adds	r4, #8
 8009f92:	4564      	cmp	r4, ip
 8009f94:	463e      	mov	r6, r7
 8009f96:	d1f7      	bne.n	8009f88 <__utoa+0x10>
 8009f98:	7921      	ldrb	r1, [r4, #4]
 8009f9a:	7139      	strb	r1, [r7, #4]
 8009f9c:	1e91      	subs	r1, r2, #2
 8009f9e:	6820      	ldr	r0, [r4, #0]
 8009fa0:	6038      	str	r0, [r7, #0]
 8009fa2:	2922      	cmp	r1, #34	; 0x22
 8009fa4:	f04f 0100 	mov.w	r1, #0
 8009fa8:	d904      	bls.n	8009fb4 <__utoa+0x3c>
 8009faa:	7019      	strb	r1, [r3, #0]
 8009fac:	460b      	mov	r3, r1
 8009fae:	4618      	mov	r0, r3
 8009fb0:	b00b      	add	sp, #44	; 0x2c
 8009fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fb4:	1e58      	subs	r0, r3, #1
 8009fb6:	4684      	mov	ip, r0
 8009fb8:	fbb5 f7f2 	udiv	r7, r5, r2
 8009fbc:	fb02 5617 	mls	r6, r2, r7, r5
 8009fc0:	3628      	adds	r6, #40	; 0x28
 8009fc2:	446e      	add	r6, sp
 8009fc4:	460c      	mov	r4, r1
 8009fc6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8009fca:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8009fce:	462e      	mov	r6, r5
 8009fd0:	42b2      	cmp	r2, r6
 8009fd2:	f101 0101 	add.w	r1, r1, #1
 8009fd6:	463d      	mov	r5, r7
 8009fd8:	d9ee      	bls.n	8009fb8 <__utoa+0x40>
 8009fda:	2200      	movs	r2, #0
 8009fdc:	545a      	strb	r2, [r3, r1]
 8009fde:	1919      	adds	r1, r3, r4
 8009fe0:	1aa5      	subs	r5, r4, r2
 8009fe2:	42aa      	cmp	r2, r5
 8009fe4:	dae3      	bge.n	8009fae <__utoa+0x36>
 8009fe6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009fea:	780e      	ldrb	r6, [r1, #0]
 8009fec:	7006      	strb	r6, [r0, #0]
 8009fee:	3201      	adds	r2, #1
 8009ff0:	f801 5901 	strb.w	r5, [r1], #-1
 8009ff4:	e7f4      	b.n	8009fe0 <__utoa+0x68>
 8009ff6:	bf00      	nop
 8009ff8:	0800b0ec 	.word	0x0800b0ec

08009ffc <__malloc_lock>:
 8009ffc:	4801      	ldr	r0, [pc, #4]	; (800a004 <__malloc_lock+0x8>)
 8009ffe:	f000 b809 	b.w	800a014 <__retarget_lock_acquire_recursive>
 800a002:	bf00      	nop
 800a004:	20000c78 	.word	0x20000c78

0800a008 <__malloc_unlock>:
 800a008:	4801      	ldr	r0, [pc, #4]	; (800a010 <__malloc_unlock+0x8>)
 800a00a:	f000 b804 	b.w	800a016 <__retarget_lock_release_recursive>
 800a00e:	bf00      	nop
 800a010:	20000c78 	.word	0x20000c78

0800a014 <__retarget_lock_acquire_recursive>:
 800a014:	4770      	bx	lr

0800a016 <__retarget_lock_release_recursive>:
 800a016:	4770      	bx	lr

0800a018 <sin>:
 800a018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a01a:	ec53 2b10 	vmov	r2, r3, d0
 800a01e:	4828      	ldr	r0, [pc, #160]	; (800a0c0 <sin+0xa8>)
 800a020:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a024:	4281      	cmp	r1, r0
 800a026:	dc07      	bgt.n	800a038 <sin+0x20>
 800a028:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a0b8 <sin+0xa0>
 800a02c:	2000      	movs	r0, #0
 800a02e:	b005      	add	sp, #20
 800a030:	f85d eb04 	ldr.w	lr, [sp], #4
 800a034:	f000 be6c 	b.w	800ad10 <__kernel_sin>
 800a038:	4822      	ldr	r0, [pc, #136]	; (800a0c4 <sin+0xac>)
 800a03a:	4281      	cmp	r1, r0
 800a03c:	dd09      	ble.n	800a052 <sin+0x3a>
 800a03e:	ee10 0a10 	vmov	r0, s0
 800a042:	4619      	mov	r1, r3
 800a044:	f7f6 f8cc 	bl	80001e0 <__aeabi_dsub>
 800a048:	ec41 0b10 	vmov	d0, r0, r1
 800a04c:	b005      	add	sp, #20
 800a04e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a052:	4668      	mov	r0, sp
 800a054:	f000 f838 	bl	800a0c8 <__ieee754_rem_pio2>
 800a058:	f000 0003 	and.w	r0, r0, #3
 800a05c:	2801      	cmp	r0, #1
 800a05e:	d00c      	beq.n	800a07a <sin+0x62>
 800a060:	2802      	cmp	r0, #2
 800a062:	d011      	beq.n	800a088 <sin+0x70>
 800a064:	b9f0      	cbnz	r0, 800a0a4 <sin+0x8c>
 800a066:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a06a:	ed9d 0b00 	vldr	d0, [sp]
 800a06e:	2001      	movs	r0, #1
 800a070:	f000 fe4e 	bl	800ad10 <__kernel_sin>
 800a074:	ec51 0b10 	vmov	r0, r1, d0
 800a078:	e7e6      	b.n	800a048 <sin+0x30>
 800a07a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a07e:	ed9d 0b00 	vldr	d0, [sp]
 800a082:	f000 fa2d 	bl	800a4e0 <__kernel_cos>
 800a086:	e7f5      	b.n	800a074 <sin+0x5c>
 800a088:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a08c:	ed9d 0b00 	vldr	d0, [sp]
 800a090:	2001      	movs	r0, #1
 800a092:	f000 fe3d 	bl	800ad10 <__kernel_sin>
 800a096:	ec53 2b10 	vmov	r2, r3, d0
 800a09a:	ee10 0a10 	vmov	r0, s0
 800a09e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a0a2:	e7d1      	b.n	800a048 <sin+0x30>
 800a0a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a0a8:	ed9d 0b00 	vldr	d0, [sp]
 800a0ac:	f000 fa18 	bl	800a4e0 <__kernel_cos>
 800a0b0:	e7f1      	b.n	800a096 <sin+0x7e>
 800a0b2:	bf00      	nop
 800a0b4:	f3af 8000 	nop.w
	...
 800a0c0:	3fe921fb 	.word	0x3fe921fb
 800a0c4:	7fefffff 	.word	0x7fefffff

0800a0c8 <__ieee754_rem_pio2>:
 800a0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0cc:	ed2d 8b02 	vpush	{d8}
 800a0d0:	ec55 4b10 	vmov	r4, r5, d0
 800a0d4:	4bca      	ldr	r3, [pc, #808]	; (800a400 <__ieee754_rem_pio2+0x338>)
 800a0d6:	b08b      	sub	sp, #44	; 0x2c
 800a0d8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a0dc:	4598      	cmp	r8, r3
 800a0de:	4682      	mov	sl, r0
 800a0e0:	9502      	str	r5, [sp, #8]
 800a0e2:	dc08      	bgt.n	800a0f6 <__ieee754_rem_pio2+0x2e>
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	ed80 0b00 	vstr	d0, [r0]
 800a0ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a0f0:	f04f 0b00 	mov.w	fp, #0
 800a0f4:	e028      	b.n	800a148 <__ieee754_rem_pio2+0x80>
 800a0f6:	4bc3      	ldr	r3, [pc, #780]	; (800a404 <__ieee754_rem_pio2+0x33c>)
 800a0f8:	4598      	cmp	r8, r3
 800a0fa:	dc78      	bgt.n	800a1ee <__ieee754_rem_pio2+0x126>
 800a0fc:	9b02      	ldr	r3, [sp, #8]
 800a0fe:	4ec2      	ldr	r6, [pc, #776]	; (800a408 <__ieee754_rem_pio2+0x340>)
 800a100:	2b00      	cmp	r3, #0
 800a102:	ee10 0a10 	vmov	r0, s0
 800a106:	a3b0      	add	r3, pc, #704	; (adr r3, 800a3c8 <__ieee754_rem_pio2+0x300>)
 800a108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10c:	4629      	mov	r1, r5
 800a10e:	dd39      	ble.n	800a184 <__ieee754_rem_pio2+0xbc>
 800a110:	f7f6 f866 	bl	80001e0 <__aeabi_dsub>
 800a114:	45b0      	cmp	r8, r6
 800a116:	4604      	mov	r4, r0
 800a118:	460d      	mov	r5, r1
 800a11a:	d01b      	beq.n	800a154 <__ieee754_rem_pio2+0x8c>
 800a11c:	a3ac      	add	r3, pc, #688	; (adr r3, 800a3d0 <__ieee754_rem_pio2+0x308>)
 800a11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a122:	f7f6 f85d 	bl	80001e0 <__aeabi_dsub>
 800a126:	4602      	mov	r2, r0
 800a128:	460b      	mov	r3, r1
 800a12a:	e9ca 2300 	strd	r2, r3, [sl]
 800a12e:	4620      	mov	r0, r4
 800a130:	4629      	mov	r1, r5
 800a132:	f7f6 f855 	bl	80001e0 <__aeabi_dsub>
 800a136:	a3a6      	add	r3, pc, #664	; (adr r3, 800a3d0 <__ieee754_rem_pio2+0x308>)
 800a138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13c:	f7f6 f850 	bl	80001e0 <__aeabi_dsub>
 800a140:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a144:	f04f 0b01 	mov.w	fp, #1
 800a148:	4658      	mov	r0, fp
 800a14a:	b00b      	add	sp, #44	; 0x2c
 800a14c:	ecbd 8b02 	vpop	{d8}
 800a150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a154:	a3a0      	add	r3, pc, #640	; (adr r3, 800a3d8 <__ieee754_rem_pio2+0x310>)
 800a156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15a:	f7f6 f841 	bl	80001e0 <__aeabi_dsub>
 800a15e:	a3a0      	add	r3, pc, #640	; (adr r3, 800a3e0 <__ieee754_rem_pio2+0x318>)
 800a160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a164:	4604      	mov	r4, r0
 800a166:	460d      	mov	r5, r1
 800a168:	f7f6 f83a 	bl	80001e0 <__aeabi_dsub>
 800a16c:	4602      	mov	r2, r0
 800a16e:	460b      	mov	r3, r1
 800a170:	e9ca 2300 	strd	r2, r3, [sl]
 800a174:	4620      	mov	r0, r4
 800a176:	4629      	mov	r1, r5
 800a178:	f7f6 f832 	bl	80001e0 <__aeabi_dsub>
 800a17c:	a398      	add	r3, pc, #608	; (adr r3, 800a3e0 <__ieee754_rem_pio2+0x318>)
 800a17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a182:	e7db      	b.n	800a13c <__ieee754_rem_pio2+0x74>
 800a184:	f7f6 f82e 	bl	80001e4 <__adddf3>
 800a188:	45b0      	cmp	r8, r6
 800a18a:	4604      	mov	r4, r0
 800a18c:	460d      	mov	r5, r1
 800a18e:	d016      	beq.n	800a1be <__ieee754_rem_pio2+0xf6>
 800a190:	a38f      	add	r3, pc, #572	; (adr r3, 800a3d0 <__ieee754_rem_pio2+0x308>)
 800a192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a196:	f7f6 f825 	bl	80001e4 <__adddf3>
 800a19a:	4602      	mov	r2, r0
 800a19c:	460b      	mov	r3, r1
 800a19e:	e9ca 2300 	strd	r2, r3, [sl]
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	4629      	mov	r1, r5
 800a1a6:	f7f6 f81b 	bl	80001e0 <__aeabi_dsub>
 800a1aa:	a389      	add	r3, pc, #548	; (adr r3, 800a3d0 <__ieee754_rem_pio2+0x308>)
 800a1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b0:	f7f6 f818 	bl	80001e4 <__adddf3>
 800a1b4:	f04f 3bff 	mov.w	fp, #4294967295
 800a1b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a1bc:	e7c4      	b.n	800a148 <__ieee754_rem_pio2+0x80>
 800a1be:	a386      	add	r3, pc, #536	; (adr r3, 800a3d8 <__ieee754_rem_pio2+0x310>)
 800a1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c4:	f7f6 f80e 	bl	80001e4 <__adddf3>
 800a1c8:	a385      	add	r3, pc, #532	; (adr r3, 800a3e0 <__ieee754_rem_pio2+0x318>)
 800a1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ce:	4604      	mov	r4, r0
 800a1d0:	460d      	mov	r5, r1
 800a1d2:	f7f6 f807 	bl	80001e4 <__adddf3>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	460b      	mov	r3, r1
 800a1da:	e9ca 2300 	strd	r2, r3, [sl]
 800a1de:	4620      	mov	r0, r4
 800a1e0:	4629      	mov	r1, r5
 800a1e2:	f7f5 fffd 	bl	80001e0 <__aeabi_dsub>
 800a1e6:	a37e      	add	r3, pc, #504	; (adr r3, 800a3e0 <__ieee754_rem_pio2+0x318>)
 800a1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ec:	e7e0      	b.n	800a1b0 <__ieee754_rem_pio2+0xe8>
 800a1ee:	4b87      	ldr	r3, [pc, #540]	; (800a40c <__ieee754_rem_pio2+0x344>)
 800a1f0:	4598      	cmp	r8, r3
 800a1f2:	f300 80d9 	bgt.w	800a3a8 <__ieee754_rem_pio2+0x2e0>
 800a1f6:	f000 fe49 	bl	800ae8c <fabs>
 800a1fa:	ec55 4b10 	vmov	r4, r5, d0
 800a1fe:	ee10 0a10 	vmov	r0, s0
 800a202:	a379      	add	r3, pc, #484	; (adr r3, 800a3e8 <__ieee754_rem_pio2+0x320>)
 800a204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a208:	4629      	mov	r1, r5
 800a20a:	f7f6 f9a1 	bl	8000550 <__aeabi_dmul>
 800a20e:	4b80      	ldr	r3, [pc, #512]	; (800a410 <__ieee754_rem_pio2+0x348>)
 800a210:	2200      	movs	r2, #0
 800a212:	f7f5 ffe7 	bl	80001e4 <__adddf3>
 800a216:	f7f6 fc35 	bl	8000a84 <__aeabi_d2iz>
 800a21a:	4683      	mov	fp, r0
 800a21c:	f7f6 f92e 	bl	800047c <__aeabi_i2d>
 800a220:	4602      	mov	r2, r0
 800a222:	460b      	mov	r3, r1
 800a224:	ec43 2b18 	vmov	d8, r2, r3
 800a228:	a367      	add	r3, pc, #412	; (adr r3, 800a3c8 <__ieee754_rem_pio2+0x300>)
 800a22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22e:	f7f6 f98f 	bl	8000550 <__aeabi_dmul>
 800a232:	4602      	mov	r2, r0
 800a234:	460b      	mov	r3, r1
 800a236:	4620      	mov	r0, r4
 800a238:	4629      	mov	r1, r5
 800a23a:	f7f5 ffd1 	bl	80001e0 <__aeabi_dsub>
 800a23e:	a364      	add	r3, pc, #400	; (adr r3, 800a3d0 <__ieee754_rem_pio2+0x308>)
 800a240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a244:	4606      	mov	r6, r0
 800a246:	460f      	mov	r7, r1
 800a248:	ec51 0b18 	vmov	r0, r1, d8
 800a24c:	f7f6 f980 	bl	8000550 <__aeabi_dmul>
 800a250:	f1bb 0f1f 	cmp.w	fp, #31
 800a254:	4604      	mov	r4, r0
 800a256:	460d      	mov	r5, r1
 800a258:	dc0d      	bgt.n	800a276 <__ieee754_rem_pio2+0x1ae>
 800a25a:	4b6e      	ldr	r3, [pc, #440]	; (800a414 <__ieee754_rem_pio2+0x34c>)
 800a25c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a264:	4543      	cmp	r3, r8
 800a266:	d006      	beq.n	800a276 <__ieee754_rem_pio2+0x1ae>
 800a268:	4622      	mov	r2, r4
 800a26a:	462b      	mov	r3, r5
 800a26c:	4630      	mov	r0, r6
 800a26e:	4639      	mov	r1, r7
 800a270:	f7f5 ffb6 	bl	80001e0 <__aeabi_dsub>
 800a274:	e00f      	b.n	800a296 <__ieee754_rem_pio2+0x1ce>
 800a276:	462b      	mov	r3, r5
 800a278:	4622      	mov	r2, r4
 800a27a:	4630      	mov	r0, r6
 800a27c:	4639      	mov	r1, r7
 800a27e:	f7f5 ffaf 	bl	80001e0 <__aeabi_dsub>
 800a282:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a286:	9303      	str	r3, [sp, #12]
 800a288:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a28c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a290:	f1b8 0f10 	cmp.w	r8, #16
 800a294:	dc02      	bgt.n	800a29c <__ieee754_rem_pio2+0x1d4>
 800a296:	e9ca 0100 	strd	r0, r1, [sl]
 800a29a:	e039      	b.n	800a310 <__ieee754_rem_pio2+0x248>
 800a29c:	a34e      	add	r3, pc, #312	; (adr r3, 800a3d8 <__ieee754_rem_pio2+0x310>)
 800a29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a2:	ec51 0b18 	vmov	r0, r1, d8
 800a2a6:	f7f6 f953 	bl	8000550 <__aeabi_dmul>
 800a2aa:	4604      	mov	r4, r0
 800a2ac:	460d      	mov	r5, r1
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	4630      	mov	r0, r6
 800a2b4:	4639      	mov	r1, r7
 800a2b6:	f7f5 ff93 	bl	80001e0 <__aeabi_dsub>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	460b      	mov	r3, r1
 800a2be:	4680      	mov	r8, r0
 800a2c0:	4689      	mov	r9, r1
 800a2c2:	4630      	mov	r0, r6
 800a2c4:	4639      	mov	r1, r7
 800a2c6:	f7f5 ff8b 	bl	80001e0 <__aeabi_dsub>
 800a2ca:	4622      	mov	r2, r4
 800a2cc:	462b      	mov	r3, r5
 800a2ce:	f7f5 ff87 	bl	80001e0 <__aeabi_dsub>
 800a2d2:	a343      	add	r3, pc, #268	; (adr r3, 800a3e0 <__ieee754_rem_pio2+0x318>)
 800a2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d8:	4604      	mov	r4, r0
 800a2da:	460d      	mov	r5, r1
 800a2dc:	ec51 0b18 	vmov	r0, r1, d8
 800a2e0:	f7f6 f936 	bl	8000550 <__aeabi_dmul>
 800a2e4:	4622      	mov	r2, r4
 800a2e6:	462b      	mov	r3, r5
 800a2e8:	f7f5 ff7a 	bl	80001e0 <__aeabi_dsub>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	4604      	mov	r4, r0
 800a2f2:	460d      	mov	r5, r1
 800a2f4:	4640      	mov	r0, r8
 800a2f6:	4649      	mov	r1, r9
 800a2f8:	f7f5 ff72 	bl	80001e0 <__aeabi_dsub>
 800a2fc:	9a03      	ldr	r2, [sp, #12]
 800a2fe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a302:	1ad3      	subs	r3, r2, r3
 800a304:	2b31      	cmp	r3, #49	; 0x31
 800a306:	dc24      	bgt.n	800a352 <__ieee754_rem_pio2+0x28a>
 800a308:	e9ca 0100 	strd	r0, r1, [sl]
 800a30c:	4646      	mov	r6, r8
 800a30e:	464f      	mov	r7, r9
 800a310:	e9da 8900 	ldrd	r8, r9, [sl]
 800a314:	4630      	mov	r0, r6
 800a316:	4642      	mov	r2, r8
 800a318:	464b      	mov	r3, r9
 800a31a:	4639      	mov	r1, r7
 800a31c:	f7f5 ff60 	bl	80001e0 <__aeabi_dsub>
 800a320:	462b      	mov	r3, r5
 800a322:	4622      	mov	r2, r4
 800a324:	f7f5 ff5c 	bl	80001e0 <__aeabi_dsub>
 800a328:	9b02      	ldr	r3, [sp, #8]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a330:	f6bf af0a 	bge.w	800a148 <__ieee754_rem_pio2+0x80>
 800a334:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a338:	f8ca 3004 	str.w	r3, [sl, #4]
 800a33c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a340:	f8ca 8000 	str.w	r8, [sl]
 800a344:	f8ca 0008 	str.w	r0, [sl, #8]
 800a348:	f8ca 300c 	str.w	r3, [sl, #12]
 800a34c:	f1cb 0b00 	rsb	fp, fp, #0
 800a350:	e6fa      	b.n	800a148 <__ieee754_rem_pio2+0x80>
 800a352:	a327      	add	r3, pc, #156	; (adr r3, 800a3f0 <__ieee754_rem_pio2+0x328>)
 800a354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a358:	ec51 0b18 	vmov	r0, r1, d8
 800a35c:	f7f6 f8f8 	bl	8000550 <__aeabi_dmul>
 800a360:	4604      	mov	r4, r0
 800a362:	460d      	mov	r5, r1
 800a364:	4602      	mov	r2, r0
 800a366:	460b      	mov	r3, r1
 800a368:	4640      	mov	r0, r8
 800a36a:	4649      	mov	r1, r9
 800a36c:	f7f5 ff38 	bl	80001e0 <__aeabi_dsub>
 800a370:	4602      	mov	r2, r0
 800a372:	460b      	mov	r3, r1
 800a374:	4606      	mov	r6, r0
 800a376:	460f      	mov	r7, r1
 800a378:	4640      	mov	r0, r8
 800a37a:	4649      	mov	r1, r9
 800a37c:	f7f5 ff30 	bl	80001e0 <__aeabi_dsub>
 800a380:	4622      	mov	r2, r4
 800a382:	462b      	mov	r3, r5
 800a384:	f7f5 ff2c 	bl	80001e0 <__aeabi_dsub>
 800a388:	a31b      	add	r3, pc, #108	; (adr r3, 800a3f8 <__ieee754_rem_pio2+0x330>)
 800a38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38e:	4604      	mov	r4, r0
 800a390:	460d      	mov	r5, r1
 800a392:	ec51 0b18 	vmov	r0, r1, d8
 800a396:	f7f6 f8db 	bl	8000550 <__aeabi_dmul>
 800a39a:	4622      	mov	r2, r4
 800a39c:	462b      	mov	r3, r5
 800a39e:	f7f5 ff1f 	bl	80001e0 <__aeabi_dsub>
 800a3a2:	4604      	mov	r4, r0
 800a3a4:	460d      	mov	r5, r1
 800a3a6:	e75f      	b.n	800a268 <__ieee754_rem_pio2+0x1a0>
 800a3a8:	4b1b      	ldr	r3, [pc, #108]	; (800a418 <__ieee754_rem_pio2+0x350>)
 800a3aa:	4598      	cmp	r8, r3
 800a3ac:	dd36      	ble.n	800a41c <__ieee754_rem_pio2+0x354>
 800a3ae:	ee10 2a10 	vmov	r2, s0
 800a3b2:	462b      	mov	r3, r5
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	4629      	mov	r1, r5
 800a3b8:	f7f5 ff12 	bl	80001e0 <__aeabi_dsub>
 800a3bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a3c0:	e9ca 0100 	strd	r0, r1, [sl]
 800a3c4:	e694      	b.n	800a0f0 <__ieee754_rem_pio2+0x28>
 800a3c6:	bf00      	nop
 800a3c8:	54400000 	.word	0x54400000
 800a3cc:	3ff921fb 	.word	0x3ff921fb
 800a3d0:	1a626331 	.word	0x1a626331
 800a3d4:	3dd0b461 	.word	0x3dd0b461
 800a3d8:	1a600000 	.word	0x1a600000
 800a3dc:	3dd0b461 	.word	0x3dd0b461
 800a3e0:	2e037073 	.word	0x2e037073
 800a3e4:	3ba3198a 	.word	0x3ba3198a
 800a3e8:	6dc9c883 	.word	0x6dc9c883
 800a3ec:	3fe45f30 	.word	0x3fe45f30
 800a3f0:	2e000000 	.word	0x2e000000
 800a3f4:	3ba3198a 	.word	0x3ba3198a
 800a3f8:	252049c1 	.word	0x252049c1
 800a3fc:	397b839a 	.word	0x397b839a
 800a400:	3fe921fb 	.word	0x3fe921fb
 800a404:	4002d97b 	.word	0x4002d97b
 800a408:	3ff921fb 	.word	0x3ff921fb
 800a40c:	413921fb 	.word	0x413921fb
 800a410:	3fe00000 	.word	0x3fe00000
 800a414:	0800b114 	.word	0x0800b114
 800a418:	7fefffff 	.word	0x7fefffff
 800a41c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a420:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a424:	ee10 0a10 	vmov	r0, s0
 800a428:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a42c:	ee10 6a10 	vmov	r6, s0
 800a430:	460f      	mov	r7, r1
 800a432:	f7f6 fb27 	bl	8000a84 <__aeabi_d2iz>
 800a436:	f7f6 f821 	bl	800047c <__aeabi_i2d>
 800a43a:	4602      	mov	r2, r0
 800a43c:	460b      	mov	r3, r1
 800a43e:	4630      	mov	r0, r6
 800a440:	4639      	mov	r1, r7
 800a442:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a446:	f7f5 fecb 	bl	80001e0 <__aeabi_dsub>
 800a44a:	4b23      	ldr	r3, [pc, #140]	; (800a4d8 <__ieee754_rem_pio2+0x410>)
 800a44c:	2200      	movs	r2, #0
 800a44e:	f7f6 f87f 	bl	8000550 <__aeabi_dmul>
 800a452:	460f      	mov	r7, r1
 800a454:	4606      	mov	r6, r0
 800a456:	f7f6 fb15 	bl	8000a84 <__aeabi_d2iz>
 800a45a:	f7f6 f80f 	bl	800047c <__aeabi_i2d>
 800a45e:	4602      	mov	r2, r0
 800a460:	460b      	mov	r3, r1
 800a462:	4630      	mov	r0, r6
 800a464:	4639      	mov	r1, r7
 800a466:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a46a:	f7f5 feb9 	bl	80001e0 <__aeabi_dsub>
 800a46e:	4b1a      	ldr	r3, [pc, #104]	; (800a4d8 <__ieee754_rem_pio2+0x410>)
 800a470:	2200      	movs	r2, #0
 800a472:	f7f6 f86d 	bl	8000550 <__aeabi_dmul>
 800a476:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a47a:	ad04      	add	r5, sp, #16
 800a47c:	f04f 0803 	mov.w	r8, #3
 800a480:	46a9      	mov	r9, r5
 800a482:	2600      	movs	r6, #0
 800a484:	2700      	movs	r7, #0
 800a486:	4632      	mov	r2, r6
 800a488:	463b      	mov	r3, r7
 800a48a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a48e:	46c3      	mov	fp, r8
 800a490:	3d08      	subs	r5, #8
 800a492:	f108 38ff 	add.w	r8, r8, #4294967295
 800a496:	f7f6 fac3 	bl	8000a20 <__aeabi_dcmpeq>
 800a49a:	2800      	cmp	r0, #0
 800a49c:	d1f3      	bne.n	800a486 <__ieee754_rem_pio2+0x3be>
 800a49e:	4b0f      	ldr	r3, [pc, #60]	; (800a4dc <__ieee754_rem_pio2+0x414>)
 800a4a0:	9301      	str	r3, [sp, #4]
 800a4a2:	2302      	movs	r3, #2
 800a4a4:	9300      	str	r3, [sp, #0]
 800a4a6:	4622      	mov	r2, r4
 800a4a8:	465b      	mov	r3, fp
 800a4aa:	4651      	mov	r1, sl
 800a4ac:	4648      	mov	r0, r9
 800a4ae:	f000 f8df 	bl	800a670 <__kernel_rem_pio2>
 800a4b2:	9b02      	ldr	r3, [sp, #8]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	4683      	mov	fp, r0
 800a4b8:	f6bf ae46 	bge.w	800a148 <__ieee754_rem_pio2+0x80>
 800a4bc:	e9da 2100 	ldrd	r2, r1, [sl]
 800a4c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a4c4:	e9ca 2300 	strd	r2, r3, [sl]
 800a4c8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a4cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a4d0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a4d4:	e73a      	b.n	800a34c <__ieee754_rem_pio2+0x284>
 800a4d6:	bf00      	nop
 800a4d8:	41700000 	.word	0x41700000
 800a4dc:	0800b194 	.word	0x0800b194

0800a4e0 <__kernel_cos>:
 800a4e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e4:	ec57 6b10 	vmov	r6, r7, d0
 800a4e8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a4ec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a4f0:	ed8d 1b00 	vstr	d1, [sp]
 800a4f4:	da07      	bge.n	800a506 <__kernel_cos+0x26>
 800a4f6:	ee10 0a10 	vmov	r0, s0
 800a4fa:	4639      	mov	r1, r7
 800a4fc:	f7f6 fac2 	bl	8000a84 <__aeabi_d2iz>
 800a500:	2800      	cmp	r0, #0
 800a502:	f000 8088 	beq.w	800a616 <__kernel_cos+0x136>
 800a506:	4632      	mov	r2, r6
 800a508:	463b      	mov	r3, r7
 800a50a:	4630      	mov	r0, r6
 800a50c:	4639      	mov	r1, r7
 800a50e:	f7f6 f81f 	bl	8000550 <__aeabi_dmul>
 800a512:	4b51      	ldr	r3, [pc, #324]	; (800a658 <__kernel_cos+0x178>)
 800a514:	2200      	movs	r2, #0
 800a516:	4604      	mov	r4, r0
 800a518:	460d      	mov	r5, r1
 800a51a:	f7f6 f819 	bl	8000550 <__aeabi_dmul>
 800a51e:	a340      	add	r3, pc, #256	; (adr r3, 800a620 <__kernel_cos+0x140>)
 800a520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a524:	4682      	mov	sl, r0
 800a526:	468b      	mov	fp, r1
 800a528:	4620      	mov	r0, r4
 800a52a:	4629      	mov	r1, r5
 800a52c:	f7f6 f810 	bl	8000550 <__aeabi_dmul>
 800a530:	a33d      	add	r3, pc, #244	; (adr r3, 800a628 <__kernel_cos+0x148>)
 800a532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a536:	f7f5 fe55 	bl	80001e4 <__adddf3>
 800a53a:	4622      	mov	r2, r4
 800a53c:	462b      	mov	r3, r5
 800a53e:	f7f6 f807 	bl	8000550 <__aeabi_dmul>
 800a542:	a33b      	add	r3, pc, #236	; (adr r3, 800a630 <__kernel_cos+0x150>)
 800a544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a548:	f7f5 fe4a 	bl	80001e0 <__aeabi_dsub>
 800a54c:	4622      	mov	r2, r4
 800a54e:	462b      	mov	r3, r5
 800a550:	f7f5 fffe 	bl	8000550 <__aeabi_dmul>
 800a554:	a338      	add	r3, pc, #224	; (adr r3, 800a638 <__kernel_cos+0x158>)
 800a556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55a:	f7f5 fe43 	bl	80001e4 <__adddf3>
 800a55e:	4622      	mov	r2, r4
 800a560:	462b      	mov	r3, r5
 800a562:	f7f5 fff5 	bl	8000550 <__aeabi_dmul>
 800a566:	a336      	add	r3, pc, #216	; (adr r3, 800a640 <__kernel_cos+0x160>)
 800a568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56c:	f7f5 fe38 	bl	80001e0 <__aeabi_dsub>
 800a570:	4622      	mov	r2, r4
 800a572:	462b      	mov	r3, r5
 800a574:	f7f5 ffec 	bl	8000550 <__aeabi_dmul>
 800a578:	a333      	add	r3, pc, #204	; (adr r3, 800a648 <__kernel_cos+0x168>)
 800a57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57e:	f7f5 fe31 	bl	80001e4 <__adddf3>
 800a582:	4622      	mov	r2, r4
 800a584:	462b      	mov	r3, r5
 800a586:	f7f5 ffe3 	bl	8000550 <__aeabi_dmul>
 800a58a:	4622      	mov	r2, r4
 800a58c:	462b      	mov	r3, r5
 800a58e:	f7f5 ffdf 	bl	8000550 <__aeabi_dmul>
 800a592:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a596:	4604      	mov	r4, r0
 800a598:	460d      	mov	r5, r1
 800a59a:	4630      	mov	r0, r6
 800a59c:	4639      	mov	r1, r7
 800a59e:	f7f5 ffd7 	bl	8000550 <__aeabi_dmul>
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	4629      	mov	r1, r5
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f7f5 fe19 	bl	80001e0 <__aeabi_dsub>
 800a5ae:	4b2b      	ldr	r3, [pc, #172]	; (800a65c <__kernel_cos+0x17c>)
 800a5b0:	4598      	cmp	r8, r3
 800a5b2:	4606      	mov	r6, r0
 800a5b4:	460f      	mov	r7, r1
 800a5b6:	dc10      	bgt.n	800a5da <__kernel_cos+0xfa>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	4650      	mov	r0, sl
 800a5be:	4659      	mov	r1, fp
 800a5c0:	f7f5 fe0e 	bl	80001e0 <__aeabi_dsub>
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	4926      	ldr	r1, [pc, #152]	; (800a660 <__kernel_cos+0x180>)
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	f7f5 fe08 	bl	80001e0 <__aeabi_dsub>
 800a5d0:	ec41 0b10 	vmov	d0, r0, r1
 800a5d4:	b003      	add	sp, #12
 800a5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5da:	4b22      	ldr	r3, [pc, #136]	; (800a664 <__kernel_cos+0x184>)
 800a5dc:	4920      	ldr	r1, [pc, #128]	; (800a660 <__kernel_cos+0x180>)
 800a5de:	4598      	cmp	r8, r3
 800a5e0:	bfcc      	ite	gt
 800a5e2:	4d21      	ldrgt	r5, [pc, #132]	; (800a668 <__kernel_cos+0x188>)
 800a5e4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a5e8:	2400      	movs	r4, #0
 800a5ea:	4622      	mov	r2, r4
 800a5ec:	462b      	mov	r3, r5
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	f7f5 fdf6 	bl	80001e0 <__aeabi_dsub>
 800a5f4:	4622      	mov	r2, r4
 800a5f6:	4680      	mov	r8, r0
 800a5f8:	4689      	mov	r9, r1
 800a5fa:	462b      	mov	r3, r5
 800a5fc:	4650      	mov	r0, sl
 800a5fe:	4659      	mov	r1, fp
 800a600:	f7f5 fdee 	bl	80001e0 <__aeabi_dsub>
 800a604:	4632      	mov	r2, r6
 800a606:	463b      	mov	r3, r7
 800a608:	f7f5 fdea 	bl	80001e0 <__aeabi_dsub>
 800a60c:	4602      	mov	r2, r0
 800a60e:	460b      	mov	r3, r1
 800a610:	4640      	mov	r0, r8
 800a612:	4649      	mov	r1, r9
 800a614:	e7da      	b.n	800a5cc <__kernel_cos+0xec>
 800a616:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a650 <__kernel_cos+0x170>
 800a61a:	e7db      	b.n	800a5d4 <__kernel_cos+0xf4>
 800a61c:	f3af 8000 	nop.w
 800a620:	be8838d4 	.word	0xbe8838d4
 800a624:	bda8fae9 	.word	0xbda8fae9
 800a628:	bdb4b1c4 	.word	0xbdb4b1c4
 800a62c:	3e21ee9e 	.word	0x3e21ee9e
 800a630:	809c52ad 	.word	0x809c52ad
 800a634:	3e927e4f 	.word	0x3e927e4f
 800a638:	19cb1590 	.word	0x19cb1590
 800a63c:	3efa01a0 	.word	0x3efa01a0
 800a640:	16c15177 	.word	0x16c15177
 800a644:	3f56c16c 	.word	0x3f56c16c
 800a648:	5555554c 	.word	0x5555554c
 800a64c:	3fa55555 	.word	0x3fa55555
 800a650:	00000000 	.word	0x00000000
 800a654:	3ff00000 	.word	0x3ff00000
 800a658:	3fe00000 	.word	0x3fe00000
 800a65c:	3fd33332 	.word	0x3fd33332
 800a660:	3ff00000 	.word	0x3ff00000
 800a664:	3fe90000 	.word	0x3fe90000
 800a668:	3fd20000 	.word	0x3fd20000
 800a66c:	00000000 	.word	0x00000000

0800a670 <__kernel_rem_pio2>:
 800a670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a674:	ed2d 8b02 	vpush	{d8}
 800a678:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a67c:	f112 0f14 	cmn.w	r2, #20
 800a680:	9308      	str	r3, [sp, #32]
 800a682:	9101      	str	r1, [sp, #4]
 800a684:	4bc4      	ldr	r3, [pc, #784]	; (800a998 <__kernel_rem_pio2+0x328>)
 800a686:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a688:	900b      	str	r0, [sp, #44]	; 0x2c
 800a68a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a68e:	9302      	str	r3, [sp, #8]
 800a690:	9b08      	ldr	r3, [sp, #32]
 800a692:	f103 33ff 	add.w	r3, r3, #4294967295
 800a696:	bfa8      	it	ge
 800a698:	1ed4      	subge	r4, r2, #3
 800a69a:	9306      	str	r3, [sp, #24]
 800a69c:	bfb2      	itee	lt
 800a69e:	2400      	movlt	r4, #0
 800a6a0:	2318      	movge	r3, #24
 800a6a2:	fb94 f4f3 	sdivge	r4, r4, r3
 800a6a6:	f06f 0317 	mvn.w	r3, #23
 800a6aa:	fb04 3303 	mla	r3, r4, r3, r3
 800a6ae:	eb03 0a02 	add.w	sl, r3, r2
 800a6b2:	9b02      	ldr	r3, [sp, #8]
 800a6b4:	9a06      	ldr	r2, [sp, #24]
 800a6b6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800a988 <__kernel_rem_pio2+0x318>
 800a6ba:	eb03 0802 	add.w	r8, r3, r2
 800a6be:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a6c0:	1aa7      	subs	r7, r4, r2
 800a6c2:	ae22      	add	r6, sp, #136	; 0x88
 800a6c4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a6c8:	2500      	movs	r5, #0
 800a6ca:	4545      	cmp	r5, r8
 800a6cc:	dd13      	ble.n	800a6f6 <__kernel_rem_pio2+0x86>
 800a6ce:	9b08      	ldr	r3, [sp, #32]
 800a6d0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800a988 <__kernel_rem_pio2+0x318>
 800a6d4:	aa22      	add	r2, sp, #136	; 0x88
 800a6d6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a6da:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a6de:	f04f 0800 	mov.w	r8, #0
 800a6e2:	9b02      	ldr	r3, [sp, #8]
 800a6e4:	4598      	cmp	r8, r3
 800a6e6:	dc2f      	bgt.n	800a748 <__kernel_rem_pio2+0xd8>
 800a6e8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a6ec:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a6f0:	462f      	mov	r7, r5
 800a6f2:	2600      	movs	r6, #0
 800a6f4:	e01b      	b.n	800a72e <__kernel_rem_pio2+0xbe>
 800a6f6:	42ef      	cmn	r7, r5
 800a6f8:	d407      	bmi.n	800a70a <__kernel_rem_pio2+0x9a>
 800a6fa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a6fe:	f7f5 febd 	bl	800047c <__aeabi_i2d>
 800a702:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a706:	3501      	adds	r5, #1
 800a708:	e7df      	b.n	800a6ca <__kernel_rem_pio2+0x5a>
 800a70a:	ec51 0b18 	vmov	r0, r1, d8
 800a70e:	e7f8      	b.n	800a702 <__kernel_rem_pio2+0x92>
 800a710:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a714:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a718:	f7f5 ff1a 	bl	8000550 <__aeabi_dmul>
 800a71c:	4602      	mov	r2, r0
 800a71e:	460b      	mov	r3, r1
 800a720:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a724:	f7f5 fd5e 	bl	80001e4 <__adddf3>
 800a728:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a72c:	3601      	adds	r6, #1
 800a72e:	9b06      	ldr	r3, [sp, #24]
 800a730:	429e      	cmp	r6, r3
 800a732:	f1a7 0708 	sub.w	r7, r7, #8
 800a736:	ddeb      	ble.n	800a710 <__kernel_rem_pio2+0xa0>
 800a738:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a73c:	f108 0801 	add.w	r8, r8, #1
 800a740:	ecab 7b02 	vstmia	fp!, {d7}
 800a744:	3508      	adds	r5, #8
 800a746:	e7cc      	b.n	800a6e2 <__kernel_rem_pio2+0x72>
 800a748:	9b02      	ldr	r3, [sp, #8]
 800a74a:	aa0e      	add	r2, sp, #56	; 0x38
 800a74c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a750:	930d      	str	r3, [sp, #52]	; 0x34
 800a752:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a754:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a758:	9c02      	ldr	r4, [sp, #8]
 800a75a:	930c      	str	r3, [sp, #48]	; 0x30
 800a75c:	00e3      	lsls	r3, r4, #3
 800a75e:	930a      	str	r3, [sp, #40]	; 0x28
 800a760:	ab9a      	add	r3, sp, #616	; 0x268
 800a762:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a766:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a76a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a76e:	ab72      	add	r3, sp, #456	; 0x1c8
 800a770:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a774:	46c3      	mov	fp, r8
 800a776:	46a1      	mov	r9, r4
 800a778:	f1b9 0f00 	cmp.w	r9, #0
 800a77c:	f1a5 0508 	sub.w	r5, r5, #8
 800a780:	dc77      	bgt.n	800a872 <__kernel_rem_pio2+0x202>
 800a782:	ec47 6b10 	vmov	d0, r6, r7
 800a786:	4650      	mov	r0, sl
 800a788:	f000 fc0a 	bl	800afa0 <scalbn>
 800a78c:	ec57 6b10 	vmov	r6, r7, d0
 800a790:	2200      	movs	r2, #0
 800a792:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a796:	ee10 0a10 	vmov	r0, s0
 800a79a:	4639      	mov	r1, r7
 800a79c:	f7f5 fed8 	bl	8000550 <__aeabi_dmul>
 800a7a0:	ec41 0b10 	vmov	d0, r0, r1
 800a7a4:	f000 fb7c 	bl	800aea0 <floor>
 800a7a8:	4b7c      	ldr	r3, [pc, #496]	; (800a99c <__kernel_rem_pio2+0x32c>)
 800a7aa:	ec51 0b10 	vmov	r0, r1, d0
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f7f5 fece 	bl	8000550 <__aeabi_dmul>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	460b      	mov	r3, r1
 800a7b8:	4630      	mov	r0, r6
 800a7ba:	4639      	mov	r1, r7
 800a7bc:	f7f5 fd10 	bl	80001e0 <__aeabi_dsub>
 800a7c0:	460f      	mov	r7, r1
 800a7c2:	4606      	mov	r6, r0
 800a7c4:	f7f6 f95e 	bl	8000a84 <__aeabi_d2iz>
 800a7c8:	9004      	str	r0, [sp, #16]
 800a7ca:	f7f5 fe57 	bl	800047c <__aeabi_i2d>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	4639      	mov	r1, r7
 800a7d6:	f7f5 fd03 	bl	80001e0 <__aeabi_dsub>
 800a7da:	f1ba 0f00 	cmp.w	sl, #0
 800a7de:	4606      	mov	r6, r0
 800a7e0:	460f      	mov	r7, r1
 800a7e2:	dd6d      	ble.n	800a8c0 <__kernel_rem_pio2+0x250>
 800a7e4:	1e62      	subs	r2, r4, #1
 800a7e6:	ab0e      	add	r3, sp, #56	; 0x38
 800a7e8:	9d04      	ldr	r5, [sp, #16]
 800a7ea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a7ee:	f1ca 0118 	rsb	r1, sl, #24
 800a7f2:	fa40 f301 	asr.w	r3, r0, r1
 800a7f6:	441d      	add	r5, r3
 800a7f8:	408b      	lsls	r3, r1
 800a7fa:	1ac0      	subs	r0, r0, r3
 800a7fc:	ab0e      	add	r3, sp, #56	; 0x38
 800a7fe:	9504      	str	r5, [sp, #16]
 800a800:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a804:	f1ca 0317 	rsb	r3, sl, #23
 800a808:	fa40 fb03 	asr.w	fp, r0, r3
 800a80c:	f1bb 0f00 	cmp.w	fp, #0
 800a810:	dd65      	ble.n	800a8de <__kernel_rem_pio2+0x26e>
 800a812:	9b04      	ldr	r3, [sp, #16]
 800a814:	2200      	movs	r2, #0
 800a816:	3301      	adds	r3, #1
 800a818:	9304      	str	r3, [sp, #16]
 800a81a:	4615      	mov	r5, r2
 800a81c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a820:	4294      	cmp	r4, r2
 800a822:	f300 809c 	bgt.w	800a95e <__kernel_rem_pio2+0x2ee>
 800a826:	f1ba 0f00 	cmp.w	sl, #0
 800a82a:	dd07      	ble.n	800a83c <__kernel_rem_pio2+0x1cc>
 800a82c:	f1ba 0f01 	cmp.w	sl, #1
 800a830:	f000 80c0 	beq.w	800a9b4 <__kernel_rem_pio2+0x344>
 800a834:	f1ba 0f02 	cmp.w	sl, #2
 800a838:	f000 80c6 	beq.w	800a9c8 <__kernel_rem_pio2+0x358>
 800a83c:	f1bb 0f02 	cmp.w	fp, #2
 800a840:	d14d      	bne.n	800a8de <__kernel_rem_pio2+0x26e>
 800a842:	4632      	mov	r2, r6
 800a844:	463b      	mov	r3, r7
 800a846:	4956      	ldr	r1, [pc, #344]	; (800a9a0 <__kernel_rem_pio2+0x330>)
 800a848:	2000      	movs	r0, #0
 800a84a:	f7f5 fcc9 	bl	80001e0 <__aeabi_dsub>
 800a84e:	4606      	mov	r6, r0
 800a850:	460f      	mov	r7, r1
 800a852:	2d00      	cmp	r5, #0
 800a854:	d043      	beq.n	800a8de <__kernel_rem_pio2+0x26e>
 800a856:	4650      	mov	r0, sl
 800a858:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800a990 <__kernel_rem_pio2+0x320>
 800a85c:	f000 fba0 	bl	800afa0 <scalbn>
 800a860:	4630      	mov	r0, r6
 800a862:	4639      	mov	r1, r7
 800a864:	ec53 2b10 	vmov	r2, r3, d0
 800a868:	f7f5 fcba 	bl	80001e0 <__aeabi_dsub>
 800a86c:	4606      	mov	r6, r0
 800a86e:	460f      	mov	r7, r1
 800a870:	e035      	b.n	800a8de <__kernel_rem_pio2+0x26e>
 800a872:	4b4c      	ldr	r3, [pc, #304]	; (800a9a4 <__kernel_rem_pio2+0x334>)
 800a874:	2200      	movs	r2, #0
 800a876:	4630      	mov	r0, r6
 800a878:	4639      	mov	r1, r7
 800a87a:	f7f5 fe69 	bl	8000550 <__aeabi_dmul>
 800a87e:	f7f6 f901 	bl	8000a84 <__aeabi_d2iz>
 800a882:	f7f5 fdfb 	bl	800047c <__aeabi_i2d>
 800a886:	4602      	mov	r2, r0
 800a888:	460b      	mov	r3, r1
 800a88a:	ec43 2b18 	vmov	d8, r2, r3
 800a88e:	4b46      	ldr	r3, [pc, #280]	; (800a9a8 <__kernel_rem_pio2+0x338>)
 800a890:	2200      	movs	r2, #0
 800a892:	f7f5 fe5d 	bl	8000550 <__aeabi_dmul>
 800a896:	4602      	mov	r2, r0
 800a898:	460b      	mov	r3, r1
 800a89a:	4630      	mov	r0, r6
 800a89c:	4639      	mov	r1, r7
 800a89e:	f7f5 fc9f 	bl	80001e0 <__aeabi_dsub>
 800a8a2:	f7f6 f8ef 	bl	8000a84 <__aeabi_d2iz>
 800a8a6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a8aa:	f84b 0b04 	str.w	r0, [fp], #4
 800a8ae:	ec51 0b18 	vmov	r0, r1, d8
 800a8b2:	f7f5 fc97 	bl	80001e4 <__adddf3>
 800a8b6:	f109 39ff 	add.w	r9, r9, #4294967295
 800a8ba:	4606      	mov	r6, r0
 800a8bc:	460f      	mov	r7, r1
 800a8be:	e75b      	b.n	800a778 <__kernel_rem_pio2+0x108>
 800a8c0:	d106      	bne.n	800a8d0 <__kernel_rem_pio2+0x260>
 800a8c2:	1e63      	subs	r3, r4, #1
 800a8c4:	aa0e      	add	r2, sp, #56	; 0x38
 800a8c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a8ca:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800a8ce:	e79d      	b.n	800a80c <__kernel_rem_pio2+0x19c>
 800a8d0:	4b36      	ldr	r3, [pc, #216]	; (800a9ac <__kernel_rem_pio2+0x33c>)
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f7f6 f8c2 	bl	8000a5c <__aeabi_dcmpge>
 800a8d8:	2800      	cmp	r0, #0
 800a8da:	d13d      	bne.n	800a958 <__kernel_rem_pio2+0x2e8>
 800a8dc:	4683      	mov	fp, r0
 800a8de:	2200      	movs	r2, #0
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	4639      	mov	r1, r7
 800a8e6:	f7f6 f89b 	bl	8000a20 <__aeabi_dcmpeq>
 800a8ea:	2800      	cmp	r0, #0
 800a8ec:	f000 80c0 	beq.w	800aa70 <__kernel_rem_pio2+0x400>
 800a8f0:	1e65      	subs	r5, r4, #1
 800a8f2:	462b      	mov	r3, r5
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	9902      	ldr	r1, [sp, #8]
 800a8f8:	428b      	cmp	r3, r1
 800a8fa:	da6c      	bge.n	800a9d6 <__kernel_rem_pio2+0x366>
 800a8fc:	2a00      	cmp	r2, #0
 800a8fe:	f000 8089 	beq.w	800aa14 <__kernel_rem_pio2+0x3a4>
 800a902:	ab0e      	add	r3, sp, #56	; 0x38
 800a904:	f1aa 0a18 	sub.w	sl, sl, #24
 800a908:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f000 80ad 	beq.w	800aa6c <__kernel_rem_pio2+0x3fc>
 800a912:	4650      	mov	r0, sl
 800a914:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800a990 <__kernel_rem_pio2+0x320>
 800a918:	f000 fb42 	bl	800afa0 <scalbn>
 800a91c:	ab9a      	add	r3, sp, #616	; 0x268
 800a91e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a922:	ec57 6b10 	vmov	r6, r7, d0
 800a926:	00ec      	lsls	r4, r5, #3
 800a928:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800a92c:	46aa      	mov	sl, r5
 800a92e:	f1ba 0f00 	cmp.w	sl, #0
 800a932:	f280 80d6 	bge.w	800aae2 <__kernel_rem_pio2+0x472>
 800a936:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800a988 <__kernel_rem_pio2+0x318>
 800a93a:	462e      	mov	r6, r5
 800a93c:	2e00      	cmp	r6, #0
 800a93e:	f2c0 8104 	blt.w	800ab4a <__kernel_rem_pio2+0x4da>
 800a942:	ab72      	add	r3, sp, #456	; 0x1c8
 800a944:	ed8d 8b06 	vstr	d8, [sp, #24]
 800a948:	f8df a064 	ldr.w	sl, [pc, #100]	; 800a9b0 <__kernel_rem_pio2+0x340>
 800a94c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800a950:	f04f 0800 	mov.w	r8, #0
 800a954:	1baf      	subs	r7, r5, r6
 800a956:	e0ea      	b.n	800ab2e <__kernel_rem_pio2+0x4be>
 800a958:	f04f 0b02 	mov.w	fp, #2
 800a95c:	e759      	b.n	800a812 <__kernel_rem_pio2+0x1a2>
 800a95e:	f8d8 3000 	ldr.w	r3, [r8]
 800a962:	b955      	cbnz	r5, 800a97a <__kernel_rem_pio2+0x30a>
 800a964:	b123      	cbz	r3, 800a970 <__kernel_rem_pio2+0x300>
 800a966:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a96a:	f8c8 3000 	str.w	r3, [r8]
 800a96e:	2301      	movs	r3, #1
 800a970:	3201      	adds	r2, #1
 800a972:	f108 0804 	add.w	r8, r8, #4
 800a976:	461d      	mov	r5, r3
 800a978:	e752      	b.n	800a820 <__kernel_rem_pio2+0x1b0>
 800a97a:	1acb      	subs	r3, r1, r3
 800a97c:	f8c8 3000 	str.w	r3, [r8]
 800a980:	462b      	mov	r3, r5
 800a982:	e7f5      	b.n	800a970 <__kernel_rem_pio2+0x300>
 800a984:	f3af 8000 	nop.w
	...
 800a994:	3ff00000 	.word	0x3ff00000
 800a998:	0800b2e0 	.word	0x0800b2e0
 800a99c:	40200000 	.word	0x40200000
 800a9a0:	3ff00000 	.word	0x3ff00000
 800a9a4:	3e700000 	.word	0x3e700000
 800a9a8:	41700000 	.word	0x41700000
 800a9ac:	3fe00000 	.word	0x3fe00000
 800a9b0:	0800b2a0 	.word	0x0800b2a0
 800a9b4:	1e62      	subs	r2, r4, #1
 800a9b6:	ab0e      	add	r3, sp, #56	; 0x38
 800a9b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9bc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a9c0:	a90e      	add	r1, sp, #56	; 0x38
 800a9c2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a9c6:	e739      	b.n	800a83c <__kernel_rem_pio2+0x1cc>
 800a9c8:	1e62      	subs	r2, r4, #1
 800a9ca:	ab0e      	add	r3, sp, #56	; 0x38
 800a9cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9d0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a9d4:	e7f4      	b.n	800a9c0 <__kernel_rem_pio2+0x350>
 800a9d6:	a90e      	add	r1, sp, #56	; 0x38
 800a9d8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a9dc:	3b01      	subs	r3, #1
 800a9de:	430a      	orrs	r2, r1
 800a9e0:	e789      	b.n	800a8f6 <__kernel_rem_pio2+0x286>
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a9e8:	2900      	cmp	r1, #0
 800a9ea:	d0fa      	beq.n	800a9e2 <__kernel_rem_pio2+0x372>
 800a9ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9ee:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800a9f2:	446a      	add	r2, sp
 800a9f4:	3a98      	subs	r2, #152	; 0x98
 800a9f6:	920a      	str	r2, [sp, #40]	; 0x28
 800a9f8:	9a08      	ldr	r2, [sp, #32]
 800a9fa:	18e3      	adds	r3, r4, r3
 800a9fc:	18a5      	adds	r5, r4, r2
 800a9fe:	aa22      	add	r2, sp, #136	; 0x88
 800aa00:	f104 0801 	add.w	r8, r4, #1
 800aa04:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800aa08:	9304      	str	r3, [sp, #16]
 800aa0a:	9b04      	ldr	r3, [sp, #16]
 800aa0c:	4543      	cmp	r3, r8
 800aa0e:	da04      	bge.n	800aa1a <__kernel_rem_pio2+0x3aa>
 800aa10:	461c      	mov	r4, r3
 800aa12:	e6a3      	b.n	800a75c <__kernel_rem_pio2+0xec>
 800aa14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa16:	2301      	movs	r3, #1
 800aa18:	e7e4      	b.n	800a9e4 <__kernel_rem_pio2+0x374>
 800aa1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa1c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800aa20:	f7f5 fd2c 	bl	800047c <__aeabi_i2d>
 800aa24:	e8e5 0102 	strd	r0, r1, [r5], #8
 800aa28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa2a:	46ab      	mov	fp, r5
 800aa2c:	461c      	mov	r4, r3
 800aa2e:	f04f 0900 	mov.w	r9, #0
 800aa32:	2600      	movs	r6, #0
 800aa34:	2700      	movs	r7, #0
 800aa36:	9b06      	ldr	r3, [sp, #24]
 800aa38:	4599      	cmp	r9, r3
 800aa3a:	dd06      	ble.n	800aa4a <__kernel_rem_pio2+0x3da>
 800aa3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa3e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800aa42:	f108 0801 	add.w	r8, r8, #1
 800aa46:	930a      	str	r3, [sp, #40]	; 0x28
 800aa48:	e7df      	b.n	800aa0a <__kernel_rem_pio2+0x39a>
 800aa4a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800aa4e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800aa52:	f7f5 fd7d 	bl	8000550 <__aeabi_dmul>
 800aa56:	4602      	mov	r2, r0
 800aa58:	460b      	mov	r3, r1
 800aa5a:	4630      	mov	r0, r6
 800aa5c:	4639      	mov	r1, r7
 800aa5e:	f7f5 fbc1 	bl	80001e4 <__adddf3>
 800aa62:	f109 0901 	add.w	r9, r9, #1
 800aa66:	4606      	mov	r6, r0
 800aa68:	460f      	mov	r7, r1
 800aa6a:	e7e4      	b.n	800aa36 <__kernel_rem_pio2+0x3c6>
 800aa6c:	3d01      	subs	r5, #1
 800aa6e:	e748      	b.n	800a902 <__kernel_rem_pio2+0x292>
 800aa70:	ec47 6b10 	vmov	d0, r6, r7
 800aa74:	f1ca 0000 	rsb	r0, sl, #0
 800aa78:	f000 fa92 	bl	800afa0 <scalbn>
 800aa7c:	ec57 6b10 	vmov	r6, r7, d0
 800aa80:	4ba0      	ldr	r3, [pc, #640]	; (800ad04 <__kernel_rem_pio2+0x694>)
 800aa82:	ee10 0a10 	vmov	r0, s0
 800aa86:	2200      	movs	r2, #0
 800aa88:	4639      	mov	r1, r7
 800aa8a:	f7f5 ffe7 	bl	8000a5c <__aeabi_dcmpge>
 800aa8e:	b1f8      	cbz	r0, 800aad0 <__kernel_rem_pio2+0x460>
 800aa90:	4b9d      	ldr	r3, [pc, #628]	; (800ad08 <__kernel_rem_pio2+0x698>)
 800aa92:	2200      	movs	r2, #0
 800aa94:	4630      	mov	r0, r6
 800aa96:	4639      	mov	r1, r7
 800aa98:	f7f5 fd5a 	bl	8000550 <__aeabi_dmul>
 800aa9c:	f7f5 fff2 	bl	8000a84 <__aeabi_d2iz>
 800aaa0:	4680      	mov	r8, r0
 800aaa2:	f7f5 fceb 	bl	800047c <__aeabi_i2d>
 800aaa6:	4b97      	ldr	r3, [pc, #604]	; (800ad04 <__kernel_rem_pio2+0x694>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f7f5 fd51 	bl	8000550 <__aeabi_dmul>
 800aaae:	460b      	mov	r3, r1
 800aab0:	4602      	mov	r2, r0
 800aab2:	4639      	mov	r1, r7
 800aab4:	4630      	mov	r0, r6
 800aab6:	f7f5 fb93 	bl	80001e0 <__aeabi_dsub>
 800aaba:	f7f5 ffe3 	bl	8000a84 <__aeabi_d2iz>
 800aabe:	1c65      	adds	r5, r4, #1
 800aac0:	ab0e      	add	r3, sp, #56	; 0x38
 800aac2:	f10a 0a18 	add.w	sl, sl, #24
 800aac6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800aaca:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800aace:	e720      	b.n	800a912 <__kernel_rem_pio2+0x2a2>
 800aad0:	4630      	mov	r0, r6
 800aad2:	4639      	mov	r1, r7
 800aad4:	f7f5 ffd6 	bl	8000a84 <__aeabi_d2iz>
 800aad8:	ab0e      	add	r3, sp, #56	; 0x38
 800aada:	4625      	mov	r5, r4
 800aadc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800aae0:	e717      	b.n	800a912 <__kernel_rem_pio2+0x2a2>
 800aae2:	ab0e      	add	r3, sp, #56	; 0x38
 800aae4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800aae8:	f7f5 fcc8 	bl	800047c <__aeabi_i2d>
 800aaec:	4632      	mov	r2, r6
 800aaee:	463b      	mov	r3, r7
 800aaf0:	f7f5 fd2e 	bl	8000550 <__aeabi_dmul>
 800aaf4:	4b84      	ldr	r3, [pc, #528]	; (800ad08 <__kernel_rem_pio2+0x698>)
 800aaf6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800aafa:	2200      	movs	r2, #0
 800aafc:	4630      	mov	r0, r6
 800aafe:	4639      	mov	r1, r7
 800ab00:	f7f5 fd26 	bl	8000550 <__aeabi_dmul>
 800ab04:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab08:	4606      	mov	r6, r0
 800ab0a:	460f      	mov	r7, r1
 800ab0c:	e70f      	b.n	800a92e <__kernel_rem_pio2+0x2be>
 800ab0e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ab12:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ab16:	f7f5 fd1b 	bl	8000550 <__aeabi_dmul>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab22:	f7f5 fb5f 	bl	80001e4 <__adddf3>
 800ab26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ab2a:	f108 0801 	add.w	r8, r8, #1
 800ab2e:	9b02      	ldr	r3, [sp, #8]
 800ab30:	4598      	cmp	r8, r3
 800ab32:	dc01      	bgt.n	800ab38 <__kernel_rem_pio2+0x4c8>
 800ab34:	45b8      	cmp	r8, r7
 800ab36:	ddea      	ble.n	800ab0e <__kernel_rem_pio2+0x49e>
 800ab38:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ab3c:	ab4a      	add	r3, sp, #296	; 0x128
 800ab3e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ab42:	ed87 7b00 	vstr	d7, [r7]
 800ab46:	3e01      	subs	r6, #1
 800ab48:	e6f8      	b.n	800a93c <__kernel_rem_pio2+0x2cc>
 800ab4a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ab4c:	2b02      	cmp	r3, #2
 800ab4e:	dc0b      	bgt.n	800ab68 <__kernel_rem_pio2+0x4f8>
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	dc35      	bgt.n	800abc0 <__kernel_rem_pio2+0x550>
 800ab54:	d059      	beq.n	800ac0a <__kernel_rem_pio2+0x59a>
 800ab56:	9b04      	ldr	r3, [sp, #16]
 800ab58:	f003 0007 	and.w	r0, r3, #7
 800ab5c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800ab60:	ecbd 8b02 	vpop	{d8}
 800ab64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab68:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ab6a:	2b03      	cmp	r3, #3
 800ab6c:	d1f3      	bne.n	800ab56 <__kernel_rem_pio2+0x4e6>
 800ab6e:	ab4a      	add	r3, sp, #296	; 0x128
 800ab70:	4423      	add	r3, r4
 800ab72:	9306      	str	r3, [sp, #24]
 800ab74:	461c      	mov	r4, r3
 800ab76:	469a      	mov	sl, r3
 800ab78:	9502      	str	r5, [sp, #8]
 800ab7a:	9b02      	ldr	r3, [sp, #8]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	f1aa 0a08 	sub.w	sl, sl, #8
 800ab82:	dc6b      	bgt.n	800ac5c <__kernel_rem_pio2+0x5ec>
 800ab84:	46aa      	mov	sl, r5
 800ab86:	f1ba 0f01 	cmp.w	sl, #1
 800ab8a:	f1a4 0408 	sub.w	r4, r4, #8
 800ab8e:	f300 8085 	bgt.w	800ac9c <__kernel_rem_pio2+0x62c>
 800ab92:	9c06      	ldr	r4, [sp, #24]
 800ab94:	2000      	movs	r0, #0
 800ab96:	3408      	adds	r4, #8
 800ab98:	2100      	movs	r1, #0
 800ab9a:	2d01      	cmp	r5, #1
 800ab9c:	f300 809d 	bgt.w	800acda <__kernel_rem_pio2+0x66a>
 800aba0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800aba4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800aba8:	f1bb 0f00 	cmp.w	fp, #0
 800abac:	f040 809b 	bne.w	800ace6 <__kernel_rem_pio2+0x676>
 800abb0:	9b01      	ldr	r3, [sp, #4]
 800abb2:	e9c3 5600 	strd	r5, r6, [r3]
 800abb6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800abba:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800abbe:	e7ca      	b.n	800ab56 <__kernel_rem_pio2+0x4e6>
 800abc0:	3408      	adds	r4, #8
 800abc2:	ab4a      	add	r3, sp, #296	; 0x128
 800abc4:	441c      	add	r4, r3
 800abc6:	462e      	mov	r6, r5
 800abc8:	2000      	movs	r0, #0
 800abca:	2100      	movs	r1, #0
 800abcc:	2e00      	cmp	r6, #0
 800abce:	da36      	bge.n	800ac3e <__kernel_rem_pio2+0x5ce>
 800abd0:	f1bb 0f00 	cmp.w	fp, #0
 800abd4:	d039      	beq.n	800ac4a <__kernel_rem_pio2+0x5da>
 800abd6:	4602      	mov	r2, r0
 800abd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abdc:	9c01      	ldr	r4, [sp, #4]
 800abde:	e9c4 2300 	strd	r2, r3, [r4]
 800abe2:	4602      	mov	r2, r0
 800abe4:	460b      	mov	r3, r1
 800abe6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800abea:	f7f5 faf9 	bl	80001e0 <__aeabi_dsub>
 800abee:	ae4c      	add	r6, sp, #304	; 0x130
 800abf0:	2401      	movs	r4, #1
 800abf2:	42a5      	cmp	r5, r4
 800abf4:	da2c      	bge.n	800ac50 <__kernel_rem_pio2+0x5e0>
 800abf6:	f1bb 0f00 	cmp.w	fp, #0
 800abfa:	d002      	beq.n	800ac02 <__kernel_rem_pio2+0x592>
 800abfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac00:	4619      	mov	r1, r3
 800ac02:	9b01      	ldr	r3, [sp, #4]
 800ac04:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ac08:	e7a5      	b.n	800ab56 <__kernel_rem_pio2+0x4e6>
 800ac0a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800ac0e:	eb0d 0403 	add.w	r4, sp, r3
 800ac12:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ac16:	2000      	movs	r0, #0
 800ac18:	2100      	movs	r1, #0
 800ac1a:	2d00      	cmp	r5, #0
 800ac1c:	da09      	bge.n	800ac32 <__kernel_rem_pio2+0x5c2>
 800ac1e:	f1bb 0f00 	cmp.w	fp, #0
 800ac22:	d002      	beq.n	800ac2a <__kernel_rem_pio2+0x5ba>
 800ac24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac28:	4619      	mov	r1, r3
 800ac2a:	9b01      	ldr	r3, [sp, #4]
 800ac2c:	e9c3 0100 	strd	r0, r1, [r3]
 800ac30:	e791      	b.n	800ab56 <__kernel_rem_pio2+0x4e6>
 800ac32:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ac36:	f7f5 fad5 	bl	80001e4 <__adddf3>
 800ac3a:	3d01      	subs	r5, #1
 800ac3c:	e7ed      	b.n	800ac1a <__kernel_rem_pio2+0x5aa>
 800ac3e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ac42:	f7f5 facf 	bl	80001e4 <__adddf3>
 800ac46:	3e01      	subs	r6, #1
 800ac48:	e7c0      	b.n	800abcc <__kernel_rem_pio2+0x55c>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	e7c5      	b.n	800abdc <__kernel_rem_pio2+0x56c>
 800ac50:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ac54:	f7f5 fac6 	bl	80001e4 <__adddf3>
 800ac58:	3401      	adds	r4, #1
 800ac5a:	e7ca      	b.n	800abf2 <__kernel_rem_pio2+0x582>
 800ac5c:	e9da 8900 	ldrd	r8, r9, [sl]
 800ac60:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ac64:	9b02      	ldr	r3, [sp, #8]
 800ac66:	3b01      	subs	r3, #1
 800ac68:	9302      	str	r3, [sp, #8]
 800ac6a:	4632      	mov	r2, r6
 800ac6c:	463b      	mov	r3, r7
 800ac6e:	4640      	mov	r0, r8
 800ac70:	4649      	mov	r1, r9
 800ac72:	f7f5 fab7 	bl	80001e4 <__adddf3>
 800ac76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	4640      	mov	r0, r8
 800ac80:	4649      	mov	r1, r9
 800ac82:	f7f5 faad 	bl	80001e0 <__aeabi_dsub>
 800ac86:	4632      	mov	r2, r6
 800ac88:	463b      	mov	r3, r7
 800ac8a:	f7f5 faab 	bl	80001e4 <__adddf3>
 800ac8e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800ac92:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ac96:	ed8a 7b00 	vstr	d7, [sl]
 800ac9a:	e76e      	b.n	800ab7a <__kernel_rem_pio2+0x50a>
 800ac9c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800aca0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800aca4:	4640      	mov	r0, r8
 800aca6:	4632      	mov	r2, r6
 800aca8:	463b      	mov	r3, r7
 800acaa:	4649      	mov	r1, r9
 800acac:	f7f5 fa9a 	bl	80001e4 <__adddf3>
 800acb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acb4:	4602      	mov	r2, r0
 800acb6:	460b      	mov	r3, r1
 800acb8:	4640      	mov	r0, r8
 800acba:	4649      	mov	r1, r9
 800acbc:	f7f5 fa90 	bl	80001e0 <__aeabi_dsub>
 800acc0:	4632      	mov	r2, r6
 800acc2:	463b      	mov	r3, r7
 800acc4:	f7f5 fa8e 	bl	80001e4 <__adddf3>
 800acc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800accc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800acd0:	ed84 7b00 	vstr	d7, [r4]
 800acd4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800acd8:	e755      	b.n	800ab86 <__kernel_rem_pio2+0x516>
 800acda:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800acde:	f7f5 fa81 	bl	80001e4 <__adddf3>
 800ace2:	3d01      	subs	r5, #1
 800ace4:	e759      	b.n	800ab9a <__kernel_rem_pio2+0x52a>
 800ace6:	9b01      	ldr	r3, [sp, #4]
 800ace8:	9a01      	ldr	r2, [sp, #4]
 800acea:	601d      	str	r5, [r3, #0]
 800acec:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800acf0:	605c      	str	r4, [r3, #4]
 800acf2:	609f      	str	r7, [r3, #8]
 800acf4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800acf8:	60d3      	str	r3, [r2, #12]
 800acfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800acfe:	6110      	str	r0, [r2, #16]
 800ad00:	6153      	str	r3, [r2, #20]
 800ad02:	e728      	b.n	800ab56 <__kernel_rem_pio2+0x4e6>
 800ad04:	41700000 	.word	0x41700000
 800ad08:	3e700000 	.word	0x3e700000
 800ad0c:	00000000 	.word	0x00000000

0800ad10 <__kernel_sin>:
 800ad10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad14:	ed2d 8b04 	vpush	{d8-d9}
 800ad18:	eeb0 8a41 	vmov.f32	s16, s2
 800ad1c:	eef0 8a61 	vmov.f32	s17, s3
 800ad20:	ec55 4b10 	vmov	r4, r5, d0
 800ad24:	b083      	sub	sp, #12
 800ad26:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ad2a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ad2e:	9001      	str	r0, [sp, #4]
 800ad30:	da06      	bge.n	800ad40 <__kernel_sin+0x30>
 800ad32:	ee10 0a10 	vmov	r0, s0
 800ad36:	4629      	mov	r1, r5
 800ad38:	f7f5 fea4 	bl	8000a84 <__aeabi_d2iz>
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	d051      	beq.n	800ade4 <__kernel_sin+0xd4>
 800ad40:	4622      	mov	r2, r4
 800ad42:	462b      	mov	r3, r5
 800ad44:	4620      	mov	r0, r4
 800ad46:	4629      	mov	r1, r5
 800ad48:	f7f5 fc02 	bl	8000550 <__aeabi_dmul>
 800ad4c:	4682      	mov	sl, r0
 800ad4e:	468b      	mov	fp, r1
 800ad50:	4602      	mov	r2, r0
 800ad52:	460b      	mov	r3, r1
 800ad54:	4620      	mov	r0, r4
 800ad56:	4629      	mov	r1, r5
 800ad58:	f7f5 fbfa 	bl	8000550 <__aeabi_dmul>
 800ad5c:	a341      	add	r3, pc, #260	; (adr r3, 800ae64 <__kernel_sin+0x154>)
 800ad5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad62:	4680      	mov	r8, r0
 800ad64:	4689      	mov	r9, r1
 800ad66:	4650      	mov	r0, sl
 800ad68:	4659      	mov	r1, fp
 800ad6a:	f7f5 fbf1 	bl	8000550 <__aeabi_dmul>
 800ad6e:	a33f      	add	r3, pc, #252	; (adr r3, 800ae6c <__kernel_sin+0x15c>)
 800ad70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad74:	f7f5 fa34 	bl	80001e0 <__aeabi_dsub>
 800ad78:	4652      	mov	r2, sl
 800ad7a:	465b      	mov	r3, fp
 800ad7c:	f7f5 fbe8 	bl	8000550 <__aeabi_dmul>
 800ad80:	a33c      	add	r3, pc, #240	; (adr r3, 800ae74 <__kernel_sin+0x164>)
 800ad82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad86:	f7f5 fa2d 	bl	80001e4 <__adddf3>
 800ad8a:	4652      	mov	r2, sl
 800ad8c:	465b      	mov	r3, fp
 800ad8e:	f7f5 fbdf 	bl	8000550 <__aeabi_dmul>
 800ad92:	a33a      	add	r3, pc, #232	; (adr r3, 800ae7c <__kernel_sin+0x16c>)
 800ad94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad98:	f7f5 fa22 	bl	80001e0 <__aeabi_dsub>
 800ad9c:	4652      	mov	r2, sl
 800ad9e:	465b      	mov	r3, fp
 800ada0:	f7f5 fbd6 	bl	8000550 <__aeabi_dmul>
 800ada4:	a337      	add	r3, pc, #220	; (adr r3, 800ae84 <__kernel_sin+0x174>)
 800ada6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adaa:	f7f5 fa1b 	bl	80001e4 <__adddf3>
 800adae:	9b01      	ldr	r3, [sp, #4]
 800adb0:	4606      	mov	r6, r0
 800adb2:	460f      	mov	r7, r1
 800adb4:	b9eb      	cbnz	r3, 800adf2 <__kernel_sin+0xe2>
 800adb6:	4602      	mov	r2, r0
 800adb8:	460b      	mov	r3, r1
 800adba:	4650      	mov	r0, sl
 800adbc:	4659      	mov	r1, fp
 800adbe:	f7f5 fbc7 	bl	8000550 <__aeabi_dmul>
 800adc2:	a325      	add	r3, pc, #148	; (adr r3, 800ae58 <__kernel_sin+0x148>)
 800adc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc8:	f7f5 fa0a 	bl	80001e0 <__aeabi_dsub>
 800adcc:	4642      	mov	r2, r8
 800adce:	464b      	mov	r3, r9
 800add0:	f7f5 fbbe 	bl	8000550 <__aeabi_dmul>
 800add4:	4602      	mov	r2, r0
 800add6:	460b      	mov	r3, r1
 800add8:	4620      	mov	r0, r4
 800adda:	4629      	mov	r1, r5
 800addc:	f7f5 fa02 	bl	80001e4 <__adddf3>
 800ade0:	4604      	mov	r4, r0
 800ade2:	460d      	mov	r5, r1
 800ade4:	ec45 4b10 	vmov	d0, r4, r5
 800ade8:	b003      	add	sp, #12
 800adea:	ecbd 8b04 	vpop	{d8-d9}
 800adee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf2:	4b1b      	ldr	r3, [pc, #108]	; (800ae60 <__kernel_sin+0x150>)
 800adf4:	ec51 0b18 	vmov	r0, r1, d8
 800adf8:	2200      	movs	r2, #0
 800adfa:	f7f5 fba9 	bl	8000550 <__aeabi_dmul>
 800adfe:	4632      	mov	r2, r6
 800ae00:	ec41 0b19 	vmov	d9, r0, r1
 800ae04:	463b      	mov	r3, r7
 800ae06:	4640      	mov	r0, r8
 800ae08:	4649      	mov	r1, r9
 800ae0a:	f7f5 fba1 	bl	8000550 <__aeabi_dmul>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	460b      	mov	r3, r1
 800ae12:	ec51 0b19 	vmov	r0, r1, d9
 800ae16:	f7f5 f9e3 	bl	80001e0 <__aeabi_dsub>
 800ae1a:	4652      	mov	r2, sl
 800ae1c:	465b      	mov	r3, fp
 800ae1e:	f7f5 fb97 	bl	8000550 <__aeabi_dmul>
 800ae22:	ec53 2b18 	vmov	r2, r3, d8
 800ae26:	f7f5 f9db 	bl	80001e0 <__aeabi_dsub>
 800ae2a:	a30b      	add	r3, pc, #44	; (adr r3, 800ae58 <__kernel_sin+0x148>)
 800ae2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae30:	4606      	mov	r6, r0
 800ae32:	460f      	mov	r7, r1
 800ae34:	4640      	mov	r0, r8
 800ae36:	4649      	mov	r1, r9
 800ae38:	f7f5 fb8a 	bl	8000550 <__aeabi_dmul>
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	460b      	mov	r3, r1
 800ae40:	4630      	mov	r0, r6
 800ae42:	4639      	mov	r1, r7
 800ae44:	f7f5 f9ce 	bl	80001e4 <__adddf3>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	460b      	mov	r3, r1
 800ae4c:	4620      	mov	r0, r4
 800ae4e:	4629      	mov	r1, r5
 800ae50:	f7f5 f9c6 	bl	80001e0 <__aeabi_dsub>
 800ae54:	e7c4      	b.n	800ade0 <__kernel_sin+0xd0>
 800ae56:	bf00      	nop
 800ae58:	55555549 	.word	0x55555549
 800ae5c:	3fc55555 	.word	0x3fc55555
 800ae60:	3fe00000 	.word	0x3fe00000
 800ae64:	5acfd57c 	.word	0x5acfd57c
 800ae68:	3de5d93a 	.word	0x3de5d93a
 800ae6c:	8a2b9ceb 	.word	0x8a2b9ceb
 800ae70:	3e5ae5e6 	.word	0x3e5ae5e6
 800ae74:	57b1fe7d 	.word	0x57b1fe7d
 800ae78:	3ec71de3 	.word	0x3ec71de3
 800ae7c:	19c161d5 	.word	0x19c161d5
 800ae80:	3f2a01a0 	.word	0x3f2a01a0
 800ae84:	1110f8a6 	.word	0x1110f8a6
 800ae88:	3f811111 	.word	0x3f811111

0800ae8c <fabs>:
 800ae8c:	ec51 0b10 	vmov	r0, r1, d0
 800ae90:	ee10 2a10 	vmov	r2, s0
 800ae94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ae98:	ec43 2b10 	vmov	d0, r2, r3
 800ae9c:	4770      	bx	lr
	...

0800aea0 <floor>:
 800aea0:	ec51 0b10 	vmov	r0, r1, d0
 800aea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aea8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800aeac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800aeb0:	2e13      	cmp	r6, #19
 800aeb2:	ee10 5a10 	vmov	r5, s0
 800aeb6:	ee10 8a10 	vmov	r8, s0
 800aeba:	460c      	mov	r4, r1
 800aebc:	dc32      	bgt.n	800af24 <floor+0x84>
 800aebe:	2e00      	cmp	r6, #0
 800aec0:	da14      	bge.n	800aeec <floor+0x4c>
 800aec2:	a333      	add	r3, pc, #204	; (adr r3, 800af90 <floor+0xf0>)
 800aec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec8:	f7f5 f98c 	bl	80001e4 <__adddf3>
 800aecc:	2200      	movs	r2, #0
 800aece:	2300      	movs	r3, #0
 800aed0:	f7f5 fdce 	bl	8000a70 <__aeabi_dcmpgt>
 800aed4:	b138      	cbz	r0, 800aee6 <floor+0x46>
 800aed6:	2c00      	cmp	r4, #0
 800aed8:	da57      	bge.n	800af8a <floor+0xea>
 800aeda:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800aede:	431d      	orrs	r5, r3
 800aee0:	d001      	beq.n	800aee6 <floor+0x46>
 800aee2:	4c2d      	ldr	r4, [pc, #180]	; (800af98 <floor+0xf8>)
 800aee4:	2500      	movs	r5, #0
 800aee6:	4621      	mov	r1, r4
 800aee8:	4628      	mov	r0, r5
 800aeea:	e025      	b.n	800af38 <floor+0x98>
 800aeec:	4f2b      	ldr	r7, [pc, #172]	; (800af9c <floor+0xfc>)
 800aeee:	4137      	asrs	r7, r6
 800aef0:	ea01 0307 	and.w	r3, r1, r7
 800aef4:	4303      	orrs	r3, r0
 800aef6:	d01f      	beq.n	800af38 <floor+0x98>
 800aef8:	a325      	add	r3, pc, #148	; (adr r3, 800af90 <floor+0xf0>)
 800aefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefe:	f7f5 f971 	bl	80001e4 <__adddf3>
 800af02:	2200      	movs	r2, #0
 800af04:	2300      	movs	r3, #0
 800af06:	f7f5 fdb3 	bl	8000a70 <__aeabi_dcmpgt>
 800af0a:	2800      	cmp	r0, #0
 800af0c:	d0eb      	beq.n	800aee6 <floor+0x46>
 800af0e:	2c00      	cmp	r4, #0
 800af10:	bfbe      	ittt	lt
 800af12:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800af16:	fa43 f606 	asrlt.w	r6, r3, r6
 800af1a:	19a4      	addlt	r4, r4, r6
 800af1c:	ea24 0407 	bic.w	r4, r4, r7
 800af20:	2500      	movs	r5, #0
 800af22:	e7e0      	b.n	800aee6 <floor+0x46>
 800af24:	2e33      	cmp	r6, #51	; 0x33
 800af26:	dd0b      	ble.n	800af40 <floor+0xa0>
 800af28:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800af2c:	d104      	bne.n	800af38 <floor+0x98>
 800af2e:	ee10 2a10 	vmov	r2, s0
 800af32:	460b      	mov	r3, r1
 800af34:	f7f5 f956 	bl	80001e4 <__adddf3>
 800af38:	ec41 0b10 	vmov	d0, r0, r1
 800af3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af40:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800af44:	f04f 33ff 	mov.w	r3, #4294967295
 800af48:	fa23 f707 	lsr.w	r7, r3, r7
 800af4c:	4207      	tst	r7, r0
 800af4e:	d0f3      	beq.n	800af38 <floor+0x98>
 800af50:	a30f      	add	r3, pc, #60	; (adr r3, 800af90 <floor+0xf0>)
 800af52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af56:	f7f5 f945 	bl	80001e4 <__adddf3>
 800af5a:	2200      	movs	r2, #0
 800af5c:	2300      	movs	r3, #0
 800af5e:	f7f5 fd87 	bl	8000a70 <__aeabi_dcmpgt>
 800af62:	2800      	cmp	r0, #0
 800af64:	d0bf      	beq.n	800aee6 <floor+0x46>
 800af66:	2c00      	cmp	r4, #0
 800af68:	da02      	bge.n	800af70 <floor+0xd0>
 800af6a:	2e14      	cmp	r6, #20
 800af6c:	d103      	bne.n	800af76 <floor+0xd6>
 800af6e:	3401      	adds	r4, #1
 800af70:	ea25 0507 	bic.w	r5, r5, r7
 800af74:	e7b7      	b.n	800aee6 <floor+0x46>
 800af76:	2301      	movs	r3, #1
 800af78:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800af7c:	fa03 f606 	lsl.w	r6, r3, r6
 800af80:	4435      	add	r5, r6
 800af82:	4545      	cmp	r5, r8
 800af84:	bf38      	it	cc
 800af86:	18e4      	addcc	r4, r4, r3
 800af88:	e7f2      	b.n	800af70 <floor+0xd0>
 800af8a:	2500      	movs	r5, #0
 800af8c:	462c      	mov	r4, r5
 800af8e:	e7aa      	b.n	800aee6 <floor+0x46>
 800af90:	8800759c 	.word	0x8800759c
 800af94:	7e37e43c 	.word	0x7e37e43c
 800af98:	bff00000 	.word	0xbff00000
 800af9c:	000fffff 	.word	0x000fffff

0800afa0 <scalbn>:
 800afa0:	b570      	push	{r4, r5, r6, lr}
 800afa2:	ec55 4b10 	vmov	r4, r5, d0
 800afa6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800afaa:	4606      	mov	r6, r0
 800afac:	462b      	mov	r3, r5
 800afae:	b99a      	cbnz	r2, 800afd8 <scalbn+0x38>
 800afb0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800afb4:	4323      	orrs	r3, r4
 800afb6:	d036      	beq.n	800b026 <scalbn+0x86>
 800afb8:	4b39      	ldr	r3, [pc, #228]	; (800b0a0 <scalbn+0x100>)
 800afba:	4629      	mov	r1, r5
 800afbc:	ee10 0a10 	vmov	r0, s0
 800afc0:	2200      	movs	r2, #0
 800afc2:	f7f5 fac5 	bl	8000550 <__aeabi_dmul>
 800afc6:	4b37      	ldr	r3, [pc, #220]	; (800b0a4 <scalbn+0x104>)
 800afc8:	429e      	cmp	r6, r3
 800afca:	4604      	mov	r4, r0
 800afcc:	460d      	mov	r5, r1
 800afce:	da10      	bge.n	800aff2 <scalbn+0x52>
 800afd0:	a32b      	add	r3, pc, #172	; (adr r3, 800b080 <scalbn+0xe0>)
 800afd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd6:	e03a      	b.n	800b04e <scalbn+0xae>
 800afd8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800afdc:	428a      	cmp	r2, r1
 800afde:	d10c      	bne.n	800affa <scalbn+0x5a>
 800afe0:	ee10 2a10 	vmov	r2, s0
 800afe4:	4620      	mov	r0, r4
 800afe6:	4629      	mov	r1, r5
 800afe8:	f7f5 f8fc 	bl	80001e4 <__adddf3>
 800afec:	4604      	mov	r4, r0
 800afee:	460d      	mov	r5, r1
 800aff0:	e019      	b.n	800b026 <scalbn+0x86>
 800aff2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aff6:	460b      	mov	r3, r1
 800aff8:	3a36      	subs	r2, #54	; 0x36
 800affa:	4432      	add	r2, r6
 800affc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b000:	428a      	cmp	r2, r1
 800b002:	dd08      	ble.n	800b016 <scalbn+0x76>
 800b004:	2d00      	cmp	r5, #0
 800b006:	a120      	add	r1, pc, #128	; (adr r1, 800b088 <scalbn+0xe8>)
 800b008:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b00c:	da1c      	bge.n	800b048 <scalbn+0xa8>
 800b00e:	a120      	add	r1, pc, #128	; (adr r1, 800b090 <scalbn+0xf0>)
 800b010:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b014:	e018      	b.n	800b048 <scalbn+0xa8>
 800b016:	2a00      	cmp	r2, #0
 800b018:	dd08      	ble.n	800b02c <scalbn+0x8c>
 800b01a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b01e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b022:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b026:	ec45 4b10 	vmov	d0, r4, r5
 800b02a:	bd70      	pop	{r4, r5, r6, pc}
 800b02c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b030:	da19      	bge.n	800b066 <scalbn+0xc6>
 800b032:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b036:	429e      	cmp	r6, r3
 800b038:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b03c:	dd0a      	ble.n	800b054 <scalbn+0xb4>
 800b03e:	a112      	add	r1, pc, #72	; (adr r1, 800b088 <scalbn+0xe8>)
 800b040:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d1e2      	bne.n	800b00e <scalbn+0x6e>
 800b048:	a30f      	add	r3, pc, #60	; (adr r3, 800b088 <scalbn+0xe8>)
 800b04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04e:	f7f5 fa7f 	bl	8000550 <__aeabi_dmul>
 800b052:	e7cb      	b.n	800afec <scalbn+0x4c>
 800b054:	a10a      	add	r1, pc, #40	; (adr r1, 800b080 <scalbn+0xe0>)
 800b056:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d0b8      	beq.n	800afd0 <scalbn+0x30>
 800b05e:	a10e      	add	r1, pc, #56	; (adr r1, 800b098 <scalbn+0xf8>)
 800b060:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b064:	e7b4      	b.n	800afd0 <scalbn+0x30>
 800b066:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b06a:	3236      	adds	r2, #54	; 0x36
 800b06c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b070:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b074:	4620      	mov	r0, r4
 800b076:	4b0c      	ldr	r3, [pc, #48]	; (800b0a8 <scalbn+0x108>)
 800b078:	2200      	movs	r2, #0
 800b07a:	e7e8      	b.n	800b04e <scalbn+0xae>
 800b07c:	f3af 8000 	nop.w
 800b080:	c2f8f359 	.word	0xc2f8f359
 800b084:	01a56e1f 	.word	0x01a56e1f
 800b088:	8800759c 	.word	0x8800759c
 800b08c:	7e37e43c 	.word	0x7e37e43c
 800b090:	8800759c 	.word	0x8800759c
 800b094:	fe37e43c 	.word	0xfe37e43c
 800b098:	c2f8f359 	.word	0xc2f8f359
 800b09c:	81a56e1f 	.word	0x81a56e1f
 800b0a0:	43500000 	.word	0x43500000
 800b0a4:	ffff3cb0 	.word	0xffff3cb0
 800b0a8:	3c900000 	.word	0x3c900000

0800b0ac <_init>:
 800b0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ae:	bf00      	nop
 800b0b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0b2:	bc08      	pop	{r3}
 800b0b4:	469e      	mov	lr, r3
 800b0b6:	4770      	bx	lr

0800b0b8 <_fini>:
 800b0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ba:	bf00      	nop
 800b0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0be:	bc08      	pop	{r3}
 800b0c0:	469e      	mov	lr, r3
 800b0c2:	4770      	bx	lr
